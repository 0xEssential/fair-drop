/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IWrasslingArenaInterface extends ethers.utils.Interface {
  functions: {
    "allowWrassleable(address)": FunctionFragment;
    "getWrassler(address,uint256)": FunctionFragment;
    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateWrasslerAvatar(uint256,string)": FunctionFragment;
    "upgradeWrassler(address,uint256,tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowWrassleable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrassler",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWrassler",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWrasslerAvatar",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeWrassler",
    values: [
      string,
      BigNumberish,
      {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowWrassleable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrassler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWrassler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWrasslerAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeWrassler",
    data: BytesLike
  ): Result;

  events: {};
}

export class IWrasslingArena extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IWrasslingArenaInterface;

  functions: {
    allowWrassleable(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allowWrassleable(address)"(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getWrassler(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getWrassler(address,uint256)"(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerWrassler(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWrasslerAvatar(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateWrasslerAvatar(uint256,string)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowWrassleable(
    wrassleableContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allowWrassleable(address)"(
    wrassleableContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getWrassler(
    contractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getWrassler(address,uint256)"(
    contractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerWrassler(
    tokenId: BigNumberish,
    ipfsAvatar: string,
    name: string,
    bio: string,
    attack: BigNumberish,
    defense: BigNumberish,
    strength: BigNumberish,
    agility: BigNumberish,
    creativity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
    tokenId: BigNumberish,
    ipfsAvatar: string,
    name: string,
    bio: string,
    attack: BigNumberish,
    defense: BigNumberish,
    strength: BigNumberish,
    agility: BigNumberish,
    creativity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWrasslerAvatar(
    tokenId: BigNumberish,
    ipfsAvatar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateWrasslerAvatar(uint256,string)"(
    tokenId: BigNumberish,
    ipfsAvatar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeWrassler(
    wrassleableContract: string,
    tokenId: BigNumberish,
    upgradeParams: {
      attack: BigNumberish;
      defense: BigNumberish;
      strength: BigNumberish;
      agility: BigNumberish;
      creativity: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
    wrassleableContract: string,
    tokenId: BigNumberish,
    upgradeParams: {
      attack: BigNumberish;
      defense: BigNumberish;
      strength: BigNumberish;
      agility: BigNumberish;
      creativity: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowWrassleable(
      wrassleableContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "allowWrassleable(address)"(
      wrassleableContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getWrassler(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;

    "getWrassler(address,uint256)"(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;

    registerWrassler(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWrasslerAvatar(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateWrasslerAvatar(uint256,string)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allowWrassleable(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allowWrassleable(address)"(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getWrassler(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getWrassler(address,uint256)"(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerWrassler(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWrasslerAvatar(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateWrasslerAvatar(uint256,string)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowWrassleable(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allowWrassleable(address)"(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getWrassler(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getWrassler(address,uint256)"(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerWrassler(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWrasslerAvatar(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateWrasslerAvatar(uint256,string)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
