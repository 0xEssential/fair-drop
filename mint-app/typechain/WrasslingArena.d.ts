/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WrasslingArenaInterface extends ethers.utils.Interface {
  functions: {
    "allowWrassleable(address)": FunctionFragment;
    "getWrassler(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "removeWrassler(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateWrasslerAvatar(uint256,string)": FunctionFragment;
    "upgradeWrassler(address,uint256,tuple)": FunctionFragment;
    "wrasslerAvatars(address,uint256)": FunctionFragment;
    "wrasslers(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowWrassleable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrassler",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerWrassler",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWrassler",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWrasslerAvatar",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeWrassler",
    values: [
      string,
      BigNumberish,
      {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wrasslerAvatars",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrasslers",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowWrassleable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrassler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerWrassler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWrassler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWrasslerAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeWrassler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrasslerAvatars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrasslers", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "WrasslerRegistered(address,uint256)": EventFragment;
    "WrasslerRemoved(address,uint256)": EventFragment;
    "WrasslerUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrasslerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrasslerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrasslerUpdated"): EventFragment;
}

export class WrasslingArena extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WrasslingArenaInterface;

  functions: {
    allowWrassleable(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allowWrassleable(address)"(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getWrassler(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;

    "getWrassler(address,uint256)"(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    registerWrassler(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeWrassler(address,uint256)"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWrasslerAvatar(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateWrasslerAvatar(uint256,string)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrasslerAvatars(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "wrasslerAvatars(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    wrasslers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: string;
        wrassleableContract: string;
        tokenId: BigNumber;
        name: string;
        bio: string;
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;

    "wrasslers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: string;
        wrassleableContract: string;
        tokenId: BigNumber;
        name: string;
        bio: string;
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;
  };

  allowWrassleable(
    wrassleableContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allowWrassleable(address)"(
    wrassleableContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getWrassler(
    contractAddress: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      attack: BigNumber;
      defense: BigNumber;
      strength: BigNumber;
      agility: BigNumber;
      creativity: BigNumber;
    }
  >;

  "getWrassler(address,uint256)"(
    contractAddress: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      attack: BigNumber;
      defense: BigNumber;
      strength: BigNumber;
      agility: BigNumber;
      creativity: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  registerWrassler(
    tokenId: BigNumberish,
    ipfsAvatar: string,
    name: string,
    bio: string,
    attack: BigNumberish,
    defense: BigNumberish,
    strength: BigNumberish,
    agility: BigNumberish,
    creativity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
    tokenId: BigNumberish,
    ipfsAvatar: string,
    name: string,
    bio: string,
    attack: BigNumberish,
    defense: BigNumberish,
    strength: BigNumberish,
    agility: BigNumberish,
    creativity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWrassler(
    wrassleableContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeWrassler(address,uint256)"(
    wrassleableContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWrasslerAvatar(
    tokenId: BigNumberish,
    ipfsAvatar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateWrasslerAvatar(uint256,string)"(
    tokenId: BigNumberish,
    ipfsAvatar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeWrassler(
    wrassleableContract: string,
    tokenId: BigNumberish,
    upgradeParams: {
      attack: BigNumberish;
      defense: BigNumberish;
      strength: BigNumberish;
      agility: BigNumberish;
      creativity: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
    wrassleableContract: string,
    tokenId: BigNumberish,
    upgradeParams: {
      attack: BigNumberish;
      defense: BigNumberish;
      strength: BigNumberish;
      agility: BigNumberish;
      creativity: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrasslerAvatars(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "wrasslerAvatars(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  wrasslers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: string;
      wrassleableContract: string;
      tokenId: BigNumber;
      name: string;
      bio: string;
      attack: BigNumber;
      defense: BigNumber;
      strength: BigNumber;
      agility: BigNumber;
      creativity: BigNumber;
    }
  >;

  "wrasslers(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: string;
      wrassleableContract: string;
      tokenId: BigNumber;
      name: string;
      bio: string;
      attack: BigNumber;
      defense: BigNumber;
      strength: BigNumber;
      agility: BigNumber;
      creativity: BigNumber;
    }
  >;

  callStatic: {
    allowWrassleable(
      wrassleableContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "allowWrassleable(address)"(
      wrassleableContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getWrassler(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;

    "getWrassler(address,uint256)"(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    registerWrassler(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeWrassler(address,uint256)"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWrasslerAvatar(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateWrasslerAvatar(uint256,string)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    wrasslerAvatars(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "wrasslerAvatars(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    wrasslers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: string;
        wrassleableContract: string;
        tokenId: BigNumber;
        name: string;
        bio: string;
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;

    "wrasslers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: string;
        wrassleableContract: string;
        tokenId: BigNumber;
        name: string;
        bio: string;
        attack: BigNumber;
        defense: BigNumber;
        strength: BigNumber;
        agility: BigNumber;
        creativity: BigNumber;
      }
    >;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    WrasslerRegistered(
      contractAddress: null,
      tokenId: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contractAddress: string; tokenId: BigNumber }
    >;

    WrasslerRemoved(
      contractAddress: null,
      tokenId: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contractAddress: string; tokenId: BigNumber }
    >;

    WrasslerUpdated(
      contractAddress: null,
      tokenId: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contractAddress: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    allowWrassleable(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allowWrassleable(address)"(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getWrassler(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWrassler(address,uint256)"(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerWrassler(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeWrassler(address,uint256)"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWrasslerAvatar(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateWrasslerAvatar(uint256,string)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrasslerAvatars(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wrasslerAvatars(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrasslers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wrasslers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowWrassleable(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allowWrassleable(address)"(
      wrassleableContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getWrassler(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWrassler(address,uint256)"(
      contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerWrassler(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerWrassler(uint256,string,string,string,uint256,uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      name: string,
      bio: string,
      attack: BigNumberish,
      defense: BigNumberish,
      strength: BigNumberish,
      agility: BigNumberish,
      creativity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeWrassler(address,uint256)"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWrasslerAvatar(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateWrasslerAvatar(uint256,string)"(
      tokenId: BigNumberish,
      ipfsAvatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeWrassler(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeWrassler(address,uint256,(uint256,uint256,uint256,uint256,uint256))"(
      wrassleableContract: string,
      tokenId: BigNumberish,
      upgradeParams: {
        attack: BigNumberish;
        defense: BigNumberish;
        strength: BigNumberish;
        agility: BigNumberish;
        creativity: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrasslerAvatars(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrasslerAvatars(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrasslers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrasslers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
