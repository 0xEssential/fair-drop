/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VRFCoordinatorMock,
  VRFCoordinatorMockInterface,
} from "../VRFCoordinatorMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "linkAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "seed",
        type: "uint256",
      },
    ],
    name: "RandomnessRequest",
    type: "event",
  },
  {
    inputs: [],
    name: "LINK",
    outputs: [
      {
        internalType: "contract LinkTokenInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "randomness",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "consumerContract",
        type: "address",
      },
    ],
    name: "callBackWithRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "onTokenTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104d23803806104d283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610441806100916000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed3614610064578063cf55fe9714610079575b600080fd5b61004e61008c565b60405161005b919061037d565b60405180910390f35b610077610072366004610222565b61009b565b005b610077610087366004610302565b610128565b6000546001600160a01b031681565b6000546001600160a01b031633146100ce5760405162461bcd60e51b81526004016100c5906103c8565b60405180910390fd5b600080828060200190518101906100e591906102df565b915091508082866001600160a01b03167f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c60405160405180910390a45050505050565b6000806394985ddd60e01b858560405160240161014692919061036f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050620324b0805a101561019e5760405162461bcd60e51b81526004016100c590610391565b6000846001600160a01b0316836040516101b89190610336565b6000604051808303816000865af19150503d80600081146101f5576040519150601f19603f3d011682016040523d82523d6000602084013e6101fa565b606091505b50505050505050505050565b80356001600160a01b038116811461021d57600080fd5b919050565b600080600060608486031215610236578283fd5b61023f84610206565b92506020808501359250604085013567ffffffffffffffff80821115610263578384fd5b818701915087601f830112610276578384fd5b813581811115610288576102886103f5565b604051601f8201601f19168101850183811182821017156102ab576102ab6103f5565b60405281815283820185018a10156102c1578586fd5b81858501868301378585838301015280955050505050509250925092565b600080604083850312156102f1578182fd5b505080516020909101519092909150565b600080600060608486031215610316578283fd5b833592506020840135915061032d60408501610206565b90509250925092565b60008251815b81811015610356576020818601810151858301520161033c565b818111156103645782828501525b509190910192915050565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6020808252601b908201527f6e6f7420656e6f7567682067617320666f7220636f6e73756d65720000000000604082015260600190565b60208082526013908201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604082015260600190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212209f25fe326e00004bccf634806937bbc918e546c51ed7e4f05a68883cf16a6b1564736f6c63430008000033";

type VRFCoordinatorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFCoordinatorMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFCoordinatorMock__factory extends ContractFactory {
  constructor(...args: VRFCoordinatorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    linkAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VRFCoordinatorMock> {
    return super.deploy(
      linkAddress,
      overrides || {}
    ) as Promise<VRFCoordinatorMock>;
  }
  getDeployTransaction(
    linkAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(linkAddress, overrides || {});
  }
  attach(address: string): VRFCoordinatorMock {
    return super.attach(address) as VRFCoordinatorMock;
  }
  connect(signer: Signer): VRFCoordinatorMock__factory {
    return super.connect(signer) as VRFCoordinatorMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFCoordinatorMockInterface {
    return new utils.Interface(_abi) as VRFCoordinatorMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFCoordinatorMock {
    return new Contract(address, _abi, signerOrProvider) as VRFCoordinatorMock;
  }
}
