/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { ChildPotatoFarm } from "../ChildPotatoFarm";

export class ChildPotatoFarm__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    potato_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChildPotatoFarm> {
    return super.deploy(potato_, overrides || {}) as Promise<ChildPotatoFarm>;
  }
  getDeployTransaction(
    potato_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(potato_, overrides || {});
  }
  attach(address: string): ChildPotatoFarm {
    return super.attach(address) as ChildPotatoFarm;
  }
  connect(signer: Signer): ChildPotatoFarm__factory {
    return super.connect(signer) as ChildPotatoFarm__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChildPotatoFarm {
    return new Contract(address, _abi, signerOrProvider) as ChildPotatoFarm;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "potato_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "plantFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "plantedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101e93803806101e98339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610184806100656000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063303fd25e1461003b5780634720537a14610069575b600080fd5b6100676004803603604081101561005157600080fd5b506001600160a01b0381351690602001356100a1565b005b61008f6004803603602081101561007f57600080fd5b50356001600160a01b031661013c565b60408051918252519081900360200190f35b6001600160a01b038083166000908152600160209081526040808320805486019055825481516323b872dd60e01b81523360048201523060248201526044810187905291519416936323b872dd93606480840194938390030190829087803b15801561010c57600080fd5b505af1158015610120573d6000803e3d6000fd5b505050506040513d602081101561013657600080fd5b50505050565b6001602052600090815260409020548156fea26469706673582212205e85418cd687a7a31de3b6c088c6db9d633a3ab720c02e77eaf92a27267efdff64736f6c63430006060033";
