{
  "address": "0x39a9C9B9353661b112648D269C863ad8bE5B53aB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedMinters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7c44e06168bf5e28f83653676d53010d28a499557c755316183dadd6db6f51dd",
  "receipt": {
    "to": null,
    "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
    "contractAddress": "0x39a9C9B9353661b112648D269C863ad8bE5B53aB",
    "transactionIndex": 0,
    "gasUsed": "5056672",
    "logsBloom": "0x
    "blockHash": "0xef4c0d6fd1d498d81b7200437193381f94a85b74effee45d2def2d918a6dc97e",
    "transactionHash": "0x7c44e06168bf5e28f83653676d53010d28a499557c755316183dadd6db6f51dd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5280098,
        "transactionHash": "0x7c44e06168bf5e28f83653676d53010d28a499557c755316183dadd6db6f51dd",
        "address": "0x39a9C9B9353661b112648D269C863ad8bE5B53aB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xef4c0d6fd1d498d81b7200437193381f94a85b74effee45d2def2d918a6dc97e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5280098,
        "transactionHash": "0x7c44e06168bf5e28f83653676d53010d28a499557c755316183dadd6db6f51dd",
        "address": "0x39a9C9B9353661b112648D269C863ad8bE5B53aB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xef4c0d6fd1d498d81b7200437193381f94a85b74effee45d2def2d918a6dc97e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5280098,
        "transactionHash": "0x7c44e06168bf5e28f83653676d53010d28a499557c755316183dadd6db6f51dd",
        "address": "0x39a9C9B9353661b112648D269C863ad8bE5B53aB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xef4c0d6fd1d498d81b7200437193381f94a85b74effee45d2def2d918a6dc97e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5280098,
        "transactionHash": "0x7c44e06168bf5e28f83653676d53010d28a499557c755316183dadd6db6f51dd",
        "address": "0x39a9C9B9353661b112648D269C863ad8bE5B53aB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xef4c0d6fd1d498d81b7200437193381f94a85b74effee45d2def2d918a6dc97e"
      }
    ],
    "blockNumber": 5280098,
    "cumulativeGasUsed": "5056672",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"
  ],
  "solcInputHash": "5e0a3b95d3246f0c8a9fb05fc17ab366",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract should be deployed to Ethereum mainnet and is the ERC721 contract for your NFT.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address)\":{\"details\":\"Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"receiveMessage(bytes)\":{\"details\":\"We use Polygon to make registration and random selection inexpensive, then pass the list of eligible buying accounts to this contract.\",\"params\":{\"inputData\":\"proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"}},\"title\":\"NFTStateTransfer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"publicMint()\":{\"notice\":\"Public mint function for eligible minters\"},\"receiveMessage(bytes)\":{\"notice\":\"Receive list of eligible purchasers from L2\"},\"setPrice(uint256)\":{\"notice\":\"I have a regrettable FOMO ramp in my first project so I want to be able to adjust price as I please\"}},\"notice\":\"This is a reference implementation for a fair NFT drop.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTStateTransfer/NFTStateTransfer.sol\":\"NFTStateTransfer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x0d616363c1a1e6f9f489303f94df0cbe606826ab4944d315c3801a07f9b8d4ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x2d9f9af8b84d252e0e7ee716e4cb3ad1b58f3ec6619e4f54f40d4b5e28f75eb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x3dce5847e70c056ef0f7cf91cb9a0067cf90784794017a45c1211cde7ed1c08c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa13cd62eaa1b09d931a025eed11b553303a4a0866b10318224ebf4dc45e7c490\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../extensions/ERC721Enumerable.sol\\\";\\nimport \\\"../extensions/ERC721Burnable.sol\\\";\\nimport \\\"../extensions/ERC721Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC721PresetMinterPauserAutoId is Context, AccessControlEnumerable, ERC721Enumerable, ERC721Burnable, ERC721Pausable {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    Counters.Counter private _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    constructor(string memory name, string memory symbol, string memory baseTokenURI) ERC721(name, symbol) {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb599c34aa701283908524422b731c7b0605effa4f8c61d8c4b5e4b98ffc7dd17\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"contracts/Libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary Constants {\\n    // How long does an eligible buyer have to purchase\\n    uint256 internal constant WINDOW = 10 minutes;\\n    // How many addresses are eligible to purchase per window\\n    uint256 internal constant WINDOW_PARTICIPANTS = 5;\\n\\n    // How many NFTs in entire drop?\\n    uint256 internal constant MAX_TOKEN_COUNT = 5;\\n}\\n\",\"keccak256\":\"0x0791cab540f2e709cb5f565df193836bf1c1bcc329d1b220ef8236ee4424d1a5\",\"license\":\"AGPL-1.0\"},\"contracts/Libraries/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"./MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"./Merkle.sol\\\";\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages\\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData.toRlpItem().toList();\\n\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                inputDataRLPList[2].toUint(), // blockNumber\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            )\\n        );\\n        require(processedExits[exitHash] == false, \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\");\\n        processedExits[exitHash] = true;\\n\\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6].toBytes().toRlpItem().toList();\\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3].toList()[inputDataRLPList[9].toUint()]; // receiptLogIndex\\n\\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == RLPReader.toAddress(logRLPList[0]), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                inputDataRLPList[6].toBytes(), // receipt\\n                inputDataRLPList[8].toBytes(), // branchMask\\n                inputDataRLPList[7].toBytes(), // receiptProof\\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            inputDataRLPList[2].toUint(), // blockNumber\\n            inputDataRLPList[3].toUint(), // blockTime\\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\\n            inputDataRLPList[0].toUint(), // headerNumber\\n            inputDataRLPList[1].toBytes() // blockProof\\n        );\\n\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory receivedData = logRLPList[2].toBytes();\\n        bytes memory message = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\\n                blockNumber - startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) internal virtual;\\n}\\n\",\"keccak256\":\"0x10c3ad3b25ad0ea39c5c295d4df1be07203b281ae4424e4a412a4deefa89a4ab\",\"license\":\"MIT\"},\"contracts/Libraries/tunnel/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <0.9.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2**proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x75e1779f276a19fcb26a9865a7c5405b7c35928dc24bdc03d9fd0c55f10650bf\",\"license\":\"MIT\"},\"contracts/Libraries/tunnel/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <0.9.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\\n        return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\\n    }\\n}\\n\",\"keccak256\":\"0x29cca1b4308807b49f1ccea0b4699e9858d29f2865f145f4344b78bb5f2eadaf\",\"license\":\"MIT\"},\"contracts/Libraries/tunnel/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        require(item.length > 0, \\\"RLPReader: INVALID_BYTES_LENGTH\\\");\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item), \\\"RLPReader: ITEM_NOT_LIST\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: LIST_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // TODO: check this\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_ADDRESS\\\");\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"RLPReader: INVALID_ADDRESS_LENGTH\\\");\\n        address _address;\\n        assembly {\\n            _address := mload(add(item, 20))\\n        }\\n        return _address;\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_UINT\\\");\\n        require(item.len <= 33, \\\"RLPReader: INVALID_UINT_LENGTH\\\");\\n\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\\\");\\n        // one byte prefix\\n        require(item.len == 33, \\\"RLPReader: INVALID_UINT_STRICT_LENGTH\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\\\");\\n        uint256 offset = _payloadOffset(item.memPtr);\\n\\n        uint256 len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\\n        // require(isList(item), \\\"RLPReader: NUM_ITEMS_NOT_LIST\\\");\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            require(currPtr <= endPtr, \\\"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\\\");\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39fd30cfd5201bca181e12566efb3c64e6bbb4c658b6bfb8eb79152350a685e4\",\"license\":\"MIT\"},\"contracts/NFTStateTransfer/NFTStateTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\\\";\\n\\nimport { Constants } from \\\"../Libraries/Constants.sol\\\";\\nimport { FxBaseRootTunnel } from \\\"../Libraries/tunnel/FxBaseRootTunnel.sol\\\";\\n\\n/**\\n * @title NFTStateTransfer\\n * @notice This is a reference implementation for a fair NFT drop.\\n * @dev This contract should be deployed to Ethereum mainnet and is the ERC721 contract for your NFT.\\n */\\n\\ncontract NFTStateTransfer is ERC721PresetMinterPauserAutoId, FxBaseRootTunnel, Ownable {\\n    uint256 public mintPrice = 0.02 ether;\\n    uint256 public remainingTokens = Constants.MAX_TOKEN_COUNT;\\n    bytes public latestData;\\n    address[] internal allMinters;\\n    mapping(address => bool) public approvedMinters;\\n    uint256 internal approvedMintersEndIndex;\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot\\n    )\\n    FxBaseRootTunnel(_checkpointManager, _fxRoot)\\n    ERC721PresetMinterPauserAutoId(\\\"0xEssential FairDrop\\\", \\\"FAIRDROP\\\", \\\"ipfs://bafybeicoe6oe2yoeubcpljqqec3vul4n4l7zz7adgrjegijlw3ndx34vce/\\\")\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    /**\\n    * @notice Receive list of eligible purchasers from L2\\n    * @dev We use Polygon to make registration and random selection inexpensive, then pass the list\\n    * of eligible buying accounts to this contract.\\n    * @param data bytes32 encoded list of eligible addressses.\\n    */\\n    function _processMessageFromChild(bytes memory data) internal override {\\n        address[] memory newMinters = new address[](Constants.WINDOW_PARTICIPANTS);\\n        (newMinters) = abi.decode(data, (address[]));\\n        for (uint256 index = 0; index < Constants.WINDOW_PARTICIPANTS; index++) {\\n            addEligibleMinter((newMinters[index]));\\n        }\\n    }\\n\\n    function addEligibleMinter(address newMinter) internal {\\n        allMinters.push(newMinter);\\n        approvedMinters[newMinter] = true;\\n        approvedMintersEndIndex += 1;\\n\\n        if(approvedMintersEndIndex >= Constants.WINDOW_PARTICIPANTS) {\\n            approvedMinters[allMinters[approvedMintersEndIndex - Constants.WINDOW_PARTICIPANTS]] = false;\\n        }\\n    }\\n\\n    receive() external payable {} // solhint-disable-line no-empty-blocks\\n\\n    /**\\n    * @notice Public mint function for eligible minters\\n    */\\n    function publicMint() public payable {\\n        require(approvedMinters[msg.sender], \\\"FD:m:403\\\");\\n        require(msg.value == mintPrice, \\\"FD:m:402\\\");\\n        approvedMinters[msg.sender] = false;\\n        mint(msg.sender);\\n        remainingTokens -= 1;\\n        _sendMessageToChild(abi.encodePacked(remainingTokens));\\n    }\\n\\n    /**\\n    * @notice I have a regrettable FOMO ramp in my first project\\n    * so I want to be able to adjust price as I please\\n    */\\n    function setPrice(uint256 price) public onlyOwner {\\n        mintPrice = price;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    /**\\n    * @notice Receive list of eligible purchasers from L2\\n    * @dev We use Polygon to make registration and random selection inexpensive, then pass the list\\n    * of eligible buying accounts to this contract.\\n    * @param inputData proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer\\n    */\\n    function receiveMessage(bytes memory inputData) public override onlyOwner {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n}\\n\",\"keccak256\":\"0x27b7af7822239de15bc594eb46e7ced37296bd88678155c9d65ece88faada817\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405266470de4df82000060145560056015553480156200002157600080fd5b50604051620055d7380380620055d7833981016040819052620000449162000466565b81816040518060400160405280601481526020017f3078457373656e7469616c204661697244726f700000000000000000000000008152506040518060400160405280600881526020016704641495244524f560c41b8152506040518060800160405280604381526020016200559460439139825183908390620000d0906002906020850190620003a3565b508051620000e6906003906020840190620003a3565b5050600c805460ff191690555080516200010890600e906020840190620003a3565b506200011f60006200011962000212565b62000216565b6200014e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66200011962000212565b6200017d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6200011962000212565b5050601080546001600160a01b039485166001600160a01b031991821617909155600f805493909416921691909117909155506000620001bc62000212565b601380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3505050620004da565b3390565b6200022d82826200025960201b620013981760201c565b600082815260016020908152604090912062000254918390620013a262000269821b17901c565b505050565b62000265828262000289565b5050565b600062000280836001600160a01b03841662000313565b90505b92915050565b62000295828262000362565b62000265576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002cf62000212565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200032183836200038b565b620003595750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000283565b50600062000283565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60009081526001919091016020526040902054151590565b828054620003b1906200049d565b90600052602060002090601f016020900481019282620003d5576000855562000420565b82601f10620003f057805160ff191683800117855562000420565b8280016001018555821562000420579182015b828111156200042057825182559160200191906001019062000403565b506200042e92915062000432565b5090565b5b808211156200042e576000815560010162000433565b80516001600160a01b03811681146200046157600080fd5b919050565b6000806040838503121562000479578182fd5b620004848362000449565b9150620004946020840162000449565b90509250929050565b600281046001821680620004b257607f821691505b60208210811415620004d457634e487b7160e01b600052602260045260246000fd5b50919050565b6150aa80620004ea6000396000f3fe6080604052600436106102975760003560e01c8063715018a61161015a578063b88d4fde116100c1578063d547741f1161007a578063d547741f1461074f578063de9b771f1461076f578063e63ab1e914610784578063e985e9c514610799578063f2fde38b146107b9578063f953cec7146107d95761029e565b8063b88d4fde146106b0578063bf583903146106d0578063c0857ba0146106e5578063c87b56dd146106fa578063ca15c8731461071a578063d53913931461073a5761029e565b806395d89b411161011357806395d89b4114610611578063972c492814610626578063a217fddf1461063b578063a22cb46514610650578063a8b5e6ea14610670578063aea4e49e146106905761029e565b8063715018a6146105725780638456cb59146105875780638da5cb5b1461059c5780639010d07c146105b157806391b7f5ed146105d157806391d14854146105f15761029e565b806336568abe116101fe5780635c975abb116101b75780635c975abb146104c8578063607f2d42146104dd5780636352211e146104fd5780636817c76c1461051d5780636a6278421461053257806370a08231146105525761029e565b806336568abe1461041e5780633ccfd60b1461043e5780633f4ba83a1461045357806342842e0e1461046857806342966c68146104885780634f6ccce7146104a85761029e565b806318160ddd1161025057806318160ddd1461038157806323b872dd14610396578063248a9ca3146103b657806326092b83146103d65780632f2ff15d146103de5780632f745c59146103fe5761029e565b806301ffc9a7146102a357806306fdde03146102d9578063081812fc146102fb578063095ea7b3146103285780630e387de61461034a578063142bc2ae1461036c5761029e565b3661029e57005b600080fd5b3480156102af57600080fd5b506102c36102be366004613d8f565b6107f9565b6040516102d0919061400f565b60405180910390f35b3480156102e557600080fd5b506102ee61080c565b6040516102d0919061401a565b34801561030757600080fd5b5061031b610316366004613ce6565b61089e565b6040516102d09190613f9a565b34801561033457600080fd5b50610348610343366004613c09565b6108ea565b005b34801561035657600080fd5b5061035f610982565b6040516102d09190613f49565b34801561037857600080fd5b506102ee6109a6565b34801561038d57600080fd5b5061035f610a34565b3480156103a257600080fd5b506103486103b1366004613b2f565b610a3a565b3480156103c257600080fd5b5061035f6103d1366004613ce6565b610a72565b610348610a87565b3480156103ea57600080fd5b506103486103f9366004613cfe565b610b3b565b34801561040a57600080fd5b5061035f610419366004613c09565b610b5d565b34801561042a57600080fd5b50610348610439366004613cfe565b610bb2565b34801561044a57600080fd5b50610348610bd4565b34801561045f57600080fd5b50610348610c46565b34801561047457600080fd5b50610348610483366004613b2f565b610c96565b34801561049457600080fd5b506103486104a3366004613ce6565b610cb1565b3480156104b457600080fd5b5061035f6104c3366004613ce6565b610ce4565b3480156104d457600080fd5b506102c3610d3f565b3480156104e957600080fd5b506102c36104f8366004613ce6565b610d48565b34801561050957600080fd5b5061031b610518366004613ce6565b610d5d565b34801561052957600080fd5b5061035f610d92565b34801561053e57600080fd5b5061034861054d366004613adb565b610d98565b34801561055e57600080fd5b5061035f61056d366004613adb565b610dfd565b34801561057e57600080fd5b50610348610e41565b34801561059357600080fd5b50610348610eca565b3480156105a857600080fd5b5061031b610f1a565b3480156105bd57600080fd5b5061031b6105cc366004613d22565b610f29565b3480156105dd57600080fd5b506103486105ec366004613ce6565b610f48565b3480156105fd57600080fd5b506102c361060c366004613cfe565b610f8c565b34801561061d57600080fd5b506102ee610fb5565b34801561063257600080fd5b5061031b610fc4565b34801561064757600080fd5b5061035f610fd3565b34801561065c57600080fd5b5061034861066b366004613bd8565b610fd8565b34801561067c57600080fd5b506102c361068b366004613adb565b6110a6565b34801561069c57600080fd5b506103486106ab366004613adb565b6110bb565b3480156106bc57600080fd5b506103486106cb366004613b6f565b611106565b3480156106dc57600080fd5b5061035f611145565b3480156106f157600080fd5b5061031b61114b565b34801561070657600080fd5b506102ee610715366004613ce6565b61115a565b34801561072657600080fd5b5061035f610735366004613ce6565b6111dc565b34801561074657600080fd5b5061035f6111f3565b34801561075b57600080fd5b5061034861076a366004613cfe565b611217565b34801561077b57600080fd5b5061031b611221565b34801561079057600080fd5b5061035f611230565b3480156107a557600080fd5b506102c36107b4366004613af7565b611254565b3480156107c557600080fd5b506103486107d4366004613adb565b611282565b3480156107e557600080fd5b506103486107f4366004613dc7565b611343565b6000610804826113b7565b90505b919050565b60606002805461081b90614f81565b80601f016020809104026020016040519081016040528092919081815260200182805461084790614f81565b80156108945780601f1061086957610100808354040283529160200191610894565b820191906000526020600020905b81548152906001019060200180831161087757829003601f168201915b5050505050905090565b60006108a9826113dc565b6108ce5760405162461bcd60e51b81526004016108c590614703565b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006108f582610d5d565b9050806001600160a01b0316836001600160a01b031614156109295760405162461bcd60e51b81526004016108c5906148f4565b806001600160a01b031661093b6113f9565b6001600160a01b031614806109575750610957816107b46113f9565b6109735760405162461bcd60e51b81526004016108c59061459b565b61097d83836113fd565b505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b601680546109b390614f81565b80601f01602080910402602001604051908101604052809291908181526020018280546109df90614f81565b8015610a2c5780601f10610a0157610100808354040283529160200191610a2c565b820191906000526020600020905b815481529060010190602001808311610a0f57829003601f168201915b505050505081565b600a5490565b610a4b610a456113f9565b8261146b565b610a675760405162461bcd60e51b81526004016108c59061496c565b61097d8383836114f0565b60009081526020819052604090206001015490565b3360009081526018602052604090205460ff16610ab65760405162461bcd60e51b81526004016108c5906148d2565b6014543414610ad75760405162461bcd60e51b81526004016108c59061474f565b336000818152601860205260409020805460ff19169055610af790610d98565b600160156000828254610b0a9190614f04565b9091555050601554604051610b3991610b2591602001613f49565b60405160208183030381529060405261161d565b565b610b458282611688565b600082815260016020526040902061097d90826113a2565b6000610b6883610dfd565b8210610b865760405162461bcd60e51b81526004016108c590614197565b506001600160a01b03821660009081526008602090815260408083208484529091529020545b92915050565b610bbc82826116ac565b600082815260016020526040902061097d90826116ee565b610bdc6113f9565b6001600160a01b0316610bed610f1a565b6001600160a01b031614610c135760405162461bcd60e51b81526004016108c590614771565b6040514790339082156108fc029083906000818181858888f19350505050158015610c42573d6000803e3d6000fd5b5050565b610c727f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61060c6113f9565b610c8e5760405162461bcd60e51b81526004016108c590614bfe565b610b39611703565b61097d83838360405180602001604052806000815250611106565b610cbc610a456113f9565b610cd85760405162461bcd60e51b81526004016108c590614b77565b610ce181611771565b50565b6000610cee610a34565b8210610d0c5760405162461bcd60e51b81526004016108c5906149f4565b600a8281548110610d2d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600c5460ff1690565b60126020526000908152604090205460ff1681565b6000818152600460205260408120546001600160a01b0316806108045760405162461bcd60e51b81526004016108c590614642565b60145481565b610dc47f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661060c6113f9565b610de05760405162461bcd60e51b81526004016108c590614acc565b610df381610dee600d611818565b61181c565b610ce1600d6118fb565b60006001600160a01b038216610e255760405162461bcd60e51b81526004016108c5906145f8565b506001600160a01b031660009081526005602052604090205490565b610e496113f9565b6001600160a01b0316610e5a610f1a565b6001600160a01b031614610e805760405162461bcd60e51b81526004016108c590614771565b6013546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3601380546001600160a01b0319169055565b610ef67f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61060c6113f9565b610f125760405162461bcd60e51b81526004016108c590614382565b610b39611904565b6013546001600160a01b031690565b6000828152600160205260408120610f41908361195f565b9392505050565b610f506113f9565b6001600160a01b0316610f61610f1a565b6001600160a01b031614610f875760405162461bcd60e51b81526004016108c590614771565b601455565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606003805461081b90614f81565b6011546001600160a01b031681565b600081565b610fe06113f9565b6001600160a01b0316826001600160a01b031614156110115760405162461bcd60e51b81526004016108c590614423565b806007600061101e6113f9565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556110626113f9565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161109a919061400f565b60405180910390a35050565b60186020526000908152604090205460ff1681565b6011546001600160a01b0316156110e45760405162461bcd60e51b81526004016108c5906141e2565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6111176111116113f9565b8361146b565b6111335760405162461bcd60e51b81526004016108c59061496c565b61113f8484848461196b565b50505050565b60155481565b6010546001600160a01b031681565b6060611165826113dc565b6111815760405162461bcd60e51b81526004016108c5906147ef565b600061118b61199e565b905060008151116111ab5760405180602001604052806000815250610f41565b806111b5846119ad565b6040516020016111c6929190613ea5565b6040516020818303038152906040529392505050565b600081815260016020526040812061080490611ac7565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610bbc8282611ad2565b600f546001600160a01b031681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61128a6113f9565b6001600160a01b031661129b610f1a565b6001600160a01b0316146112c15760405162461bcd60e51b81526004016108c590614771565b6001600160a01b0381166112e75760405162461bcd60e51b81526004016108c59061427e565b6013546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3601380546001600160a01b0319166001600160a01b0392909216919091179055565b61134b6113f9565b6001600160a01b031661135c610f1a565b6001600160a01b0316146113825760405162461bcd60e51b81526004016108c590614771565b600061138d82611af1565b9050610c4281611f9f565b610c428282612026565b6000610f41836001600160a01b0384166120ab565b60006001600160e01b0319821663780e9d6360e01b14806108045750610804826120f5565b6000908152600460205260409020546001600160a01b0316151590565b3390565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061143282610d5d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611476826113dc565b6114925760405162461bcd60e51b81526004016108c590614491565b600061149d83610d5d565b9050806001600160a01b0316846001600160a01b031614806114d85750836001600160a01b03166114cd8461089e565b6001600160a01b0316145b806114e857506114e88185611254565b949350505050565b826001600160a01b031661150382610d5d565b6001600160a01b0316146115295760405162461bcd60e51b81526004016108c5906147a6565b6001600160a01b03821661154f5760405162461bcd60e51b81526004016108c5906143df565b61155a838383612135565b6115656000826113fd565b6001600160a01b038316600090815260056020526040812080546001929061158e908490614f04565b90915550506001600160a01b03821660009081526005602052604081208054600192906115bc908490614d83565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600f5460115460405163b472047760e01b81526001600160a01b039283169263b472047792611653929116908590600401613feb565b600060405180830381600087803b15801561166d57600080fd5b505af1158015611681573d6000803e3d6000fd5b5050505050565b61169182610a72565b6116a28161169d6113f9565b612140565b61097d8383612026565b6116b46113f9565b6001600160a01b0316816001600160a01b0316146116e45760405162461bcd60e51b81526004016108c590614c5c565b610c4282826121a4565b6000610f41836001600160a01b038416612227565b61170b610d3f565b6117275760405162461bcd60e51b81526004016108c590614134565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61175a6113f9565b6040516117679190613f9a565b60405180910390a1565b600061177c82610d5d565b905061178a81600084612135565b6117956000836113fd565b6001600160a01b03811660009081526005602052604081208054600192906117be908490614f04565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b5490565b6001600160a01b0382166118425760405162461bcd60e51b81526004016108c5906146ce565b61184b816113dc565b156118685760405162461bcd60e51b81526004016108c5906142c4565b61187460008383612135565b6001600160a01b038216600090815260056020526040812080546001929061189d908490614d83565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b61190c610d3f565b156119295760405162461bcd60e51b81526004016108c590614525565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861175a6113f9565b6000610f41838361233e565b6119768484846114f0565b61198284848484612397565b61113f5760405162461bcd60e51b81526004016108c59061422c565b6060600e805461081b90614f81565b6060816119d257506040805180820190915260018152600360fc1b6020820152610807565b8160005b81156119fc57806119e681614fb6565b91506119f59050600a83614d9b565b91506119d6565b6000816001600160401b03811115611a2457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a4e576020820181803683370190505b5090505b84156114e857611a63600183614f04565b9150611a70600a86614fd1565b611a7b906030614d83565b60f81b818381518110611a9e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611ac0600a86614d9b565b9450611a52565b600061080482611818565b611adb82610a72565b611ae78161169d6113f9565b61097d83836121a4565b60606000611b06611b01846124b2565b6124f8565b90506000611b3b82600281518110611b2e57634e487b7160e01b600052603260045260246000fd5b6020026020010151612663565b611b74611b6f84600881518110611b6257634e487b7160e01b600052603260045260246000fd5b602002602001015161273d565b61280d565b611b9884600981518110611b2e57634e487b7160e01b600052603260045260246000fd5b604051602001611baa93929190613f52565b60408051601f1981840301815291815281516020928301206000818152601290935291205490915060ff1615611bf25760405162461bcd60e51b81526004016108c59061433e565b6000818152601260205260408120805460ff191660011790558251611c3f90611b0190611c3a9086906006908110611b6257634e487b7160e01b600052603260045260246000fd5b6124b2565b90506000611c7482600381518110611c6757634e487b7160e01b600052603260045260246000fd5b60200260200101516124f8565b611c9885600981518110611b2e57634e487b7160e01b600052603260045260246000fd5b81518110611cb657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000611ccb826124f8565b9050611cfe81600081518110611cf157634e487b7160e01b600052603260045260246000fd5b6020026020010151612a02565b6011546001600160a01b03908116911614611d2b5760405162461bcd60e51b81526004016108c590614a87565b611dc3611d5286600681518110611b6257634e487b7160e01b600052603260045260246000fd5b611d7687600881518110611b6257634e487b7160e01b600052603260045260246000fd5b611d9a88600781518110611b6257634e487b7160e01b600052603260045260246000fd5b611dbe89600581518110611b2e57634e487b7160e01b600052603260045260246000fd5b612a53565b611ddf5760405162461bcd60e51b81526004016108c5906142fb565b611ec5611e0686600281518110611b2e57634e487b7160e01b600052603260045260246000fd5b611e2a87600381518110611b2e57634e487b7160e01b600052603260045260246000fd5b611e4e88600481518110611b2e57634e487b7160e01b600052603260045260246000fd5b60001b611e7589600581518110611b2e57634e487b7160e01b600052603260045260246000fd5b60001b611e9c8a600081518110611b2e57634e487b7160e01b600052603260045260246000fd5b611ec08b600181518110611b6257634e487b7160e01b600052603260045260246000fd5b612d54565b506000611eec82600181518110611c6757634e487b7160e01b600052603260045260246000fd5b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b611f3682600081518110611b2e57634e487b7160e01b600052603260045260246000fd5b14611f535760405162461bcd60e51b81526004016108c590614935565b6000611f7983600281518110611b6257634e487b7160e01b600052603260045260246000fd5b9050600081806020019051810190611f919190613df9565b9a9950505050505050505050565b60408051600580825260c082019092526000916020820160a08036833701905050905081806020019051810190611fd69190613c34565b905060005b600581101561097d5761201482828151811061200757634e487b7160e01b600052603260045260246000fd5b6020026020010151612e5c565b8061201e81614fb6565b915050611fdb565b6120308282610f8c565b610c42576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556120676113f9565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006120b78383612f4b565b6120ed57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bac565b506000610bac565b60006001600160e01b031982166380ac58cd60e01b148061212657506001600160e01b03198216635b5e139f60e01b145b80610804575061080482612f63565b61097d838383612f88565b61214a8282610f8c565b610c4257612162816001600160a01b03166014612fb8565b61216d836020612fb8565b60405160200161217e929190613ed4565b60408051601f198184030181529082905262461bcd60e51b82526108c59160040161401a565b6121ae8282610f8c565b15610c42576000828152602081815260408083206001600160a01b03851684529091529020805460ff191690556121e36113f9565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000818152600183016020526040812054801561233457600061224b600183614f04565b855490915060009061225f90600190614f04565b9050600086600001828154811061228657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106122b757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806122f857634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610bac565b6000915050610bac565b815460009082106123615760405162461bcd60e51b81526004016108c59061402d565b82600001828154811061238457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006123ab846001600160a01b0316613169565b156124a757836001600160a01b031663150b7a026123c76113f9565b8786866040518563ffffffff1660e01b81526004016123e99493929190613fae565b602060405180830381600087803b15801561240357600080fd5b505af1925050508015612433575060408051601f3d908101601f1916820190925261243091810190613dab565b60015b61248d573d808015612461576040519150601f19603f3d011682016040523d82523d6000602084013e612466565b606091505b5080516124855760405162461bcd60e51b81526004016108c59061422c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114e8565b506001949350505050565b6124ba613a70565b60008251116124db5760405162461bcd60e51b81526004016108c59061445a565b506040805180820190915281518152602082810190820152919050565b60606125038261316f565b61251f5760405162461bcd60e51b81526004016108c590614bc7565b600061252a8361319b565b90506000816001600160401b0381111561255457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561258d57816020015b61257a613a70565b8152602001906001900390816125725790505b509050600061259f8560200151613233565b855190915081146125c25760405162461bcd60e51b81526004016108c590614a40565b60006125d186602001516132dc565b86602001516125e09190614d83565b90506000805b85811015612657576125f783613233565b915060405180604001604052808381526020018481525085828151811061262e57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526126438284614d83565b92508061264f81614fb6565b9150506125e6565b50929695505050505050565b600061266e8261316f565b1561268b5760405162461bcd60e51b81526004016108c590614162565b8151602110156126ad5760405162461bcd60e51b81526004016108c5906149bd565b60006126bc8360200151613233565b835190915081146126df5760405162461bcd60e51b81526004016108c590614cab565b60006126ee84602001516132dc565b905060008185600001516127029190614f04565b90506000808387602001516127179190614d83565b905080519150602083101561273357826020036101000a820491505b5095945050505050565b6060600061274e8360200151613233565b835190915081146127715760405162461bcd60e51b81526004016108c5906144dd565b600061278084602001516132dc565b905060008185600001516127949190614f04565b90506000816001600160401b038111156127be57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156127e8576020820181803683370190505b50905060008160200190506127338488602001516128069190614d83565b8285613367565b60408051602081019091526000815281516060919015610804576000806128356000866133e0565b60f81c9050600181148061284c57508060ff166003145b1561290f576001855160026128619190614ee5565b61286b9190614f04565b6001600160401b0381111561289057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156128ba576020820181803683370190505b50925060006128ca6001876133e0565b905080846000815181106128ee57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506001925050612980565b60028551600261291f9190614ee5565b6129299190614f04565b6001600160401b0381111561294e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612978576020820181803683370190505b509250600091505b60ff82165b83518110156129f8576129af61299e60ff851683614f04565b6129a9906002614d83565b876133e0565b8482815181106129cf57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806129f081614fb6565b915050612985565b5050509050919050565b6000612a0d8261316f565b15612a2a5760405162461bcd60e51b81526004016108c59061468b565b8151601514612a4b5760405162461bcd60e51b81526004016108c590614cf2565b506014015190565b600080612a5f846124b2565b90506000612a6c826124f8565b905060608085600080612a7e8b61280d565b9050805160001415612a9a5760009750505050505050506114e8565b60005b8651811015612d41578151831115612ac0576000985050505050505050506114e8565b612af0878281518110612ae357634e487b7160e01b600052603260045260246000fd5b602002602001015161347d565b955085805190602001208414612b11576000985050505050505050506114e8565b612b34878281518110611c6757634e487b7160e01b600052603260045260246000fd5b9450845160111415612c33578151831415612ba4578c80519060200120612b7586601081518110611b6257634e487b7160e01b600052603260045260246000fd5b805190602001201415612b93576001985050505050505050506114e8565b6000985050505050505050506114e8565b6000828481518110612bc657634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506010811115612beb57600099505050505050505050506114e8565b612c1e868260ff1681518110612c1157634e487b7160e01b600052603260045260246000fd5b60200260200101516134f3565b9450612c2b600185614d83565b935050612d2f565b845160021415612b93576000612c6d612c6687600081518110611b6257634e487b7160e01b600052603260045260246000fd5b8486613565565b8351909150612c7c8286614d83565b1415612cdf578d80519060200120612cae87600181518110611b6257634e487b7160e01b600052603260045260246000fd5b805190602001201415612ccd57600199505050505050505050506114e8565b600099505050505050505050506114e8565b80612cf657600099505050505050505050506114e8565b612d008185614d83565b9350612d2686600181518110612c1157634e487b7160e01b600052603260045260246000fd5b9450612d2f9050565b80612d3981614fb6565b915050612a9d565b5060009c9b505050505050505050505050565b6010546040516320a9cea560e11b81526000918291829182916001600160a01b03909116906341539d4a90612d8d908990600401613f49565b60a06040518083038186803b158015612da557600080fd5b505afa158015612db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddd9190613d43565b5093505092509250612e33828b612df49190614f04565b84878d8d8d8d604051602001612e0d9493929190613f7f565b60405160208183030381529060405280519060200120613697909392919063ffffffff16565b612e4f5760405162461bcd60e51b81526004016108c59061489b565b9998505050505050505050565b6017805460018082019092557fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c150180546001600160a01b0319166001600160a01b0384169081179091556000908152601860205260408120805460ff19168317905560198054909190612ed0908490614d83565b9091555050601954600511610ce15760006018600060176005601954612ef69190614f04565b81548110612f1457634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905550565b60009081526001919091016020526040902054151590565b60006001600160e01b03198216635a05180f60e01b14806108045750610804826137ab565b612f938383836137d0565b612f9b610d3f565b1561097d5760405162461bcd60e51b81526004016108c5906140e9565b60606000612fc7836002614ee5565b612fd2906002614d83565b6001600160401b03811115612ff757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613021576020820181803683370190505b509050600360fc1b8160008151811061304a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061308757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006130ab846002614ee5565b6130b6906001614d83565b90505b600181111561314a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106130f857634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061311c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361314381614f6a565b90506130b9565b508315610f415760405162461bcd60e51b81526004016108c59061406f565b3b151590565b6020810151805160009190821a9060c082101561319157600092505050610807565b5060019392505050565b6000806000905060006131b184602001516132dc565b84602001516131c09190614d83565b90506000846000015185602001516131d89190614d83565b90505b8082101561322a576131ec82613233565b6131f69083614d83565b9150808211156132185760405162461bcd60e51b81526004016108c59061454f565b8261322281614fb6565b9350506131db565b50909392505050565b80516000908190811a608081101561324e57600191506132d5565b60b881101561327457613262608082614f04565b61326d906001614d83565b91506132d5565b60c08110156132a15760b78103600185019450806020036101000a855104600182018101935050506132d5565b60f88110156132b55761326260c082614f04565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8051600090811a60808110156132f6576000915050610807565b60b8811080613311575060c08110801590613311575060f881105b15613320576001915050610807565b60c081101561335557613335600160b8614f1b565b6133429060ff1682614f04565b61334d906001614d83565b915050610807565b613335600160f8614f1b565b50919050565b806133715761097d565b602081106133a95782518252613388602084614d83565b9250613395602083614d83565b91506133a2602082614f04565b9050613371565b600060016133b8836020614f04565b6133c490610100614e17565b6133ce9190614f04565b84518451821691191617835250505050565b60006133ed600284614fd1565b1561343557601082613400600286614d9b565b8151811061341e57634e487b7160e01b600052603260045260246000fd5b0160200151613430919060f81c614fe5565b613473565b601082613443600286614d9b565b8151811061346157634e487b7160e01b600052603260045260246000fd5b0160200151613473919060f81c614daf565b60f81b9392505050565b6060600082600001516001600160401b038111156134ab57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156134d5576020820181803683370190505b50905060008160200190506132d58460200151828660000151613367565b6000806135038360200151613233565b835190915081146135265760405162461bcd60e51b81526004016108c590614b29565b82516021146135475760405162461bcd60e51b81526004016108c5906140a4565b6000808460200151600161355b9190614d83565b5195945050505050565b600080806135728661280d565b9050600081516001600160401b0381111561359d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156135c7576020820181803683370190505b509050845b82516135d89087614d83565b81101561366757600087828151811061360157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319169050808361361e8985614f04565b8151811061363c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535050808061365f90614fb6565b9150506135cc565b50808051906020012082805190602001201415613687578151925061368c565b600092505b509095945050505050565b6000602082516136a79190614fd1565b156136c45760405162461bcd60e51b81526004016108c59061483e565b6000602083516136d49190614d9b565b90506136e1816002614e17565b85106136ff5760405162461bcd60e51b81526004016108c59061486c565b60008660205b8551811161379d5785810151925061371e600289614fd1565b613752578183604051602001613735929190613e97565b60405160208183030381529060405280519060200120915061377e565b8282604051602001613765929190613e97565b6040516020818303038152906040528051906020012091505b613789600289614d9b565b9750613796602082614d83565b9050613705565b509094149695505050505050565b60006001600160e01b03198216637965db0b60e01b1480610804575061080482613859565b6137db83838361097d565b6001600160a01b0383166137f7576137f281613872565b61381a565b816001600160a01b0316836001600160a01b03161461381a5761381a83826138b6565b6001600160a01b0382166138365761383181613953565b61097d565b826001600160a01b0316826001600160a01b03161461097d5761097d8282613a2c565b6001600160e01b031981166301ffc9a760e01b14919050565b600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b600060016138c384610dfd565b6138cd9190614f04565b600083815260096020526040902054909150808214613920576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061396590600190614f04565b6000838152600b6020526040812054600a805493945090928490811061399b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600a83815481106139ca57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480613a1057634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613a3783610dfd565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b604051806040016040528060008152602001600081525090565b600082601f830112613a9a578081fd5b8135613aad613aa882614d5c565b614d33565b818152846020838601011115613ac1578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613aec578081fd5b8135610f4181615049565b60008060408385031215613b09578081fd5b8235613b1481615049565b91506020830135613b2481615049565b809150509250929050565b600080600060608486031215613b43578081fd5b8335613b4e81615049565b92506020840135613b5e81615049565b929592945050506040919091013590565b60008060008060808587031215613b84578081fd5b8435613b8f81615049565b93506020850135613b9f81615049565b92506040850135915060608501356001600160401b03811115613bc0578182fd5b613bcc87828801613a8a565b91505092959194509250565b60008060408385031215613bea578182fd5b8235613bf581615049565b915060208301358015158114613b24578182fd5b60008060408385031215613c1b578182fd5b8235613c2681615049565b946020939093013593505050565b60006020808385031215613c46578182fd5b82516001600160401b0380821115613c5c578384fd5b818501915085601f830112613c6f578384fd5b815181811115613c8157613c81615033565b8381029150613c91848301614d33565b8181528481019084860184860187018a1015613cab578788fd5b8795505b83861015613cd95780519450613cc485615049565b84835260019590950194918601918601613caf565b5098975050505050505050565b600060208284031215613cf7578081fd5b5035919050565b60008060408385031215613d10578182fd5b823591506020830135613b2481615049565b60008060408385031215613d34578081fd5b50508035926020909101359150565b600080600080600060a08688031215613d5a578283fd5b855194506020860151935060408601519250606086015191506080860151613d8181615049565b809150509295509295909350565b600060208284031215613da0578081fd5b8135610f418161505e565b600060208284031215613dbc578081fd5b8151610f418161505e565b600060208284031215613dd8578081fd5b81356001600160401b03811115613ded578182fd5b6114e884828501613a8a565b600060208284031215613e0a578081fd5b81516001600160401b03811115613e1f578182fd5b8201601f81018413613e2f578182fd5b8051613e3d613aa882614d5c565b818152856020838501011115613e51578384fd5b613e62826020830160208601614f3e565b95945050505050565b60008151808452613e83816020860160208601614f3e565b601f01601f19169290920160200192915050565b918252602082015260400190565b60008351613eb7818460208801614f3e565b835190830190613ecb818360208801614f3e565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351613f0c816017850160208801614f3e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613f3d816028840160208801614f3e565b01602801949350505050565b90815260200190565b60008482528351613f6a816020850160208801614f3e565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613fe190830184613e6b565b9695505050505050565b6001600160a01b03831681526040602082018190526000906114e890830184613e6b565b901515815260200190565b600060208252610f416020830184613e6b565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526025908201527f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60408201526408a9c8ea8960db1b606082015260800190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252818101527f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b6020808252602a908201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526023908201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260408201526227a7a360e91b606082015260800190565b60208082526024908201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560408201526314d4d15160e21b606082015260800190565b6020808252603e908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d75737420686176652070617573657220726f6c6520746f2070617573650000606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252601f908201527f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526028908201527f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60408201526709a92a69a82a886960c31b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602c908201527f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60408201526b08ea890be9a92a69a82a886960a31b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b60208082526023908201527f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260408201526245535360e81b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526008908201526723221d369d1a181960c11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601c908201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604082015260600190565b60208082526008908201526746443a6d3a34303360c01b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601f908201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601e908201527f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000604082015260600190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526027908201527f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526025908201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604082015264155393915360da1b606082015260800190565b6020808252603d908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d7573742068617665206d696e74657220726f6c6520746f206d696e74000000606082015260800190565b6020808252602e908201527f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60408201526d08a9c8ea890be9a92a69a82a886960931b606082015260800190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201526f1b995c881b9bdc88185c1c1c9bdd995960821b606082015260800190565b60208082526018908201527f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000604082015260600190565b602080825260409082018190527f4552433732315072657365744d696e7465725061757365724175746f49643a20908201527f6d75737420686176652070617573657220726f6c6520746f20756e7061757365606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b60208082526027908201527f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526021908201527f524c505265616465723a20494e56414c49445f414444524553535f4c454e47546040820152600960fb1b606082015260800190565b6040518181016001600160401b0381118282101715614d5457614d54615033565b604052919050565b60006001600160401b03821115614d7557614d75615033565b50601f01601f191660200190565b60008219821115614d9657614d96615007565b500190565b600082614daa57614daa61501d565b500490565b600060ff831680614dc257614dc261501d565b8060ff84160491505092915050565b80825b6001808611614de35750614e0e565b818704821115614df557614df5615007565b80861615614e0257918102915b9490941c938002614dd4565b94509492505050565b6000610f416000198484600082614e3057506001610f41565b81614e3d57506000610f41565b8160018114614e535760028114614e5d57614e8a565b6001915050610f41565b60ff841115614e6e57614e6e615007565b6001841b915084821115614e8457614e84615007565b50610f41565b5060208310610133831016604e8410600b8410161715614ebd575081810a83811115614eb857614eb8615007565b610f41565b614eca8484846001614dd1565b808604821115614edc57614edc615007565b02949350505050565b6000816000190483118215151615614eff57614eff615007565b500290565b600082821015614f1657614f16615007565b500390565b600060ff821660ff841680821015614f3557614f35615007565b90039392505050565b60005b83811015614f59578181015183820152602001614f41565b8381111561113f5750506000910152565b600081614f7957614f79615007565b506000190190565b600281046001821680614f9557607f821691505b6020821081141561336157634e487b7160e01b600052602260045260246000fd5b6000600019821415614fca57614fca615007565b5060010190565b600082614fe057614fe061501d565b500690565b600060ff831680614ff857614ff861501d565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ce157600080fd5b6001600160e01b031981168114610ce157600080fdfea2646970667358221220c3e8276d1d97f619c9d0b79cd9da9d048d796f8ea6ab58d2bf6bd7d74cda5fcc64736f6c63430008000033697066733a2f2f62616679626569636f65366f6532796f65756263706c6a717165633376756c346e346c377a7a37616467726a6567696a6c77336e647833347663652f",
  "deployedBytecode": "0x6080604052600436106102975760003560e01c8063715018a61161015a578063b88d4fde116100c1578063d547741f1161007a578063d547741f1461074f578063de9b771f1461076f578063e63ab1e914610784578063e985e9c514610799578063f2fde38b146107b9578063f953cec7146107d95761029e565b8063b88d4fde146106b0578063bf583903146106d0578063c0857ba0146106e5578063c87b56dd146106fa578063ca15c8731461071a578063d53913931461073a5761029e565b806395d89b411161011357806395d89b4114610611578063972c492814610626578063a217fddf1461063b578063a22cb46514610650578063a8b5e6ea14610670578063aea4e49e146106905761029e565b8063715018a6146105725780638456cb59146105875780638da5cb5b1461059c5780639010d07c146105b157806391b7f5ed146105d157806391d14854146105f15761029e565b806336568abe116101fe5780635c975abb116101b75780635c975abb146104c8578063607f2d42146104dd5780636352211e146104fd5780636817c76c1461051d5780636a6278421461053257806370a08231146105525761029e565b806336568abe1461041e5780633ccfd60b1461043e5780633f4ba83a1461045357806342842e0e1461046857806342966c68146104885780634f6ccce7146104a85761029e565b806318160ddd1161025057806318160ddd1461038157806323b872dd14610396578063248a9ca3146103b657806326092b83146103d65780632f2ff15d146103de5780632f745c59146103fe5761029e565b806301ffc9a7146102a357806306fdde03146102d9578063081812fc146102fb578063095ea7b3146103285780630e387de61461034a578063142bc2ae1461036c5761029e565b3661029e57005b600080fd5b3480156102af57600080fd5b506102c36102be366004613d8f565b6107f9565b6040516102d0919061400f565b60405180910390f35b3480156102e557600080fd5b506102ee61080c565b6040516102d0919061401a565b34801561030757600080fd5b5061031b610316366004613ce6565b61089e565b6040516102d09190613f9a565b34801561033457600080fd5b50610348610343366004613c09565b6108ea565b005b34801561035657600080fd5b5061035f610982565b6040516102d09190613f49565b34801561037857600080fd5b506102ee6109a6565b34801561038d57600080fd5b5061035f610a34565b3480156103a257600080fd5b506103486103b1366004613b2f565b610a3a565b3480156103c257600080fd5b5061035f6103d1366004613ce6565b610a72565b610348610a87565b3480156103ea57600080fd5b506103486103f9366004613cfe565b610b3b565b34801561040a57600080fd5b5061035f610419366004613c09565b610b5d565b34801561042a57600080fd5b50610348610439366004613cfe565b610bb2565b34801561044a57600080fd5b50610348610bd4565b34801561045f57600080fd5b50610348610c46565b34801561047457600080fd5b50610348610483366004613b2f565b610c96565b34801561049457600080fd5b506103486104a3366004613ce6565b610cb1565b3480156104b457600080fd5b5061035f6104c3366004613ce6565b610ce4565b3480156104d457600080fd5b506102c3610d3f565b3480156104e957600080fd5b506102c36104f8366004613ce6565b610d48565b34801561050957600080fd5b5061031b610518366004613ce6565b610d5d565b34801561052957600080fd5b5061035f610d92565b34801561053e57600080fd5b5061034861054d366004613adb565b610d98565b34801561055e57600080fd5b5061035f61056d366004613adb565b610dfd565b34801561057e57600080fd5b50610348610e41565b34801561059357600080fd5b50610348610eca565b3480156105a857600080fd5b5061031b610f1a565b3480156105bd57600080fd5b5061031b6105cc366004613d22565b610f29565b3480156105dd57600080fd5b506103486105ec366004613ce6565b610f48565b3480156105fd57600080fd5b506102c361060c366004613cfe565b610f8c565b34801561061d57600080fd5b506102ee610fb5565b34801561063257600080fd5b5061031b610fc4565b34801561064757600080fd5b5061035f610fd3565b34801561065c57600080fd5b5061034861066b366004613bd8565b610fd8565b34801561067c57600080fd5b506102c361068b366004613adb565b6110a6565b34801561069c57600080fd5b506103486106ab366004613adb565b6110bb565b3480156106bc57600080fd5b506103486106cb366004613b6f565b611106565b3480156106dc57600080fd5b5061035f611145565b3480156106f157600080fd5b5061031b61114b565b34801561070657600080fd5b506102ee610715366004613ce6565b61115a565b34801561072657600080fd5b5061035f610735366004613ce6565b6111dc565b34801561074657600080fd5b5061035f6111f3565b34801561075b57600080fd5b5061034861076a366004613cfe565b611217565b34801561077b57600080fd5b5061031b611221565b34801561079057600080fd5b5061035f611230565b3480156107a557600080fd5b506102c36107b4366004613af7565b611254565b3480156107c557600080fd5b506103486107d4366004613adb565b611282565b3480156107e557600080fd5b506103486107f4366004613dc7565b611343565b6000610804826113b7565b90505b919050565b60606002805461081b90614f81565b80601f016020809104026020016040519081016040528092919081815260200182805461084790614f81565b80156108945780601f1061086957610100808354040283529160200191610894565b820191906000526020600020905b81548152906001019060200180831161087757829003601f168201915b5050505050905090565b60006108a9826113dc565b6108ce5760405162461bcd60e51b81526004016108c590614703565b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006108f582610d5d565b9050806001600160a01b0316836001600160a01b031614156109295760405162461bcd60e51b81526004016108c5906148f4565b806001600160a01b031661093b6113f9565b6001600160a01b031614806109575750610957816107b46113f9565b6109735760405162461bcd60e51b81526004016108c59061459b565b61097d83836113fd565b505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b601680546109b390614f81565b80601f01602080910402602001604051908101604052809291908181526020018280546109df90614f81565b8015610a2c5780601f10610a0157610100808354040283529160200191610a2c565b820191906000526020600020905b815481529060010190602001808311610a0f57829003601f168201915b505050505081565b600a5490565b610a4b610a456113f9565b8261146b565b610a675760405162461bcd60e51b81526004016108c59061496c565b61097d8383836114f0565b60009081526020819052604090206001015490565b3360009081526018602052604090205460ff16610ab65760405162461bcd60e51b81526004016108c5906148d2565b6014543414610ad75760405162461bcd60e51b81526004016108c59061474f565b336000818152601860205260409020805460ff19169055610af790610d98565b600160156000828254610b0a9190614f04565b9091555050601554604051610b3991610b2591602001613f49565b60405160208183030381529060405261161d565b565b610b458282611688565b600082815260016020526040902061097d90826113a2565b6000610b6883610dfd565b8210610b865760405162461bcd60e51b81526004016108c590614197565b506001600160a01b03821660009081526008602090815260408083208484529091529020545b92915050565b610bbc82826116ac565b600082815260016020526040902061097d90826116ee565b610bdc6113f9565b6001600160a01b0316610bed610f1a565b6001600160a01b031614610c135760405162461bcd60e51b81526004016108c590614771565b6040514790339082156108fc029083906000818181858888f19350505050158015610c42573d6000803e3d6000fd5b5050565b610c727f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61060c6113f9565b610c8e5760405162461bcd60e51b81526004016108c590614bfe565b610b39611703565b61097d83838360405180602001604052806000815250611106565b610cbc610a456113f9565b610cd85760405162461bcd60e51b81526004016108c590614b77565b610ce181611771565b50565b6000610cee610a34565b8210610d0c5760405162461bcd60e51b81526004016108c5906149f4565b600a8281548110610d2d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600c5460ff1690565b60126020526000908152604090205460ff1681565b6000818152600460205260408120546001600160a01b0316806108045760405162461bcd60e51b81526004016108c590614642565b60145481565b610dc47f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661060c6113f9565b610de05760405162461bcd60e51b81526004016108c590614acc565b610df381610dee600d611818565b61181c565b610ce1600d6118fb565b60006001600160a01b038216610e255760405162461bcd60e51b81526004016108c5906145f8565b506001600160a01b031660009081526005602052604090205490565b610e496113f9565b6001600160a01b0316610e5a610f1a565b6001600160a01b031614610e805760405162461bcd60e51b81526004016108c590614771565b6013546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3601380546001600160a01b0319169055565b610ef67f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61060c6113f9565b610f125760405162461bcd60e51b81526004016108c590614382565b610b39611904565b6013546001600160a01b031690565b6000828152600160205260408120610f41908361195f565b9392505050565b610f506113f9565b6001600160a01b0316610f61610f1a565b6001600160a01b031614610f875760405162461bcd60e51b81526004016108c590614771565b601455565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606003805461081b90614f81565b6011546001600160a01b031681565b600081565b610fe06113f9565b6001600160a01b0316826001600160a01b031614156110115760405162461bcd60e51b81526004016108c590614423565b806007600061101e6113f9565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556110626113f9565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161109a919061400f565b60405180910390a35050565b60186020526000908152604090205460ff1681565b6011546001600160a01b0316156110e45760405162461bcd60e51b81526004016108c5906141e2565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6111176111116113f9565b8361146b565b6111335760405162461bcd60e51b81526004016108c59061496c565b61113f8484848461196b565b50505050565b60155481565b6010546001600160a01b031681565b6060611165826113dc565b6111815760405162461bcd60e51b81526004016108c5906147ef565b600061118b61199e565b905060008151116111ab5760405180602001604052806000815250610f41565b806111b5846119ad565b6040516020016111c6929190613ea5565b6040516020818303038152906040529392505050565b600081815260016020526040812061080490611ac7565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610bbc8282611ad2565b600f546001600160a01b031681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61128a6113f9565b6001600160a01b031661129b610f1a565b6001600160a01b0316146112c15760405162461bcd60e51b81526004016108c590614771565b6001600160a01b0381166112e75760405162461bcd60e51b81526004016108c59061427e565b6013546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3601380546001600160a01b0319166001600160a01b0392909216919091179055565b61134b6113f9565b6001600160a01b031661135c610f1a565b6001600160a01b0316146113825760405162461bcd60e51b81526004016108c590614771565b600061138d82611af1565b9050610c4281611f9f565b610c428282612026565b6000610f41836001600160a01b0384166120ab565b60006001600160e01b0319821663780e9d6360e01b14806108045750610804826120f5565b6000908152600460205260409020546001600160a01b0316151590565b3390565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061143282610d5d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611476826113dc565b6114925760405162461bcd60e51b81526004016108c590614491565b600061149d83610d5d565b9050806001600160a01b0316846001600160a01b031614806114d85750836001600160a01b03166114cd8461089e565b6001600160a01b0316145b806114e857506114e88185611254565b949350505050565b826001600160a01b031661150382610d5d565b6001600160a01b0316146115295760405162461bcd60e51b81526004016108c5906147a6565b6001600160a01b03821661154f5760405162461bcd60e51b81526004016108c5906143df565b61155a838383612135565b6115656000826113fd565b6001600160a01b038316600090815260056020526040812080546001929061158e908490614f04565b90915550506001600160a01b03821660009081526005602052604081208054600192906115bc908490614d83565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600f5460115460405163b472047760e01b81526001600160a01b039283169263b472047792611653929116908590600401613feb565b600060405180830381600087803b15801561166d57600080fd5b505af1158015611681573d6000803e3d6000fd5b5050505050565b61169182610a72565b6116a28161169d6113f9565b612140565b61097d8383612026565b6116b46113f9565b6001600160a01b0316816001600160a01b0316146116e45760405162461bcd60e51b81526004016108c590614c5c565b610c4282826121a4565b6000610f41836001600160a01b038416612227565b61170b610d3f565b6117275760405162461bcd60e51b81526004016108c590614134565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61175a6113f9565b6040516117679190613f9a565b60405180910390a1565b600061177c82610d5d565b905061178a81600084612135565b6117956000836113fd565b6001600160a01b03811660009081526005602052604081208054600192906117be908490614f04565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b5490565b6001600160a01b0382166118425760405162461bcd60e51b81526004016108c5906146ce565b61184b816113dc565b156118685760405162461bcd60e51b81526004016108c5906142c4565b61187460008383612135565b6001600160a01b038216600090815260056020526040812080546001929061189d908490614d83565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b61190c610d3f565b156119295760405162461bcd60e51b81526004016108c590614525565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861175a6113f9565b6000610f41838361233e565b6119768484846114f0565b61198284848484612397565b61113f5760405162461bcd60e51b81526004016108c59061422c565b6060600e805461081b90614f81565b6060816119d257506040805180820190915260018152600360fc1b6020820152610807565b8160005b81156119fc57806119e681614fb6565b91506119f59050600a83614d9b565b91506119d6565b6000816001600160401b03811115611a2457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a4e576020820181803683370190505b5090505b84156114e857611a63600183614f04565b9150611a70600a86614fd1565b611a7b906030614d83565b60f81b818381518110611a9e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611ac0600a86614d9b565b9450611a52565b600061080482611818565b611adb82610a72565b611ae78161169d6113f9565b61097d83836121a4565b60606000611b06611b01846124b2565b6124f8565b90506000611b3b82600281518110611b2e57634e487b7160e01b600052603260045260246000fd5b6020026020010151612663565b611b74611b6f84600881518110611b6257634e487b7160e01b600052603260045260246000fd5b602002602001015161273d565b61280d565b611b9884600981518110611b2e57634e487b7160e01b600052603260045260246000fd5b604051602001611baa93929190613f52565b60408051601f1981840301815291815281516020928301206000818152601290935291205490915060ff1615611bf25760405162461bcd60e51b81526004016108c59061433e565b6000818152601260205260408120805460ff191660011790558251611c3f90611b0190611c3a9086906006908110611b6257634e487b7160e01b600052603260045260246000fd5b6124b2565b90506000611c7482600381518110611c6757634e487b7160e01b600052603260045260246000fd5b60200260200101516124f8565b611c9885600981518110611b2e57634e487b7160e01b600052603260045260246000fd5b81518110611cb657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000611ccb826124f8565b9050611cfe81600081518110611cf157634e487b7160e01b600052603260045260246000fd5b6020026020010151612a02565b6011546001600160a01b03908116911614611d2b5760405162461bcd60e51b81526004016108c590614a87565b611dc3611d5286600681518110611b6257634e487b7160e01b600052603260045260246000fd5b611d7687600881518110611b6257634e487b7160e01b600052603260045260246000fd5b611d9a88600781518110611b6257634e487b7160e01b600052603260045260246000fd5b611dbe89600581518110611b2e57634e487b7160e01b600052603260045260246000fd5b612a53565b611ddf5760405162461bcd60e51b81526004016108c5906142fb565b611ec5611e0686600281518110611b2e57634e487b7160e01b600052603260045260246000fd5b611e2a87600381518110611b2e57634e487b7160e01b600052603260045260246000fd5b611e4e88600481518110611b2e57634e487b7160e01b600052603260045260246000fd5b60001b611e7589600581518110611b2e57634e487b7160e01b600052603260045260246000fd5b60001b611e9c8a600081518110611b2e57634e487b7160e01b600052603260045260246000fd5b611ec08b600181518110611b6257634e487b7160e01b600052603260045260246000fd5b612d54565b506000611eec82600181518110611c6757634e487b7160e01b600052603260045260246000fd5b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b611f3682600081518110611b2e57634e487b7160e01b600052603260045260246000fd5b14611f535760405162461bcd60e51b81526004016108c590614935565b6000611f7983600281518110611b6257634e487b7160e01b600052603260045260246000fd5b9050600081806020019051810190611f919190613df9565b9a9950505050505050505050565b60408051600580825260c082019092526000916020820160a08036833701905050905081806020019051810190611fd69190613c34565b905060005b600581101561097d5761201482828151811061200757634e487b7160e01b600052603260045260246000fd5b6020026020010151612e5c565b8061201e81614fb6565b915050611fdb565b6120308282610f8c565b610c42576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556120676113f9565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006120b78383612f4b565b6120ed57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bac565b506000610bac565b60006001600160e01b031982166380ac58cd60e01b148061212657506001600160e01b03198216635b5e139f60e01b145b80610804575061080482612f63565b61097d838383612f88565b61214a8282610f8c565b610c4257612162816001600160a01b03166014612fb8565b61216d836020612fb8565b60405160200161217e929190613ed4565b60408051601f198184030181529082905262461bcd60e51b82526108c59160040161401a565b6121ae8282610f8c565b15610c42576000828152602081815260408083206001600160a01b03851684529091529020805460ff191690556121e36113f9565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000818152600183016020526040812054801561233457600061224b600183614f04565b855490915060009061225f90600190614f04565b9050600086600001828154811061228657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106122b757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806122f857634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610bac565b6000915050610bac565b815460009082106123615760405162461bcd60e51b81526004016108c59061402d565b82600001828154811061238457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006123ab846001600160a01b0316613169565b156124a757836001600160a01b031663150b7a026123c76113f9565b8786866040518563ffffffff1660e01b81526004016123e99493929190613fae565b602060405180830381600087803b15801561240357600080fd5b505af1925050508015612433575060408051601f3d908101601f1916820190925261243091810190613dab565b60015b61248d573d808015612461576040519150601f19603f3d011682016040523d82523d6000602084013e612466565b606091505b5080516124855760405162461bcd60e51b81526004016108c59061422c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114e8565b506001949350505050565b6124ba613a70565b60008251116124db5760405162461bcd60e51b81526004016108c59061445a565b506040805180820190915281518152602082810190820152919050565b60606125038261316f565b61251f5760405162461bcd60e51b81526004016108c590614bc7565b600061252a8361319b565b90506000816001600160401b0381111561255457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561258d57816020015b61257a613a70565b8152602001906001900390816125725790505b509050600061259f8560200151613233565b855190915081146125c25760405162461bcd60e51b81526004016108c590614a40565b60006125d186602001516132dc565b86602001516125e09190614d83565b90506000805b85811015612657576125f783613233565b915060405180604001604052808381526020018481525085828151811061262e57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526126438284614d83565b92508061264f81614fb6565b9150506125e6565b50929695505050505050565b600061266e8261316f565b1561268b5760405162461bcd60e51b81526004016108c590614162565b8151602110156126ad5760405162461bcd60e51b81526004016108c5906149bd565b60006126bc8360200151613233565b835190915081146126df5760405162461bcd60e51b81526004016108c590614cab565b60006126ee84602001516132dc565b905060008185600001516127029190614f04565b90506000808387602001516127179190614d83565b905080519150602083101561273357826020036101000a820491505b5095945050505050565b6060600061274e8360200151613233565b835190915081146127715760405162461bcd60e51b81526004016108c5906144dd565b600061278084602001516132dc565b905060008185600001516127949190614f04565b90506000816001600160401b038111156127be57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156127e8576020820181803683370190505b50905060008160200190506127338488602001516128069190614d83565b8285613367565b60408051602081019091526000815281516060919015610804576000806128356000866133e0565b60f81c9050600181148061284c57508060ff166003145b1561290f576001855160026128619190614ee5565b61286b9190614f04565b6001600160401b0381111561289057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156128ba576020820181803683370190505b50925060006128ca6001876133e0565b905080846000815181106128ee57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506001925050612980565b60028551600261291f9190614ee5565b6129299190614f04565b6001600160401b0381111561294e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612978576020820181803683370190505b509250600091505b60ff82165b83518110156129f8576129af61299e60ff851683614f04565b6129a9906002614d83565b876133e0565b8482815181106129cf57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806129f081614fb6565b915050612985565b5050509050919050565b6000612a0d8261316f565b15612a2a5760405162461bcd60e51b81526004016108c59061468b565b8151601514612a4b5760405162461bcd60e51b81526004016108c590614cf2565b506014015190565b600080612a5f846124b2565b90506000612a6c826124f8565b905060608085600080612a7e8b61280d565b9050805160001415612a9a5760009750505050505050506114e8565b60005b8651811015612d41578151831115612ac0576000985050505050505050506114e8565b612af0878281518110612ae357634e487b7160e01b600052603260045260246000fd5b602002602001015161347d565b955085805190602001208414612b11576000985050505050505050506114e8565b612b34878281518110611c6757634e487b7160e01b600052603260045260246000fd5b9450845160111415612c33578151831415612ba4578c80519060200120612b7586601081518110611b6257634e487b7160e01b600052603260045260246000fd5b805190602001201415612b93576001985050505050505050506114e8565b6000985050505050505050506114e8565b6000828481518110612bc657634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506010811115612beb57600099505050505050505050506114e8565b612c1e868260ff1681518110612c1157634e487b7160e01b600052603260045260246000fd5b60200260200101516134f3565b9450612c2b600185614d83565b935050612d2f565b845160021415612b93576000612c6d612c6687600081518110611b6257634e487b7160e01b600052603260045260246000fd5b8486613565565b8351909150612c7c8286614d83565b1415612cdf578d80519060200120612cae87600181518110611b6257634e487b7160e01b600052603260045260246000fd5b805190602001201415612ccd57600199505050505050505050506114e8565b600099505050505050505050506114e8565b80612cf657600099505050505050505050506114e8565b612d008185614d83565b9350612d2686600181518110612c1157634e487b7160e01b600052603260045260246000fd5b9450612d2f9050565b80612d3981614fb6565b915050612a9d565b5060009c9b505050505050505050505050565b6010546040516320a9cea560e11b81526000918291829182916001600160a01b03909116906341539d4a90612d8d908990600401613f49565b60a06040518083038186803b158015612da557600080fd5b505afa158015612db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddd9190613d43565b5093505092509250612e33828b612df49190614f04565b84878d8d8d8d604051602001612e0d9493929190613f7f565b60405160208183030381529060405280519060200120613697909392919063ffffffff16565b612e4f5760405162461bcd60e51b81526004016108c59061489b565b9998505050505050505050565b6017805460018082019092557fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c150180546001600160a01b0319166001600160a01b0384169081179091556000908152601860205260408120805460ff19168317905560198054909190612ed0908490614d83565b9091555050601954600511610ce15760006018600060176005601954612ef69190614f04565b81548110612f1457634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905550565b60009081526001919091016020526040902054151590565b60006001600160e01b03198216635a05180f60e01b14806108045750610804826137ab565b612f938383836137d0565b612f9b610d3f565b1561097d5760405162461bcd60e51b81526004016108c5906140e9565b60606000612fc7836002614ee5565b612fd2906002614d83565b6001600160401b03811115612ff757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613021576020820181803683370190505b509050600360fc1b8160008151811061304a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061308757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006130ab846002614ee5565b6130b6906001614d83565b90505b600181111561314a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106130f857634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061311c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361314381614f6a565b90506130b9565b508315610f415760405162461bcd60e51b81526004016108c59061406f565b3b151590565b6020810151805160009190821a9060c082101561319157600092505050610807565b5060019392505050565b6000806000905060006131b184602001516132dc565b84602001516131c09190614d83565b90506000846000015185602001516131d89190614d83565b90505b8082101561322a576131ec82613233565b6131f69083614d83565b9150808211156132185760405162461bcd60e51b81526004016108c59061454f565b8261322281614fb6565b9350506131db565b50909392505050565b80516000908190811a608081101561324e57600191506132d5565b60b881101561327457613262608082614f04565b61326d906001614d83565b91506132d5565b60c08110156132a15760b78103600185019450806020036101000a855104600182018101935050506132d5565b60f88110156132b55761326260c082614f04565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8051600090811a60808110156132f6576000915050610807565b60b8811080613311575060c08110801590613311575060f881105b15613320576001915050610807565b60c081101561335557613335600160b8614f1b565b6133429060ff1682614f04565b61334d906001614d83565b915050610807565b613335600160f8614f1b565b50919050565b806133715761097d565b602081106133a95782518252613388602084614d83565b9250613395602083614d83565b91506133a2602082614f04565b9050613371565b600060016133b8836020614f04565b6133c490610100614e17565b6133ce9190614f04565b84518451821691191617835250505050565b60006133ed600284614fd1565b1561343557601082613400600286614d9b565b8151811061341e57634e487b7160e01b600052603260045260246000fd5b0160200151613430919060f81c614fe5565b613473565b601082613443600286614d9b565b8151811061346157634e487b7160e01b600052603260045260246000fd5b0160200151613473919060f81c614daf565b60f81b9392505050565b6060600082600001516001600160401b038111156134ab57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156134d5576020820181803683370190505b50905060008160200190506132d58460200151828660000151613367565b6000806135038360200151613233565b835190915081146135265760405162461bcd60e51b81526004016108c590614b29565b82516021146135475760405162461bcd60e51b81526004016108c5906140a4565b6000808460200151600161355b9190614d83565b5195945050505050565b600080806135728661280d565b9050600081516001600160401b0381111561359d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156135c7576020820181803683370190505b509050845b82516135d89087614d83565b81101561366757600087828151811061360157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319169050808361361e8985614f04565b8151811061363c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535050808061365f90614fb6565b9150506135cc565b50808051906020012082805190602001201415613687578151925061368c565b600092505b509095945050505050565b6000602082516136a79190614fd1565b156136c45760405162461bcd60e51b81526004016108c59061483e565b6000602083516136d49190614d9b565b90506136e1816002614e17565b85106136ff5760405162461bcd60e51b81526004016108c59061486c565b60008660205b8551811161379d5785810151925061371e600289614fd1565b613752578183604051602001613735929190613e97565b60405160208183030381529060405280519060200120915061377e565b8282604051602001613765929190613e97565b6040516020818303038152906040528051906020012091505b613789600289614d9b565b9750613796602082614d83565b9050613705565b509094149695505050505050565b60006001600160e01b03198216637965db0b60e01b1480610804575061080482613859565b6137db83838361097d565b6001600160a01b0383166137f7576137f281613872565b61381a565b816001600160a01b0316836001600160a01b03161461381a5761381a83826138b6565b6001600160a01b0382166138365761383181613953565b61097d565b826001600160a01b0316826001600160a01b03161461097d5761097d8282613a2c565b6001600160e01b031981166301ffc9a760e01b14919050565b600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b600060016138c384610dfd565b6138cd9190614f04565b600083815260096020526040902054909150808214613920576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061396590600190614f04565b6000838152600b6020526040812054600a805493945090928490811061399b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600a83815481106139ca57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480613a1057634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613a3783610dfd565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b604051806040016040528060008152602001600081525090565b600082601f830112613a9a578081fd5b8135613aad613aa882614d5c565b614d33565b818152846020838601011115613ac1578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613aec578081fd5b8135610f4181615049565b60008060408385031215613b09578081fd5b8235613b1481615049565b91506020830135613b2481615049565b809150509250929050565b600080600060608486031215613b43578081fd5b8335613b4e81615049565b92506020840135613b5e81615049565b929592945050506040919091013590565b60008060008060808587031215613b84578081fd5b8435613b8f81615049565b93506020850135613b9f81615049565b92506040850135915060608501356001600160401b03811115613bc0578182fd5b613bcc87828801613a8a565b91505092959194509250565b60008060408385031215613bea578182fd5b8235613bf581615049565b915060208301358015158114613b24578182fd5b60008060408385031215613c1b578182fd5b8235613c2681615049565b946020939093013593505050565b60006020808385031215613c46578182fd5b82516001600160401b0380821115613c5c578384fd5b818501915085601f830112613c6f578384fd5b815181811115613c8157613c81615033565b8381029150613c91848301614d33565b8181528481019084860184860187018a1015613cab578788fd5b8795505b83861015613cd95780519450613cc485615049565b84835260019590950194918601918601613caf565b5098975050505050505050565b600060208284031215613cf7578081fd5b5035919050565b60008060408385031215613d10578182fd5b823591506020830135613b2481615049565b60008060408385031215613d34578081fd5b50508035926020909101359150565b600080600080600060a08688031215613d5a578283fd5b855194506020860151935060408601519250606086015191506080860151613d8181615049565b809150509295509295909350565b600060208284031215613da0578081fd5b8135610f418161505e565b600060208284031215613dbc578081fd5b8151610f418161505e565b600060208284031215613dd8578081fd5b81356001600160401b03811115613ded578182fd5b6114e884828501613a8a565b600060208284031215613e0a578081fd5b81516001600160401b03811115613e1f578182fd5b8201601f81018413613e2f578182fd5b8051613e3d613aa882614d5c565b818152856020838501011115613e51578384fd5b613e62826020830160208601614f3e565b95945050505050565b60008151808452613e83816020860160208601614f3e565b601f01601f19169290920160200192915050565b918252602082015260400190565b60008351613eb7818460208801614f3e565b835190830190613ecb818360208801614f3e565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351613f0c816017850160208801614f3e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613f3d816028840160208801614f3e565b01602801949350505050565b90815260200190565b60008482528351613f6a816020850160208801614f3e565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613fe190830184613e6b565b9695505050505050565b6001600160a01b03831681526040602082018190526000906114e890830184613e6b565b901515815260200190565b600060208252610f416020830184613e6b565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526025908201527f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60408201526408a9c8ea8960db1b606082015260800190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252818101527f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b6020808252602a908201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526023908201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260408201526227a7a360e91b606082015260800190565b60208082526024908201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560408201526314d4d15160e21b606082015260800190565b6020808252603e908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d75737420686176652070617573657220726f6c6520746f2070617573650000606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252601f908201527f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526028908201527f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60408201526709a92a69a82a886960c31b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602c908201527f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60408201526b08ea890be9a92a69a82a886960a31b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b60208082526023908201527f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260408201526245535360e81b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526008908201526723221d369d1a181960c11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601c908201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604082015260600190565b60208082526008908201526746443a6d3a34303360c01b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601f908201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601e908201527f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000604082015260600190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526027908201527f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526025908201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604082015264155393915360da1b606082015260800190565b6020808252603d908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d7573742068617665206d696e74657220726f6c6520746f206d696e74000000606082015260800190565b6020808252602e908201527f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60408201526d08a9c8ea890be9a92a69a82a886960931b606082015260800190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201526f1b995c881b9bdc88185c1c1c9bdd995960821b606082015260800190565b60208082526018908201527f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000604082015260600190565b602080825260409082018190527f4552433732315072657365744d696e7465725061757365724175746f49643a20908201527f6d75737420686176652070617573657220726f6c6520746f20756e7061757365606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b60208082526027908201527f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d604082015266092a69a82a886960cb1b606082015260800190565b60208082526021908201527f524c505265616465723a20494e56414c49445f414444524553535f4c454e47546040820152600960fb1b606082015260800190565b6040518181016001600160401b0381118282101715614d5457614d54615033565b604052919050565b60006001600160401b03821115614d7557614d75615033565b50601f01601f191660200190565b60008219821115614d9657614d96615007565b500190565b600082614daa57614daa61501d565b500490565b600060ff831680614dc257614dc261501d565b8060ff84160491505092915050565b80825b6001808611614de35750614e0e565b818704821115614df557614df5615007565b80861615614e0257918102915b9490941c938002614dd4565b94509492505050565b6000610f416000198484600082614e3057506001610f41565b81614e3d57506000610f41565b8160018114614e535760028114614e5d57614e8a565b6001915050610f41565b60ff841115614e6e57614e6e615007565b6001841b915084821115614e8457614e84615007565b50610f41565b5060208310610133831016604e8410600b8410161715614ebd575081810a83811115614eb857614eb8615007565b610f41565b614eca8484846001614dd1565b808604821115614edc57614edc615007565b02949350505050565b6000816000190483118215151615614eff57614eff615007565b500290565b600082821015614f1657614f16615007565b500390565b600060ff821660ff841680821015614f3557614f35615007565b90039392505050565b60005b83811015614f59578181015183820152602001614f41565b8381111561113f5750506000910152565b600081614f7957614f79615007565b506000190190565b600281046001821680614f9557607f821691505b6020821081141561336157634e487b7160e01b600052602260045260246000fd5b6000600019821415614fca57614fca615007565b5060010190565b600082614fe057614fe061501d565b500690565b600060ff831680614ff857614ff861501d565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ce157600080fd5b6001600160e01b031981168114610ce157600080fdfea2646970667358221220c3e8276d1d97f619c9d0b79cd9da9d048d796f8ea6ab58d2bf6bd7d74cda5fcc64736f6c63430008000033",
  "devdoc": {
    "details": "This contract should be deployed to Ethereum mainnet and is the ERC721 contract for your NFT.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address)": {
        "details": "Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "receiveMessage(bytes)": {
        "details": "We use Polygon to make registration and random selection inexpensive, then pass the list of eligible buying accounts to this contract.",
        "params": {
          "inputData": "proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      }
    },
    "title": "NFTStateTransfer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "publicMint()": {
        "notice": "Public mint function for eligible minters"
      },
      "receiveMessage(bytes)": {
        "notice": "Receive list of eligible purchasers from L2"
      },
      "setPrice(uint256)": {
        "notice": "I have a regrettable FOMO ramp in my first project so I want to be able to adjust price as I please"
      }
    },
    "notice": "This is a reference implementation for a fair NFT drop.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 328,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)323_storage)"
      },
      {
        "astId": 669,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4455_storage)"
      },
      {
        "astId": 1661,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1663,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1667,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1671,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1675,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1681,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2632,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2636,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2639,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2643,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 951,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_paused",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3087,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Counter)3563_storage"
      },
      {
        "astId": 3089,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 5525,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "fxRoot",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IFxStateSender)5491"
      },
      {
        "astId": 5528,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(ICheckpointManager)5509"
      },
      {
        "astId": 5530,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 5534,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "processedExits",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 831,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_owner",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 7130,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "mintPrice",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 7134,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "remainingTokens",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 7136,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "latestData",
        "offset": 0,
        "slot": "22",
        "type": "t_bytes_storage"
      },
      {
        "astId": 7139,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "allMinters",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7143,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "approvedMinters",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7145,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "approvedMintersEndIndex",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)5509": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)5491": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4455_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4455_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)323_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)323_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4455_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4454,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4180_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)3563_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3562,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)323_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 320,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 322,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4180_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4175,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4179,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}