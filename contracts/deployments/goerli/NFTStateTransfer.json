{
  "address": "0xAD4E886B924d849656AcB2b2cBDdBC619BEaCdc4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedMinters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "mintWithProof",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc159b649e598b8905c858ecd24ce4b694821f258ac031b7e866e1dbda66907de",
  "receipt": {
    "to": null,
    "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
    "contractAddress": "0xAD4E886B924d849656AcB2b2cBDdBC619BEaCdc4",
    "transactionIndex": 1,
    "gasUsed": "5001479",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000a00000000000000000000000000000000000000000004000000000000001000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000001002400000000000000000000000000000008000000000000000000100000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000001000000000000100002000000020020000000000002000000000000000000000000400000000000000000000000000",
    "blockHash": "0xa97f7be77db5f643ca8c21c0b23514f162b6b27182894c1389b352b79b5db026",
    "transactionHash": "0xc159b649e598b8905c858ecd24ce4b694821f258ac031b7e866e1dbda66907de",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5817389,
        "transactionHash": "0xc159b649e598b8905c858ecd24ce4b694821f258ac031b7e866e1dbda66907de",
        "address": "0xAD4E886B924d849656AcB2b2cBDdBC619BEaCdc4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xa97f7be77db5f643ca8c21c0b23514f162b6b27182894c1389b352b79b5db026"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5817389,
        "transactionHash": "0xc159b649e598b8905c858ecd24ce4b694821f258ac031b7e866e1dbda66907de",
        "address": "0xAD4E886B924d849656AcB2b2cBDdBC619BEaCdc4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xa97f7be77db5f643ca8c21c0b23514f162b6b27182894c1389b352b79b5db026"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5817389,
        "transactionHash": "0xc159b649e598b8905c858ecd24ce4b694821f258ac031b7e866e1dbda66907de",
        "address": "0xAD4E886B924d849656AcB2b2cBDdBC619BEaCdc4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xa97f7be77db5f643ca8c21c0b23514f162b6b27182894c1389b352b79b5db026"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5817389,
        "transactionHash": "0xc159b649e598b8905c858ecd24ce4b694821f258ac031b7e866e1dbda66907de",
        "address": "0xAD4E886B924d849656AcB2b2cBDdBC619BEaCdc4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xa97f7be77db5f643ca8c21c0b23514f162b6b27182894c1389b352b79b5db026"
      }
    ],
    "blockNumber": 5817389,
    "cumulativeGasUsed": "5125539",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"
  ],
  "solcInputHash": "51a4c9d0d1de4b7990533759d6209163",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"mintWithProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract should be deployed to Ethereum mainnet and is the ERC721 contract for your NFT.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address)\":{\"details\":\"Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"mintWithProof(bytes)\":{\"details\":\"We use Polygon to make registration and random selection inexpensive, then allow eligible minters to generate an L2 proof of bytes. The proof is used as a \\\"mint pass\\\" in this function that mints a token if the address has not yet minted. Minting is *expensive* in gas units but users may find this approach preferable to FCFS gas auctions.\",\"params\":{\"inputData\":\"proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"receiveMessage(bytes)\":{\"details\":\"We use Polygon to make registration and random selection inexpensive, then pass the list of eligible buying accounts to this contract.\",\"params\":{\"inputData\":\"proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"}},\"title\":\"NFTStateTransfer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintWithProof(bytes)\":{\"notice\":\"Mint token with L2 proof\"},\"publicMint()\":{\"notice\":\"Public mint function for eligible minters\"},\"receiveMessage(bytes)\":{\"notice\":\"Receive list of eligible purchasers from L2\"},\"setPrice(uint256)\":{\"notice\":\"I have a regrettable FOMO ramp in my first project so I want to be able to adjust price as I please\"}},\"notice\":\"This is a reference implementation for a fair NFT drop.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTStateTransfer/NFTStateTransfer.sol\":\"NFTStateTransfer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"@maticnetwork/fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe8f81ba5ba258c2a3ad5cf4c0bf6263c78e60f320bd0bc150c9de2445958c47b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../extensions/ERC721Enumerable.sol\\\";\\nimport \\\"../extensions/ERC721Burnable.sol\\\";\\nimport \\\"../extensions/ERC721Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC721PresetMinterPauserAutoId is\\n    Context,\\n    AccessControlEnumerable,\\n    ERC721Enumerable,\\n    ERC721Burnable,\\n    ERC721Pausable\\n{\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    Counters.Counter private _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xe8d33b91c7eedd75d2bf76b67c63e0989e8e98ab08641af7026c55db7f853d95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/Libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary Constants {\\n    // How long does an eligible buyer have to purchase\\n    uint256 internal constant WINDOW = 10 minutes;\\n    // How many addresses are eligible to purchase per window\\n    uint256 internal constant WINDOW_PARTICIPANTS = 5;\\n\\n    // How many NFTs in entire drop?\\n    uint256 internal constant MAX_TOKEN_COUNT = 5;\\n}\\n\",\"keccak256\":\"0x0791cab540f2e709cb5f565df193836bf1c1bcc329d1b220ef8236ee4424d1a5\",\"license\":\"AGPL-1.0\"},\"contracts/NFTStateTransfer/NFTStateTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\\\";\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\n\\nimport { Constants } from \\\"../Libraries/Constants.sol\\\";\\n\\n/**\\n * @title NFTStateTransfer\\n * @notice This is a reference implementation for a fair NFT drop.\\n * @dev This contract should be deployed to Ethereum mainnet and is the ERC721 contract for your NFT.\\n */\\n\\ncontract NFTStateTransfer is ERC721PresetMinterPauserAutoId, FxBaseRootTunnel, Ownable {\\n    uint256 public mintPrice = 0.02 ether;\\n    uint256 public remainingTokens = Constants.MAX_TOKEN_COUNT;\\n    bytes public latestData;\\n    address[] internal allMinters;\\n    mapping(address => bool) public approvedMinters;\\n    uint256 internal approvedMintersEndIndex;\\n\\n    mapping(address => bool) internal exhaustedMinters;\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot\\n    )\\n    FxBaseRootTunnel(_checkpointManager, _fxRoot)\\n    ERC721PresetMinterPauserAutoId(\\\"0xEssential FairDrop\\\", \\\"FAIRDROP\\\", \\\"ipfs://bafybeicoe6oe2yoeubcpljqqec3vul4n4l7zz7adgrjegijlw3ndx34vce/\\\")\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    /**\\n    * @notice Receive list of eligible purchasers from L2\\n    * @dev We use Polygon to make registration and random selection inexpensive, then pass the list\\n    * of eligible buying accounts to this contract.\\n    * @param data bytes32 encoded list of eligible addressses.\\n    */\\n    function _processMessageFromChild(bytes memory data) internal override {\\n        latestData = data;\\n        address[5] memory newMinters = abi.decode(data, (address[5]));\\n        for (uint256 index = 0; index < Constants.WINDOW_PARTICIPANTS; index++) {\\n            addEligibleMinter((newMinters[index]));\\n        }\\n    }\\n\\n    function addEligibleMinter(address newMinter) internal {\\n        allMinters.push(newMinter);\\n        approvedMinters[newMinter] = true;\\n        approvedMintersEndIndex += 1;\\n\\n        if(approvedMintersEndIndex > Constants.WINDOW_PARTICIPANTS) {\\n            approvedMinters[allMinters[approvedMintersEndIndex - Constants.WINDOW_PARTICIPANTS]] = false;\\n        }\\n    }\\n\\n    receive() external payable {} // solhint-disable-line no-empty-blocks\\n\\n    /**\\n    * @notice Public mint function for eligible minters\\n    */\\n    function publicMint() public payable {\\n        require(approvedMinters[msg.sender], \\\"FD:m:403\\\");\\n        require(msg.value == mintPrice, \\\"FD:m:402\\\");\\n        approvedMinters[msg.sender] = false;\\n        mint(msg.sender);\\n        remainingTokens -= 1;\\n        _sendMessageToChild(abi.encodePacked(remainingTokens));\\n    }\\n\\n    /**\\n    * @notice I have a regrettable FOMO ramp in my first project\\n    * so I want to be able to adjust price as I please\\n    */\\n    function setPrice(uint256 price) public onlyOwner {\\n        mintPrice = price;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    /**\\n    * @notice Receive list of eligible purchasers from L2\\n    * @dev We use Polygon to make registration and random selection inexpensive, then pass the list\\n    * of eligible buying accounts to this contract.\\n    * @param inputData proof generated for transaction - see\\n    * https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer\\n    */\\n    function receiveMessage(bytes memory inputData) public override onlyOwner {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n     /**\\n    * @notice Mint token with L2 proof\\n    * @dev We use Polygon to make registration and random selection inexpensive, then allow eligible minters\\n    * to generate an L2 proof of bytes. The proof is used as a \\\"mint pass\\\" in this function that mints a token\\n    * if the address has not yet minted. Minting is *expensive* in gas units but users may find this approach\\n    * preferable to FCFS gas auctions.\\n    * @param inputData proof generated for transaction - see\\n    * https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer\\n    */\\n    function mintWithProof(bytes memory inputData) public payable {\\n        require(msg.value == mintPrice, \\\"FD:mWP:402\\\");\\n        require(!exhaustedMinters[msg.sender], \\\"FD:mWP:401\\\");\\n\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        address minter = abi.decode(message, (address));\\n        require(minter == msg.sender, \\\"FD:mWP:401\\\");\\n\\n        mint(msg.sender);\\n        remainingTokens -= 1;\\n        _sendMessageToChild(abi.encodePacked(remainingTokens));\\n\\n        exhaustedMinters[msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xf8fabd2bc7d6192a9a7746c37e169231e6cef15f364b8978a6d840b858fd2140\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405266470de4df82000060145560056015553480156200002157600080fd5b50604051620054e4380380620054e4833981016040819052620000449162000472565b81816040518060400160405280601481526020017f3078457373656e7469616c204661697244726f700000000000000000000000008152506040518060400160405280600881526020016704641495244524f560c41b815250604051806080016040528060438152602001620054a160439139825183908390620000d0906002906020850190620003af565b508051620000e6906003906020840190620003af565b5050600c805460ff191690555080516200010890600e906020840190620003af565b506200011f600062000119620001cc565b620001d0565b6200014e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a662000119620001cc565b6200017d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a62000119620001cc565b5050601080546001600160a01b039485166001600160a01b031991821617909155600f80549390941692169190911790915550620001c4620001be620001cc565b62000213565b5050620004e6565b3390565b620001e782826200026560201b620014271760201c565b60008281526001602090815260409091206200020e9183906200143162000275821b17901c565b505050565b601380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000271828262000295565b5050565b60006200028c836001600160a01b0384166200031f565b90505b92915050565b620002a182826200036e565b62000271576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002db620001cc565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200032d838362000397565b62000365575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200028f565b5060006200028f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60009081526001919091016020526040902054151590565b828054620003bd90620004a9565b90600052602060002090601f016020900481019282620003e157600085556200042c565b82601f10620003fc57805160ff19168380011785556200042c565b828001600101855582156200042c579182015b828111156200042c5782518255916020019190600101906200040f565b506200043a9291506200043e565b5090565b5b808211156200043a57600081556001016200043f565b80516001600160a01b03811681146200046d57600080fd5b919050565b6000806040838503121562000485578182fd5b620004908362000455565b9150620004a06020840162000455565b90509250929050565b600281046001821680620004be57607f821691505b60208210811415620004e057634e487b7160e01b600052602260045260246000fd5b50919050565b614fab80620004f66000396000f3fe6080604052600436106102b25760003560e01c806370a0823111610175578063aea4e49e116100dc578063d539139311610095578063e63ab1e91161006f578063e63ab1e9146107b2578063e985e9c5146107c7578063f2fde38b146107e7578063f953cec714610807576102b9565b8063d539139314610768578063d547741f1461077d578063de9b771f1461079d576102b9565b8063aea4e49e146106be578063b88d4fde146106de578063bf583903146106fe578063c0857ba014610713578063c87b56dd14610728578063ca15c87314610748576102b9565b806391d148541161012e57806391d148541461061f57806395d89b411461063f578063972c492814610654578063a217fddf14610669578063a22cb4651461067e578063a8b5e6ea1461069e576102b9565b806370a0823114610580578063715018a6146105a05780638456cb59146105b55780638da5cb5b146105ca5780639010d07c146105df57806391b7f5ed146105ff576102b9565b806330438e01116102195780634f6ccce7116101d25780634f6ccce7146104d65780635c975abb146104f6578063607f2d421461050b5780636352211e1461052b5780636817c76c1461054b5780636a62784214610560576102b9565b806330438e011461043957806336568abe1461044c5780633ccfd60b1461046c5780633f4ba83a1461048157806342842e0e1461049657806342966c68146104b6576102b9565b806318160ddd1161026b57806318160ddd1461039c57806323b872dd146103b1578063248a9ca3146103d157806326092b83146103f15780632f2ff15d146103f95780632f745c5914610419576102b9565b806301ffc9a7146102be57806306fdde03146102f4578063081812fc14610316578063095ea7b3146103435780630e387de614610365578063142bc2ae14610387576102b9565b366102b957005b600080fd5b3480156102ca57600080fd5b506102de6102d9366004613f9d565b610827565b6040516102eb919061421d565b60405180910390f35b34801561030057600080fd5b5061030961083a565b6040516102eb9190614228565b34801561032257600080fd5b50610336610331366004613ef4565b6108cc565b6040516102eb91906141a8565b34801561034f57600080fd5b5061036361035e366004613e49565b610918565b005b34801561037157600080fd5b5061037a6109b0565b6040516102eb9190614157565b34801561039357600080fd5b506103096109d4565b3480156103a857600080fd5b5061037a610a62565b3480156103bd57600080fd5b506103636103cc366004613d6f565b610a68565b3480156103dd57600080fd5b5061037a6103ec366004613ef4565b610aa0565b610363610ab5565b34801561040557600080fd5b50610363610414366004613f0c565b610b69565b34801561042557600080fd5b5061037a610434366004613e49565b610b8b565b610363610447366004613fd5565b610be0565b34801561045857600080fd5b50610363610467366004613f0c565b610cd4565b34801561047857600080fd5b50610363610cf6565b34801561048d57600080fd5b50610363610d68565b3480156104a257600080fd5b506103636104b1366004613d6f565b610db8565b3480156104c257600080fd5b506103636104d1366004613ef4565b610dd3565b3480156104e257600080fd5b5061037a6104f1366004613ef4565b610e06565b34801561050257600080fd5b506102de610e61565b34801561051757600080fd5b506102de610526366004613ef4565b610e6a565b34801561053757600080fd5b50610336610546366004613ef4565b610e7f565b34801561055757600080fd5b5061037a610eb4565b34801561056c57600080fd5b5061036361057b366004613cff565b610eba565b34801561058c57600080fd5b5061037a61059b366004613cff565b610f1f565b3480156105ac57600080fd5b50610363610f63565b3480156105c157600080fd5b50610363610fac565b3480156105d657600080fd5b50610336610ffc565b3480156105eb57600080fd5b506103366105fa366004613f30565b61100b565b34801561060b57600080fd5b5061036361061a366004613ef4565b61102a565b34801561062b57600080fd5b506102de61063a366004613f0c565b61106e565b34801561064b57600080fd5b50610309611097565b34801561066057600080fd5b506103366110a6565b34801561067557600080fd5b5061037a6110b5565b34801561068a57600080fd5b50610363610699366004613e18565b6110ba565b3480156106aa57600080fd5b506102de6106b9366004613cff565b611188565b3480156106ca57600080fd5b506103636106d9366004613cff565b61119d565b3480156106ea57600080fd5b506103636106f9366004613daf565b6111e8565b34801561070a57600080fd5b5061037a611227565b34801561071f57600080fd5b5061033661122d565b34801561073457600080fd5b50610309610743366004613ef4565b61123c565b34801561075457600080fd5b5061037a610763366004613ef4565b6112be565b34801561077457600080fd5b5061037a6112d5565b34801561078957600080fd5b50610363610798366004613f0c565b6112f9565b3480156107a957600080fd5b50610336611303565b3480156107be57600080fd5b5061037a611312565b3480156107d357600080fd5b506102de6107e2366004613d37565b611336565b3480156107f357600080fd5b50610363610802366004613cff565b611364565b34801561081357600080fd5b50610363610822366004613fd5565b6113d2565b600061083282611446565b90505b919050565b60606002805461084990614e82565b80601f016020809104026020016040519081016040528092919081815260200182805461087590614e82565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b5050505050905090565b60006108d78261146b565b6108fc5760405162461bcd60e51b81526004016108f39061478f565b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061092382610e7f565b9050806001600160a01b0316836001600160a01b031614156109575760405162461bcd60e51b81526004016108f390614980565b806001600160a01b0316610969611488565b6001600160a01b031614806109855750610985816107e2611488565b6109a15760405162461bcd60e51b81526004016108f390614646565b6109ab838361148c565b505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b601680546109e190614e82565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0d90614e82565b8015610a5a5780601f10610a2f57610100808354040283529160200191610a5a565b820191906000526020600020905b815481529060010190602001808311610a3d57829003601f168201915b505050505081565b600a5490565b610a79610a73611488565b826114fa565b610a955760405162461bcd60e51b81526004016108f3906149f8565b6109ab83838361157f565b60009081526020819052604090206001015490565b3360009081526018602052604090205460ff16610ae45760405162461bcd60e51b81526004016108f39061495e565b6014543414610b055760405162461bcd60e51b81526004016108f3906147db565b336000818152601860205260409020805460ff19169055610b2590610eba565b600160156000828254610b389190614e05565b9091555050601554604051610b6791610b5391602001614157565b6040516020818303038152906040526116ac565b565b610b738282611717565b60008281526001602052604090206109ab9082611431565b6000610b9683610f1f565b8210610bb45760405162461bcd60e51b81526004016108f3906142e9565b506001600160a01b03821660009081526008602090815260408083208484529091529020545b92915050565b6014543414610c015760405162461bcd60e51b81526004016108f390614736565b336000908152601a602052604090205460ff1615610c315760405162461bcd60e51b81526004016108f390614490565b6000610c3c8261173b565b9050600081806020019051810190610c549190613d1b565b90506001600160a01b0381163314610c7e5760405162461bcd60e51b81526004016108f390614490565b610c8733610eba565b600160156000828254610c9a9190614e05565b9091555050601554604051610cb591610b5391602001614157565b5050336000908152601a60205260409020805460ff1916600117905550565b610cde8282611939565b60008281526001602052604090206109ab908261197b565b610cfe611488565b6001600160a01b0316610d0f610ffc565b6001600160a01b031614610d355760405162461bcd60e51b81526004016108f3906147fd565b6040514790339082156108fc029083906000818181858888f19350505050158015610d64573d6000803e3d6000fd5b5050565b610d947f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61063a611488565b610db05760405162461bcd60e51b81526004016108f390614b87565b610b67611990565b6109ab838383604051806020016040528060008152506111e8565b610dde610a73611488565b610dfa5760405162461bcd60e51b81526004016108f390614b37565b610e03816119fe565b50565b6000610e10610a62565b8210610e2e5760405162461bcd60e51b81526004016108f390614a49565b600a8281548110610e4f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600c5460ff1690565b60126020526000908152604090205460ff1681565b6000818152600460205260408120546001600160a01b0316806108325760405162461bcd60e51b81526004016108f3906146ed565b60145481565b610ee67f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661063a611488565b610f025760405162461bcd60e51b81526004016108f390614ada565b610f1581610f10600d611aa5565b611aa9565b610e03600d611b88565b60006001600160a01b038216610f475760405162461bcd60e51b81526004016108f3906146a3565b506001600160a01b031660009081526005602052604090205490565b610f6b611488565b6001600160a01b0316610f7c610ffc565b6001600160a01b031614610fa25760405162461bcd60e51b81526004016108f3906147fd565b610b676000611b91565b610fd87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61063a611488565b610ff45760405162461bcd60e51b81526004016108f3906144f8565b610b67611be3565b6013546001600160a01b031690565b60008281526001602052604081206110239083611c3e565b9392505050565b611032611488565b6001600160a01b0316611043610ffc565b6001600160a01b0316146110695760405162461bcd60e51b81526004016108f3906147fd565b601455565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606003805461084990614e82565b6011546001600160a01b031681565b600081565b6110c2611488565b6001600160a01b0316826001600160a01b031614156110f35760405162461bcd60e51b81526004016108f390614599565b8060076000611100611488565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611144611488565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161117c919061421d565b60405180910390a35050565b60186020526000908152604090205460ff1681565b6011546001600160a01b0316156111c65760405162461bcd60e51b81526004016108f390614334565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6111f96111f3611488565b836114fa565b6112155760405162461bcd60e51b81526004016108f3906149f8565b61122184848484611c4a565b50505050565b60155481565b6010546001600160a01b031681565b60606112478261146b565b6112635760405162461bcd60e51b81526004016108f39061487b565b600061126d611c7d565b9050600081511161128d5760405180602001604052806000815250611023565b8061129784611c8c565b6040516020016112a89291906140b3565b6040516020818303038152906040529392505050565b600081815260016020526040812061083290611da6565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610cde8282611db1565b600f546001600160a01b031681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61136c611488565b6001600160a01b031661137d610ffc565b6001600160a01b0316146113a35760405162461bcd60e51b81526004016108f3906147fd565b6001600160a01b0381166113c95760405162461bcd60e51b81526004016108f3906143d0565b610e0381611b91565b6113da611488565b6001600160a01b03166113eb610ffc565b6001600160a01b0316146114115760405162461bcd60e51b81526004016108f3906147fd565b600061141c8261173b565b9050610d6481611dd0565b610d648282611e47565b6000611023836001600160a01b038416611ecc565b60006001600160e01b0319821663780e9d6360e01b1480610832575061083282611f16565b6000908152600460205260409020546001600160a01b0316151590565b3390565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906114c182610e7f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115058261146b565b6115215760405162461bcd60e51b81526004016108f3906145d0565b600061152c83610e7f565b9050806001600160a01b0316846001600160a01b031614806115675750836001600160a01b031661155c846108cc565b6001600160a01b0316145b8061157757506115778185611336565b949350505050565b826001600160a01b031661159282610e7f565b6001600160a01b0316146115b85760405162461bcd60e51b81526004016108f390614832565b6001600160a01b0382166115de5760405162461bcd60e51b81526004016108f390614555565b6115e9838383611f56565b6115f460008261148c565b6001600160a01b038316600090815260056020526040812080546001929061161d908490614e05565b90915550506001600160a01b038216600090815260056020526040812080546001929061164b908490614c84565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600f5460115460405163b472047760e01b81526001600160a01b039283169263b4720477926116e29291169085906004016141f9565b600060405180830381600087803b1580156116fc57600080fd5b505af1158015611710573d6000803e3d6000fd5b5050505050565b61172082610aa0565b6117318161172c611488565b611f61565b6109ab8383611e47565b6060600061174883611fc5565b9050600061175582611ff5565b905060006117628361202c565b905060008161177084612063565b61177986612258565b60405160200161178b93929190614160565b60408051601f1981840301815291815281516020928301206000818152601290935291205490915060ff16156117d35760405162461bcd60e51b81526004016108f3906144b4565b6000818152601260205260408120805460ff191660011790556117f585612282565b905060006118028261238f565b905061180d8161241e565b6011546001600160a01b0390811691161461183a5760405162461bcd60e51b81526004016108f390614a95565b600061184587612455565b90506118636118538461247f565b8761185d8a612486565b846124b0565b61187f5760405162461bcd60e51b81526004016108f39061444d565b6118ad8561188c896127ae565b6118958a6127d8565b8461189f8c612802565b6118a88d61282c565b612856565b5060006118b98361295e565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366118ef6118ea8360006129a1565b6129db565b1461190c5760405162461bcd60e51b81526004016108f3906149c1565b600061191784612a56565b80602001905181019061192a9190614007565b9b9a5050505050505050505050565b611941611488565b6001600160a01b0316816001600160a01b0316146119715760405162461bcd60e51b81526004016108f390614be5565b610d648282612a80565b6000611023836001600160a01b038416612b03565b611998610e61565b6119b45760405162461bcd60e51b81526004016108f3906142bb565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6119e7611488565b6040516119f491906141a8565b60405180910390a1565b6000611a0982610e7f565b9050611a1781600084611f56565b611a2260008361148c565b6001600160a01b0381166000908152600560205260408120805460019290611a4b908490614e05565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b5490565b6001600160a01b038216611acf5760405162461bcd60e51b81526004016108f39061475a565b611ad88161146b565b15611af55760405162461bcd60e51b81526004016108f390614416565b611b0160008383611f56565b6001600160a01b0382166000908152600560205260408120805460019290611b2a908490614c84565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b601380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611beb610e61565b15611c085760405162461bcd60e51b81526004016108f39061461c565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119e7611488565b60006110238383612c20565b611c5584848461157f565b611c6184848484612c58565b6112215760405162461bcd60e51b81526004016108f39061437e565b6060600e805461084990614e82565b606081611cb157506040805180820190915260018152600360fc1b6020820152610835565b8160005b8115611cdb5780611cc581614eb7565b9150611cd49050600a83614c9c565b9150611cb5565b6000816001600160401b03811115611d0357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d2d576020820181803683370190505b5090505b841561157757611d42600183614e05565b9150611d4f600a86614ed2565b611d5a906030614c84565b60f81b818381518110611d7d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611d9f600a86614c9c565b9450611d31565b600061083282611aa5565b611dba82610aa0565b611dc68161172c611488565b6109ab8383612a80565b8051611de3906016906020840190613ba7565b50600081806020019051810190611dfa9190613e74565b905060005b60058110156109ab57611e35828260058110611e2b57634e487b7160e01b600052603260045260246000fd5b6020020151612d70565b80611e3f81614eb7565b915050611dff565b611e51828261106e565b610d64576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e88611488565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611ed88383612e60565b611f0e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bda565b506000610bda565b60006001600160e01b031982166380ac58cd60e01b1480611f4757506001600160e01b03198216635b5e139f60e01b145b80610832575061083282612e78565b6109ab838383612e9d565b611f6b828261106e565b610d6457611f83816001600160a01b03166014612ecd565b611f8e836020612ecd565b604051602001611f9f9291906140e2565b60408051601f198184030181529082905262461bcd60e51b82526108f391600401614228565b611fcd613c2b565b6000611fe0611fdb8461307e565b6130a3565b60408051602081019091529081529392505050565b6060610832826000015160088151811061201f57634e487b7160e01b600052603260045260246000fd5b60200260200101516131c8565b6000610832826000015160028151811061205657634e487b7160e01b600052603260045260246000fd5b60200260200101516129db565b604080516020810190915260008152815160609190156108325760008061208b600086613272565b60f81c905060018114806120a257508060ff166003145b15612165576001855160026120b79190614de6565b6120c19190614e05565b6001600160401b038111156120e657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612110576020820181803683370190505b5092506000612120600187613272565b9050808460008151811061214457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060019250506121d6565b6002855160026121759190614de6565b61217f9190614e05565b6001600160401b038111156121a457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121ce576020820181803683370190505b509250600091505b60ff82165b835181101561224e576122056121f460ff851683614e05565b6121ff906002614c84565b87613272565b84828151811061222557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061224681614eb7565b9150506121db565b5050509050919050565b6000610832826000015160098151811061205657634e487b7160e01b600052603260045260246000fd5b61228a613c3e565b6122b2826000015160068151811061201f57634e487b7160e01b600052603260045260246000fd5b602082018190526000906122c59061307e565b90506122d08161330f565b156122e5576122de816130a3565b825261237b565b602082015180516000906122fb90600190614e05565b6001600160401b0381111561232057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561234a576020820181803683370190505b50905060008083602101915082602001905061236882828551613349565b612374611fdb8461307e565b8652505050505b61238483612258565b604083015250919050565b612397613c5f565b60006123ce83600001516003815181106123c157634e487b7160e01b600052603260045260246000fd5b60200260200101516130a3565b8360400151815181106123f157634e487b7160e01b600052603260045260246000fd5b602002602001015190506040518060400160405280828152602001612415836130a3565b90529392505050565b6000610832826020015160008151811061244857634e487b7160e01b600052603260045260246000fd5b60200260200101516133c2565b6000610832826000015160058151811061205657634e487b7160e01b600052603260045260246000fd5b6020015190565b6060610832826000015160078151811061201f57634e487b7160e01b600052603260045260246000fd5b6000806124bc8461307e565b905060006124c9826130a3565b9050606080856000806124db8b612063565b90508051600014156124f7576000975050505050505050611577565b60005b865181101561279e57815183111561251d57600098505050505050505050611577565b61254d87828151811061254057634e487b7160e01b600052603260045260246000fd5b60200260200101516133dc565b95508580519060200120841461256e57600098505050505050505050611577565b6125918782815181106123c157634e487b7160e01b600052603260045260246000fd5b9450845160111415612690578151831415612601578c805190602001206125d28660108151811061201f57634e487b7160e01b600052603260045260246000fd5b8051906020012014156125f057600198505050505050505050611577565b600098505050505050505050611577565b600082848151811061262357634e487b7160e01b600052603260045260246000fd5b016020015160f81c905060108111156126485760009950505050505050505050611577565b61267b868260ff168151811061266e57634e487b7160e01b600052603260045260246000fd5b602002602001015161346a565b9450612688600185614c84565b93505061278c565b8451600214156125f05760006126ca6126c38760008151811061201f57634e487b7160e01b600052603260045260246000fd5b8486613498565b83519091506126d98286614c84565b141561273c578d8051906020012061270b8760018151811061201f57634e487b7160e01b600052603260045260246000fd5b80519060200120141561272a5760019950505050505050505050611577565b60009950505050505050505050611577565b806127535760009950505050505050505050611577565b61275d8185614c84565b93506127838660018151811061266e57634e487b7160e01b600052603260045260246000fd5b945061278c9050565b8061279681614eb7565b9150506124fa565b5050505050505050949350505050565b6000610832826000015160038151811061205657634e487b7160e01b600052603260045260246000fd5b6000610832826000015160048151811061205657634e487b7160e01b600052603260045260246000fd5b6000610832826000015160008151811061205657634e487b7160e01b600052603260045260246000fd5b6060610832826000015160018151811061201f57634e487b7160e01b600052603260045260246000fd5b6010546040516320a9cea560e11b81526000918291829182916001600160a01b03909116906341539d4a9061288f908990600401614157565b60a06040518083038186803b1580156128a757600080fd5b505afa1580156128bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128df9190613f51565b5093505092509250612935828b6128f69190614e05565b84878d8d8d8d60405160200161290f949392919061418d565b604051602081830303815290604052805190602001206135ca909392919063ffffffff16565b6129515760405162461bcd60e51b81526004016108f390614927565b9998505050505050505050565b612966613c2b565b604051806020016040528061299984602001516001815181106123c157634e487b7160e01b600052603260045260246000fd5b905292915050565b6129a9613c7f565b82518051839081106129cb57634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b8051600090158015906129f057508151602110155b6129f957600080fd5b6000612a0883602001516136de565b90506000818460000151612a1c9190614e05565b9050600080838660200151612a319190614c84565b9050805191506020831015612a4d57826020036101000a820491505b50949350505050565b6060610832826020015160028151811061201f57634e487b7160e01b600052603260045260246000fd5b612a8a828261106e565b15610d64576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055612abf611488565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008181526001830160205260408120548015612c16576000612b27600183614e05565b8554909150600090612b3b90600190614e05565b9050818114612bbc576000866000018281548110612b6957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612b9a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612bdb57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610bda565b6000915050610bda565b6000826000018281548110612c4557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000612c6c846001600160a01b0316613769565b15612d6857836001600160a01b031663150b7a02612c88611488565b8786866040518563ffffffff1660e01b8152600401612caa94939291906141bc565b602060405180830381600087803b158015612cc457600080fd5b505af1925050508015612cf4575060408051601f3d908101601f19168201909252612cf191810190613fb9565b60015b612d4e573d808015612d22576040519150601f19603f3d011682016040523d82523d6000602084013e612d27565b606091505b508051612d465760405162461bcd60e51b81526004016108f39061437e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611577565b506001611577565b6017805460018082019092557fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c150180546001600160a01b0319166001600160a01b0384169081179091556000908152601860205260408120805460ff19168317905560198054909190612de4908490614c84565b909155505060195460051015610e035760006018600060176005601954612e0b9190614e05565b81548110612e2957634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905550565b60009081526001919091016020526040902054151590565b60006001600160e01b03198216635a05180f60e01b148061083257506108328261376f565b612ea8838383613794565b612eb0610e61565b156109ab5760405162461bcd60e51b81526004016108f390614270565b60606000612edc836002614de6565b612ee7906002614c84565b6001600160401b03811115612f0c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612f36576020820181803683370190505b509050600360fc1b81600081518110612f5f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612f9c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612fc0846002614de6565b612fcb906001614c84565b90505b600181111561305f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061300d57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061303157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361305881614e6b565b9050612fce565b5083156110235760405162461bcd60e51b81526004016108f39061423b565b613086613c7f565b506040805180820190915281518152602082810190820152919050565b60606130ae8261330f565b6130b757600080fd5b60006130c28361381d565b90506000816001600160401b038111156130ec57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561312557816020015b613112613c7f565b81526020019060019003908161310a5790505b509050600061313785602001516136de565b85602001516131469190614c84565b90506000805b848110156131bd5761315d836138a0565b915060405180604001604052808381526020018481525084828151811061319457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526131a98284614c84565b9250806131b581614eb7565b91505061314c565b509195945050505050565b80516060906131d657600080fd5b60006131e583602001516136de565b905060008184600001516131f99190614e05565b90506000816001600160401b0381111561322357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561324d576020820181803683370190505b5090506000816020019050612a4d84876020015161326b9190614c84565b8285613944565b600061327f600284614ed2565b156132c757601082613292600286614c9c565b815181106132b057634e487b7160e01b600052603260045260246000fd5b01602001516132c2919060f81c614ee6565b613305565b6010826132d5600286614c9c565b815181106132f357634e487b7160e01b600052603260045260246000fd5b0160200151613305919060f81c614cb0565b60f81b9392505050565b805160009061332057506000610835565b6020820151805160001a9060c082101561333f57600092505050610835565b5060019392505050565b80613353576109ab565b6020811061338b578251825261336a602084614c84565b9250613377602083614c84565b9150613384602082614e05565b9050613353565b6000600161339a836020614e05565b6133a690610100614d18565b6133b09190614e05565b84518451821691191617835250505050565b80516000906015146133d357600080fd5b610832826129db565b6060600082600001516001600160401b0381111561340a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613434576020820181803683370190505b509050805160001415613448579050610835565b60008160200190506134638460200151828660000151613944565b5092915050565b805160009060211461347b57600080fd5b6000808360200151600161348f9190614c84565b51949350505050565b600080806134a586612063565b9050600081516001600160401b038111156134d057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156134fa576020820181803683370190505b509050845b825161350b9087614c84565b81101561359a57600087828151811061353457634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916905080836135518985614e05565b8151811061356f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535050808061359290614eb7565b9150506134ff565b508080519060200120828051906020012014156135ba57815192506135bf565b600092505b509095945050505050565b6000602082516135da9190614ed2565b156135f75760405162461bcd60e51b81526004016108f3906148ca565b6000602083516136079190614c9c565b9050613614816002614d18565b85106136325760405162461bcd60e51b81526004016108f3906148f8565b60008660205b855181116136d057858101519250613651600289614ed2565b6136855781836040516020016136689291906140a5565b6040516020818303038152906040528051906020012091506136b1565b82826040516020016136989291906140a5565b6040516020818303038152906040528051906020012091505b6136bc600289614c9c565b97506136c9602082614c84565b9050613638565b509094149695505050505050565b8051600090811a60808110156136f8576000915050610835565b60b8811080613713575060c08110801590613713575060f881105b15613722576001915050610835565b60c081101561375757613737600160b8614e1c565b6137449060ff1682614e05565b61374f906001614c84565b915050610835565b613737600160f8614e1c565b50919050565b3b151590565b60006001600160e01b03198216637965db0b60e01b1480610832575061083282613990565b61379f8383836109ab565b6001600160a01b0383166137bb576137b6816139a9565b6137de565b816001600160a01b0316836001600160a01b0316146137de576137de83826139ed565b6001600160a01b0382166137fa576137f581613a8a565b6109ab565b826001600160a01b0316826001600160a01b0316146109ab576109ab8282613b63565b805160009061382e57506000610835565b60008061383e84602001516136de565b846020015161384d9190614c84565b90506000846000015185602001516138659190614c84565b90505b8082101561389757613879826138a0565b6138839083614c84565b91508261388f81614eb7565b935050613868565b50909392505050565b80516000908190811a60808110156138bb5760019150613463565b60b88110156138e1576138cf608082614e05565b6138da906001614c84565b9150613463565b60c081101561390e5760b78103600185019450806020036101000a85510460018201810193505050613463565b60f8811015613922576138cf60c082614e05565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8061394e576109ab565b602081106139865782518252613965602084614c84565b9250613972602083614c84565b915061397f602082614e05565b905061394e565b8061338b576109ab565b6001600160e01b031981166301ffc9a760e01b14919050565b600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b600060016139fa84610f1f565b613a049190614e05565b600083815260096020526040902054909150808214613a57576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090613a9c90600190614e05565b6000838152600b6020526040812054600a8054939450909284908110613ad257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600a8381548110613b0157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480613b4757634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613b6e83610f1f565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b828054613bb390614e82565b90600052602060002090601f016020900481019282613bd55760008555613c1b565b82601f10613bee57805160ff1916838001178555613c1b565b82800160010185558215613c1b579182015b82811115613c1b578251825591602001919060010190613c00565b50613c27929150613c99565b5090565b6040518060200160405280606081525090565b60405180606001604052806060815260200160608152602001600081525090565b6040518060400160405280613c72613c7f565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b5b80821115613c275760008155600101613c9a565b600082601f830112613cbe578081fd5b8135613cd1613ccc82614c5d565b614c34565b818152846020838601011115613ce5578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613d10578081fd5b813561102381614f4a565b600060208284031215613d2c578081fd5b815161102381614f4a565b60008060408385031215613d49578081fd5b8235613d5481614f4a565b91506020830135613d6481614f4a565b809150509250929050565b600080600060608486031215613d83578081fd5b8335613d8e81614f4a565b92506020840135613d9e81614f4a565b929592945050506040919091013590565b60008060008060808587031215613dc4578081fd5b8435613dcf81614f4a565b93506020850135613ddf81614f4a565b92506040850135915060608501356001600160401b03811115613e00578182fd5b613e0c87828801613cae565b91505092959194509250565b60008060408385031215613e2a578182fd5b8235613e3581614f4a565b915060208301358015158114613d64578182fd5b60008060408385031215613e5b578182fd5b8235613e6681614f4a565b946020939093013593505050565b600060a08284031215613e85578081fd5b82601f830112613e93578081fd5b60405160a081018181106001600160401b0382111715613eb557613eb5614f34565b604052808360a08101861015613ec9578384fd5b835b60058110156131bd578151613edf81614f4a565b83526020928301929190910190600101613ecb565b600060208284031215613f05578081fd5b5035919050565b60008060408385031215613f1e578182fd5b823591506020830135613d6481614f4a565b60008060408385031215613f42578182fd5b50508035926020909101359150565b600080600080600060a08688031215613f68578283fd5b855194506020860151935060408601519250606086015191506080860151613f8f81614f4a565b809150509295509295909350565b600060208284031215613fae578081fd5b813561102381614f5f565b600060208284031215613fca578081fd5b815161102381614f5f565b600060208284031215613fe6578081fd5b81356001600160401b03811115613ffb578182fd5b61157784828501613cae565b600060208284031215614018578081fd5b81516001600160401b0381111561402d578182fd5b8201601f8101841361403d578182fd5b805161404b613ccc82614c5d565b81815285602083850101111561405f578384fd5b614070826020830160208601614e3f565b95945050505050565b60008151808452614091816020860160208601614e3f565b601f01601f19169290920160200192915050565b918252602082015260400190565b600083516140c5818460208801614e3f565b8351908301906140d9818360208801614e3f565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008252835161411a816017850160208801614e3f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161414b816028840160208801614e3f565b01602801949350505050565b90815260200190565b60008482528351614178816020850160208801614e3f565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906141ef90830184614079565b9695505050505050565b6001600160a01b038316815260406020820181905260009061157790830184614079565b901515815260200190565b6000602082526110236020830184614079565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b6020808252602a908201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526023908201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260408201526227a7a360e91b606082015260800190565b6020808252600a908201526946443a6d57503a34303160b01b604082015260600190565b60208082526024908201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560408201526314d4d15160e21b606082015260800190565b6020808252603e908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d75737420686176652070617573657220726f6c6520746f2070617573650000606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252600a908201526923221d36aba81d1a181960b11b604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526008908201526723221d369d1a181960c11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601c908201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604082015260600190565b60208082526008908201526746443a6d3a34303360c01b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601f908201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526025908201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604082015264155393915360da1b606082015260800190565b6020808252603d908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d7573742068617665206d696e74657220726f6c6520746f206d696e74000000606082015260800190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201526f1b995c881b9bdc88185c1c1c9bdd995960821b606082015260800190565b602080825260409082018190527f4552433732315072657365744d696e7465725061757365724175746f49643a20908201527f6d75737420686176652070617573657220726f6c6520746f20756e7061757365606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6040518181016001600160401b0381118282101715614c5557614c55614f34565b604052919050565b60006001600160401b03821115614c7657614c76614f34565b50601f01601f191660200190565b60008219821115614c9757614c97614f08565b500190565b600082614cab57614cab614f1e565b500490565b600060ff831680614cc357614cc3614f1e565b8060ff84160491505092915050565b80825b6001808611614ce45750614d0f565b818704821115614cf657614cf6614f08565b80861615614d0357918102915b9490941c938002614cd5565b94509492505050565b60006110236000198484600082614d3157506001611023565b81614d3e57506000611023565b8160018114614d545760028114614d5e57614d8b565b6001915050611023565b60ff841115614d6f57614d6f614f08565b6001841b915084821115614d8557614d85614f08565b50611023565b5060208310610133831016604e8410600b8410161715614dbe575081810a83811115614db957614db9614f08565b611023565b614dcb8484846001614cd2565b808604821115614ddd57614ddd614f08565b02949350505050565b6000816000190483118215151615614e0057614e00614f08565b500290565b600082821015614e1757614e17614f08565b500390565b600060ff821660ff841680821015614e3657614e36614f08565b90039392505050565b60005b83811015614e5a578181015183820152602001614e42565b838111156112215750506000910152565b600081614e7a57614e7a614f08565b506000190190565b600281046001821680614e9657607f821691505b6020821081141561376357634e487b7160e01b600052602260045260246000fd5b6000600019821415614ecb57614ecb614f08565b5060010190565b600082614ee157614ee1614f1e565b500690565b600060ff831680614ef957614ef9614f1e565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e0357600080fd5b6001600160e01b031981168114610e0357600080fdfea26469706673582212202a44482a54a4b0f2b95eb497fc55914efec46c65f1c4a752f232fb02e4fce56664736f6c63430008000033697066733a2f2f62616679626569636f65366f6532796f65756263706c6a717165633376756c346e346c377a7a37616467726a6567696a6c77336e647833347663652f",
  "deployedBytecode": "0x6080604052600436106102b25760003560e01c806370a0823111610175578063aea4e49e116100dc578063d539139311610095578063e63ab1e91161006f578063e63ab1e9146107b2578063e985e9c5146107c7578063f2fde38b146107e7578063f953cec714610807576102b9565b8063d539139314610768578063d547741f1461077d578063de9b771f1461079d576102b9565b8063aea4e49e146106be578063b88d4fde146106de578063bf583903146106fe578063c0857ba014610713578063c87b56dd14610728578063ca15c87314610748576102b9565b806391d148541161012e57806391d148541461061f57806395d89b411461063f578063972c492814610654578063a217fddf14610669578063a22cb4651461067e578063a8b5e6ea1461069e576102b9565b806370a0823114610580578063715018a6146105a05780638456cb59146105b55780638da5cb5b146105ca5780639010d07c146105df57806391b7f5ed146105ff576102b9565b806330438e01116102195780634f6ccce7116101d25780634f6ccce7146104d65780635c975abb146104f6578063607f2d421461050b5780636352211e1461052b5780636817c76c1461054b5780636a62784214610560576102b9565b806330438e011461043957806336568abe1461044c5780633ccfd60b1461046c5780633f4ba83a1461048157806342842e0e1461049657806342966c68146104b6576102b9565b806318160ddd1161026b57806318160ddd1461039c57806323b872dd146103b1578063248a9ca3146103d157806326092b83146103f15780632f2ff15d146103f95780632f745c5914610419576102b9565b806301ffc9a7146102be57806306fdde03146102f4578063081812fc14610316578063095ea7b3146103435780630e387de614610365578063142bc2ae14610387576102b9565b366102b957005b600080fd5b3480156102ca57600080fd5b506102de6102d9366004613f9d565b610827565b6040516102eb919061421d565b60405180910390f35b34801561030057600080fd5b5061030961083a565b6040516102eb9190614228565b34801561032257600080fd5b50610336610331366004613ef4565b6108cc565b6040516102eb91906141a8565b34801561034f57600080fd5b5061036361035e366004613e49565b610918565b005b34801561037157600080fd5b5061037a6109b0565b6040516102eb9190614157565b34801561039357600080fd5b506103096109d4565b3480156103a857600080fd5b5061037a610a62565b3480156103bd57600080fd5b506103636103cc366004613d6f565b610a68565b3480156103dd57600080fd5b5061037a6103ec366004613ef4565b610aa0565b610363610ab5565b34801561040557600080fd5b50610363610414366004613f0c565b610b69565b34801561042557600080fd5b5061037a610434366004613e49565b610b8b565b610363610447366004613fd5565b610be0565b34801561045857600080fd5b50610363610467366004613f0c565b610cd4565b34801561047857600080fd5b50610363610cf6565b34801561048d57600080fd5b50610363610d68565b3480156104a257600080fd5b506103636104b1366004613d6f565b610db8565b3480156104c257600080fd5b506103636104d1366004613ef4565b610dd3565b3480156104e257600080fd5b5061037a6104f1366004613ef4565b610e06565b34801561050257600080fd5b506102de610e61565b34801561051757600080fd5b506102de610526366004613ef4565b610e6a565b34801561053757600080fd5b50610336610546366004613ef4565b610e7f565b34801561055757600080fd5b5061037a610eb4565b34801561056c57600080fd5b5061036361057b366004613cff565b610eba565b34801561058c57600080fd5b5061037a61059b366004613cff565b610f1f565b3480156105ac57600080fd5b50610363610f63565b3480156105c157600080fd5b50610363610fac565b3480156105d657600080fd5b50610336610ffc565b3480156105eb57600080fd5b506103366105fa366004613f30565b61100b565b34801561060b57600080fd5b5061036361061a366004613ef4565b61102a565b34801561062b57600080fd5b506102de61063a366004613f0c565b61106e565b34801561064b57600080fd5b50610309611097565b34801561066057600080fd5b506103366110a6565b34801561067557600080fd5b5061037a6110b5565b34801561068a57600080fd5b50610363610699366004613e18565b6110ba565b3480156106aa57600080fd5b506102de6106b9366004613cff565b611188565b3480156106ca57600080fd5b506103636106d9366004613cff565b61119d565b3480156106ea57600080fd5b506103636106f9366004613daf565b6111e8565b34801561070a57600080fd5b5061037a611227565b34801561071f57600080fd5b5061033661122d565b34801561073457600080fd5b50610309610743366004613ef4565b61123c565b34801561075457600080fd5b5061037a610763366004613ef4565b6112be565b34801561077457600080fd5b5061037a6112d5565b34801561078957600080fd5b50610363610798366004613f0c565b6112f9565b3480156107a957600080fd5b50610336611303565b3480156107be57600080fd5b5061037a611312565b3480156107d357600080fd5b506102de6107e2366004613d37565b611336565b3480156107f357600080fd5b50610363610802366004613cff565b611364565b34801561081357600080fd5b50610363610822366004613fd5565b6113d2565b600061083282611446565b90505b919050565b60606002805461084990614e82565b80601f016020809104026020016040519081016040528092919081815260200182805461087590614e82565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b5050505050905090565b60006108d78261146b565b6108fc5760405162461bcd60e51b81526004016108f39061478f565b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061092382610e7f565b9050806001600160a01b0316836001600160a01b031614156109575760405162461bcd60e51b81526004016108f390614980565b806001600160a01b0316610969611488565b6001600160a01b031614806109855750610985816107e2611488565b6109a15760405162461bcd60e51b81526004016108f390614646565b6109ab838361148c565b505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b601680546109e190614e82565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0d90614e82565b8015610a5a5780601f10610a2f57610100808354040283529160200191610a5a565b820191906000526020600020905b815481529060010190602001808311610a3d57829003601f168201915b505050505081565b600a5490565b610a79610a73611488565b826114fa565b610a955760405162461bcd60e51b81526004016108f3906149f8565b6109ab83838361157f565b60009081526020819052604090206001015490565b3360009081526018602052604090205460ff16610ae45760405162461bcd60e51b81526004016108f39061495e565b6014543414610b055760405162461bcd60e51b81526004016108f3906147db565b336000818152601860205260409020805460ff19169055610b2590610eba565b600160156000828254610b389190614e05565b9091555050601554604051610b6791610b5391602001614157565b6040516020818303038152906040526116ac565b565b610b738282611717565b60008281526001602052604090206109ab9082611431565b6000610b9683610f1f565b8210610bb45760405162461bcd60e51b81526004016108f3906142e9565b506001600160a01b03821660009081526008602090815260408083208484529091529020545b92915050565b6014543414610c015760405162461bcd60e51b81526004016108f390614736565b336000908152601a602052604090205460ff1615610c315760405162461bcd60e51b81526004016108f390614490565b6000610c3c8261173b565b9050600081806020019051810190610c549190613d1b565b90506001600160a01b0381163314610c7e5760405162461bcd60e51b81526004016108f390614490565b610c8733610eba565b600160156000828254610c9a9190614e05565b9091555050601554604051610cb591610b5391602001614157565b5050336000908152601a60205260409020805460ff1916600117905550565b610cde8282611939565b60008281526001602052604090206109ab908261197b565b610cfe611488565b6001600160a01b0316610d0f610ffc565b6001600160a01b031614610d355760405162461bcd60e51b81526004016108f3906147fd565b6040514790339082156108fc029083906000818181858888f19350505050158015610d64573d6000803e3d6000fd5b5050565b610d947f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61063a611488565b610db05760405162461bcd60e51b81526004016108f390614b87565b610b67611990565b6109ab838383604051806020016040528060008152506111e8565b610dde610a73611488565b610dfa5760405162461bcd60e51b81526004016108f390614b37565b610e03816119fe565b50565b6000610e10610a62565b8210610e2e5760405162461bcd60e51b81526004016108f390614a49565b600a8281548110610e4f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600c5460ff1690565b60126020526000908152604090205460ff1681565b6000818152600460205260408120546001600160a01b0316806108325760405162461bcd60e51b81526004016108f3906146ed565b60145481565b610ee67f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661063a611488565b610f025760405162461bcd60e51b81526004016108f390614ada565b610f1581610f10600d611aa5565b611aa9565b610e03600d611b88565b60006001600160a01b038216610f475760405162461bcd60e51b81526004016108f3906146a3565b506001600160a01b031660009081526005602052604090205490565b610f6b611488565b6001600160a01b0316610f7c610ffc565b6001600160a01b031614610fa25760405162461bcd60e51b81526004016108f3906147fd565b610b676000611b91565b610fd87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61063a611488565b610ff45760405162461bcd60e51b81526004016108f3906144f8565b610b67611be3565b6013546001600160a01b031690565b60008281526001602052604081206110239083611c3e565b9392505050565b611032611488565b6001600160a01b0316611043610ffc565b6001600160a01b0316146110695760405162461bcd60e51b81526004016108f3906147fd565b601455565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606003805461084990614e82565b6011546001600160a01b031681565b600081565b6110c2611488565b6001600160a01b0316826001600160a01b031614156110f35760405162461bcd60e51b81526004016108f390614599565b8060076000611100611488565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611144611488565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161117c919061421d565b60405180910390a35050565b60186020526000908152604090205460ff1681565b6011546001600160a01b0316156111c65760405162461bcd60e51b81526004016108f390614334565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6111f96111f3611488565b836114fa565b6112155760405162461bcd60e51b81526004016108f3906149f8565b61122184848484611c4a565b50505050565b60155481565b6010546001600160a01b031681565b60606112478261146b565b6112635760405162461bcd60e51b81526004016108f39061487b565b600061126d611c7d565b9050600081511161128d5760405180602001604052806000815250611023565b8061129784611c8c565b6040516020016112a89291906140b3565b6040516020818303038152906040529392505050565b600081815260016020526040812061083290611da6565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610cde8282611db1565b600f546001600160a01b031681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61136c611488565b6001600160a01b031661137d610ffc565b6001600160a01b0316146113a35760405162461bcd60e51b81526004016108f3906147fd565b6001600160a01b0381166113c95760405162461bcd60e51b81526004016108f3906143d0565b610e0381611b91565b6113da611488565b6001600160a01b03166113eb610ffc565b6001600160a01b0316146114115760405162461bcd60e51b81526004016108f3906147fd565b600061141c8261173b565b9050610d6481611dd0565b610d648282611e47565b6000611023836001600160a01b038416611ecc565b60006001600160e01b0319821663780e9d6360e01b1480610832575061083282611f16565b6000908152600460205260409020546001600160a01b0316151590565b3390565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906114c182610e7f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115058261146b565b6115215760405162461bcd60e51b81526004016108f3906145d0565b600061152c83610e7f565b9050806001600160a01b0316846001600160a01b031614806115675750836001600160a01b031661155c846108cc565b6001600160a01b0316145b8061157757506115778185611336565b949350505050565b826001600160a01b031661159282610e7f565b6001600160a01b0316146115b85760405162461bcd60e51b81526004016108f390614832565b6001600160a01b0382166115de5760405162461bcd60e51b81526004016108f390614555565b6115e9838383611f56565b6115f460008261148c565b6001600160a01b038316600090815260056020526040812080546001929061161d908490614e05565b90915550506001600160a01b038216600090815260056020526040812080546001929061164b908490614c84565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600f5460115460405163b472047760e01b81526001600160a01b039283169263b4720477926116e29291169085906004016141f9565b600060405180830381600087803b1580156116fc57600080fd5b505af1158015611710573d6000803e3d6000fd5b5050505050565b61172082610aa0565b6117318161172c611488565b611f61565b6109ab8383611e47565b6060600061174883611fc5565b9050600061175582611ff5565b905060006117628361202c565b905060008161177084612063565b61177986612258565b60405160200161178b93929190614160565b60408051601f1981840301815291815281516020928301206000818152601290935291205490915060ff16156117d35760405162461bcd60e51b81526004016108f3906144b4565b6000818152601260205260408120805460ff191660011790556117f585612282565b905060006118028261238f565b905061180d8161241e565b6011546001600160a01b0390811691161461183a5760405162461bcd60e51b81526004016108f390614a95565b600061184587612455565b90506118636118538461247f565b8761185d8a612486565b846124b0565b61187f5760405162461bcd60e51b81526004016108f39061444d565b6118ad8561188c896127ae565b6118958a6127d8565b8461189f8c612802565b6118a88d61282c565b612856565b5060006118b98361295e565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366118ef6118ea8360006129a1565b6129db565b1461190c5760405162461bcd60e51b81526004016108f3906149c1565b600061191784612a56565b80602001905181019061192a9190614007565b9b9a5050505050505050505050565b611941611488565b6001600160a01b0316816001600160a01b0316146119715760405162461bcd60e51b81526004016108f390614be5565b610d648282612a80565b6000611023836001600160a01b038416612b03565b611998610e61565b6119b45760405162461bcd60e51b81526004016108f3906142bb565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6119e7611488565b6040516119f491906141a8565b60405180910390a1565b6000611a0982610e7f565b9050611a1781600084611f56565b611a2260008361148c565b6001600160a01b0381166000908152600560205260408120805460019290611a4b908490614e05565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b5490565b6001600160a01b038216611acf5760405162461bcd60e51b81526004016108f39061475a565b611ad88161146b565b15611af55760405162461bcd60e51b81526004016108f390614416565b611b0160008383611f56565b6001600160a01b0382166000908152600560205260408120805460019290611b2a908490614c84565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b601380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611beb610e61565b15611c085760405162461bcd60e51b81526004016108f39061461c565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119e7611488565b60006110238383612c20565b611c5584848461157f565b611c6184848484612c58565b6112215760405162461bcd60e51b81526004016108f39061437e565b6060600e805461084990614e82565b606081611cb157506040805180820190915260018152600360fc1b6020820152610835565b8160005b8115611cdb5780611cc581614eb7565b9150611cd49050600a83614c9c565b9150611cb5565b6000816001600160401b03811115611d0357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d2d576020820181803683370190505b5090505b841561157757611d42600183614e05565b9150611d4f600a86614ed2565b611d5a906030614c84565b60f81b818381518110611d7d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611d9f600a86614c9c565b9450611d31565b600061083282611aa5565b611dba82610aa0565b611dc68161172c611488565b6109ab8383612a80565b8051611de3906016906020840190613ba7565b50600081806020019051810190611dfa9190613e74565b905060005b60058110156109ab57611e35828260058110611e2b57634e487b7160e01b600052603260045260246000fd5b6020020151612d70565b80611e3f81614eb7565b915050611dff565b611e51828261106e565b610d64576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e88611488565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611ed88383612e60565b611f0e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bda565b506000610bda565b60006001600160e01b031982166380ac58cd60e01b1480611f4757506001600160e01b03198216635b5e139f60e01b145b80610832575061083282612e78565b6109ab838383612e9d565b611f6b828261106e565b610d6457611f83816001600160a01b03166014612ecd565b611f8e836020612ecd565b604051602001611f9f9291906140e2565b60408051601f198184030181529082905262461bcd60e51b82526108f391600401614228565b611fcd613c2b565b6000611fe0611fdb8461307e565b6130a3565b60408051602081019091529081529392505050565b6060610832826000015160088151811061201f57634e487b7160e01b600052603260045260246000fd5b60200260200101516131c8565b6000610832826000015160028151811061205657634e487b7160e01b600052603260045260246000fd5b60200260200101516129db565b604080516020810190915260008152815160609190156108325760008061208b600086613272565b60f81c905060018114806120a257508060ff166003145b15612165576001855160026120b79190614de6565b6120c19190614e05565b6001600160401b038111156120e657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612110576020820181803683370190505b5092506000612120600187613272565b9050808460008151811061214457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060019250506121d6565b6002855160026121759190614de6565b61217f9190614e05565b6001600160401b038111156121a457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121ce576020820181803683370190505b509250600091505b60ff82165b835181101561224e576122056121f460ff851683614e05565b6121ff906002614c84565b87613272565b84828151811061222557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061224681614eb7565b9150506121db565b5050509050919050565b6000610832826000015160098151811061205657634e487b7160e01b600052603260045260246000fd5b61228a613c3e565b6122b2826000015160068151811061201f57634e487b7160e01b600052603260045260246000fd5b602082018190526000906122c59061307e565b90506122d08161330f565b156122e5576122de816130a3565b825261237b565b602082015180516000906122fb90600190614e05565b6001600160401b0381111561232057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561234a576020820181803683370190505b50905060008083602101915082602001905061236882828551613349565b612374611fdb8461307e565b8652505050505b61238483612258565b604083015250919050565b612397613c5f565b60006123ce83600001516003815181106123c157634e487b7160e01b600052603260045260246000fd5b60200260200101516130a3565b8360400151815181106123f157634e487b7160e01b600052603260045260246000fd5b602002602001015190506040518060400160405280828152602001612415836130a3565b90529392505050565b6000610832826020015160008151811061244857634e487b7160e01b600052603260045260246000fd5b60200260200101516133c2565b6000610832826000015160058151811061205657634e487b7160e01b600052603260045260246000fd5b6020015190565b6060610832826000015160078151811061201f57634e487b7160e01b600052603260045260246000fd5b6000806124bc8461307e565b905060006124c9826130a3565b9050606080856000806124db8b612063565b90508051600014156124f7576000975050505050505050611577565b60005b865181101561279e57815183111561251d57600098505050505050505050611577565b61254d87828151811061254057634e487b7160e01b600052603260045260246000fd5b60200260200101516133dc565b95508580519060200120841461256e57600098505050505050505050611577565b6125918782815181106123c157634e487b7160e01b600052603260045260246000fd5b9450845160111415612690578151831415612601578c805190602001206125d28660108151811061201f57634e487b7160e01b600052603260045260246000fd5b8051906020012014156125f057600198505050505050505050611577565b600098505050505050505050611577565b600082848151811061262357634e487b7160e01b600052603260045260246000fd5b016020015160f81c905060108111156126485760009950505050505050505050611577565b61267b868260ff168151811061266e57634e487b7160e01b600052603260045260246000fd5b602002602001015161346a565b9450612688600185614c84565b93505061278c565b8451600214156125f05760006126ca6126c38760008151811061201f57634e487b7160e01b600052603260045260246000fd5b8486613498565b83519091506126d98286614c84565b141561273c578d8051906020012061270b8760018151811061201f57634e487b7160e01b600052603260045260246000fd5b80519060200120141561272a5760019950505050505050505050611577565b60009950505050505050505050611577565b806127535760009950505050505050505050611577565b61275d8185614c84565b93506127838660018151811061266e57634e487b7160e01b600052603260045260246000fd5b945061278c9050565b8061279681614eb7565b9150506124fa565b5050505050505050949350505050565b6000610832826000015160038151811061205657634e487b7160e01b600052603260045260246000fd5b6000610832826000015160048151811061205657634e487b7160e01b600052603260045260246000fd5b6000610832826000015160008151811061205657634e487b7160e01b600052603260045260246000fd5b6060610832826000015160018151811061201f57634e487b7160e01b600052603260045260246000fd5b6010546040516320a9cea560e11b81526000918291829182916001600160a01b03909116906341539d4a9061288f908990600401614157565b60a06040518083038186803b1580156128a757600080fd5b505afa1580156128bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128df9190613f51565b5093505092509250612935828b6128f69190614e05565b84878d8d8d8d60405160200161290f949392919061418d565b604051602081830303815290604052805190602001206135ca909392919063ffffffff16565b6129515760405162461bcd60e51b81526004016108f390614927565b9998505050505050505050565b612966613c2b565b604051806020016040528061299984602001516001815181106123c157634e487b7160e01b600052603260045260246000fd5b905292915050565b6129a9613c7f565b82518051839081106129cb57634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b8051600090158015906129f057508151602110155b6129f957600080fd5b6000612a0883602001516136de565b90506000818460000151612a1c9190614e05565b9050600080838660200151612a319190614c84565b9050805191506020831015612a4d57826020036101000a820491505b50949350505050565b6060610832826020015160028151811061201f57634e487b7160e01b600052603260045260246000fd5b612a8a828261106e565b15610d64576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055612abf611488565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008181526001830160205260408120548015612c16576000612b27600183614e05565b8554909150600090612b3b90600190614e05565b9050818114612bbc576000866000018281548110612b6957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612b9a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612bdb57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610bda565b6000915050610bda565b6000826000018281548110612c4557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000612c6c846001600160a01b0316613769565b15612d6857836001600160a01b031663150b7a02612c88611488565b8786866040518563ffffffff1660e01b8152600401612caa94939291906141bc565b602060405180830381600087803b158015612cc457600080fd5b505af1925050508015612cf4575060408051601f3d908101601f19168201909252612cf191810190613fb9565b60015b612d4e573d808015612d22576040519150601f19603f3d011682016040523d82523d6000602084013e612d27565b606091505b508051612d465760405162461bcd60e51b81526004016108f39061437e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611577565b506001611577565b6017805460018082019092557fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c150180546001600160a01b0319166001600160a01b0384169081179091556000908152601860205260408120805460ff19168317905560198054909190612de4908490614c84565b909155505060195460051015610e035760006018600060176005601954612e0b9190614e05565b81548110612e2957634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905550565b60009081526001919091016020526040902054151590565b60006001600160e01b03198216635a05180f60e01b148061083257506108328261376f565b612ea8838383613794565b612eb0610e61565b156109ab5760405162461bcd60e51b81526004016108f390614270565b60606000612edc836002614de6565b612ee7906002614c84565b6001600160401b03811115612f0c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612f36576020820181803683370190505b509050600360fc1b81600081518110612f5f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612f9c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612fc0846002614de6565b612fcb906001614c84565b90505b600181111561305f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061300d57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061303157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361305881614e6b565b9050612fce565b5083156110235760405162461bcd60e51b81526004016108f39061423b565b613086613c7f565b506040805180820190915281518152602082810190820152919050565b60606130ae8261330f565b6130b757600080fd5b60006130c28361381d565b90506000816001600160401b038111156130ec57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561312557816020015b613112613c7f565b81526020019060019003908161310a5790505b509050600061313785602001516136de565b85602001516131469190614c84565b90506000805b848110156131bd5761315d836138a0565b915060405180604001604052808381526020018481525084828151811061319457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526131a98284614c84565b9250806131b581614eb7565b91505061314c565b509195945050505050565b80516060906131d657600080fd5b60006131e583602001516136de565b905060008184600001516131f99190614e05565b90506000816001600160401b0381111561322357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561324d576020820181803683370190505b5090506000816020019050612a4d84876020015161326b9190614c84565b8285613944565b600061327f600284614ed2565b156132c757601082613292600286614c9c565b815181106132b057634e487b7160e01b600052603260045260246000fd5b01602001516132c2919060f81c614ee6565b613305565b6010826132d5600286614c9c565b815181106132f357634e487b7160e01b600052603260045260246000fd5b0160200151613305919060f81c614cb0565b60f81b9392505050565b805160009061332057506000610835565b6020820151805160001a9060c082101561333f57600092505050610835565b5060019392505050565b80613353576109ab565b6020811061338b578251825261336a602084614c84565b9250613377602083614c84565b9150613384602082614e05565b9050613353565b6000600161339a836020614e05565b6133a690610100614d18565b6133b09190614e05565b84518451821691191617835250505050565b80516000906015146133d357600080fd5b610832826129db565b6060600082600001516001600160401b0381111561340a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613434576020820181803683370190505b509050805160001415613448579050610835565b60008160200190506134638460200151828660000151613944565b5092915050565b805160009060211461347b57600080fd5b6000808360200151600161348f9190614c84565b51949350505050565b600080806134a586612063565b9050600081516001600160401b038111156134d057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156134fa576020820181803683370190505b509050845b825161350b9087614c84565b81101561359a57600087828151811061353457634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916905080836135518985614e05565b8151811061356f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535050808061359290614eb7565b9150506134ff565b508080519060200120828051906020012014156135ba57815192506135bf565b600092505b509095945050505050565b6000602082516135da9190614ed2565b156135f75760405162461bcd60e51b81526004016108f3906148ca565b6000602083516136079190614c9c565b9050613614816002614d18565b85106136325760405162461bcd60e51b81526004016108f3906148f8565b60008660205b855181116136d057858101519250613651600289614ed2565b6136855781836040516020016136689291906140a5565b6040516020818303038152906040528051906020012091506136b1565b82826040516020016136989291906140a5565b6040516020818303038152906040528051906020012091505b6136bc600289614c9c565b97506136c9602082614c84565b9050613638565b509094149695505050505050565b8051600090811a60808110156136f8576000915050610835565b60b8811080613713575060c08110801590613713575060f881105b15613722576001915050610835565b60c081101561375757613737600160b8614e1c565b6137449060ff1682614e05565b61374f906001614c84565b915050610835565b613737600160f8614e1c565b50919050565b3b151590565b60006001600160e01b03198216637965db0b60e01b1480610832575061083282613990565b61379f8383836109ab565b6001600160a01b0383166137bb576137b6816139a9565b6137de565b816001600160a01b0316836001600160a01b0316146137de576137de83826139ed565b6001600160a01b0382166137fa576137f581613a8a565b6109ab565b826001600160a01b0316826001600160a01b0316146109ab576109ab8282613b63565b805160009061382e57506000610835565b60008061383e84602001516136de565b846020015161384d9190614c84565b90506000846000015185602001516138659190614c84565b90505b8082101561389757613879826138a0565b6138839083614c84565b91508261388f81614eb7565b935050613868565b50909392505050565b80516000908190811a60808110156138bb5760019150613463565b60b88110156138e1576138cf608082614e05565b6138da906001614c84565b9150613463565b60c081101561390e5760b78103600185019450806020036101000a85510460018201810193505050613463565b60f8811015613922576138cf60c082614e05565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8061394e576109ab565b602081106139865782518252613965602084614c84565b9250613972602083614c84565b915061397f602082614e05565b905061394e565b8061338b576109ab565b6001600160e01b031981166301ffc9a760e01b14919050565b600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b600060016139fa84610f1f565b613a049190614e05565b600083815260096020526040902054909150808214613a57576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090613a9c90600190614e05565b6000838152600b6020526040812054600a8054939450909284908110613ad257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600a8381548110613b0157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480613b4757634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613b6e83610f1f565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b828054613bb390614e82565b90600052602060002090601f016020900481019282613bd55760008555613c1b565b82601f10613bee57805160ff1916838001178555613c1b565b82800160010185558215613c1b579182015b82811115613c1b578251825591602001919060010190613c00565b50613c27929150613c99565b5090565b6040518060200160405280606081525090565b60405180606001604052806060815260200160608152602001600081525090565b6040518060400160405280613c72613c7f565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b5b80821115613c275760008155600101613c9a565b600082601f830112613cbe578081fd5b8135613cd1613ccc82614c5d565b614c34565b818152846020838601011115613ce5578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613d10578081fd5b813561102381614f4a565b600060208284031215613d2c578081fd5b815161102381614f4a565b60008060408385031215613d49578081fd5b8235613d5481614f4a565b91506020830135613d6481614f4a565b809150509250929050565b600080600060608486031215613d83578081fd5b8335613d8e81614f4a565b92506020840135613d9e81614f4a565b929592945050506040919091013590565b60008060008060808587031215613dc4578081fd5b8435613dcf81614f4a565b93506020850135613ddf81614f4a565b92506040850135915060608501356001600160401b03811115613e00578182fd5b613e0c87828801613cae565b91505092959194509250565b60008060408385031215613e2a578182fd5b8235613e3581614f4a565b915060208301358015158114613d64578182fd5b60008060408385031215613e5b578182fd5b8235613e6681614f4a565b946020939093013593505050565b600060a08284031215613e85578081fd5b82601f830112613e93578081fd5b60405160a081018181106001600160401b0382111715613eb557613eb5614f34565b604052808360a08101861015613ec9578384fd5b835b60058110156131bd578151613edf81614f4a565b83526020928301929190910190600101613ecb565b600060208284031215613f05578081fd5b5035919050565b60008060408385031215613f1e578182fd5b823591506020830135613d6481614f4a565b60008060408385031215613f42578182fd5b50508035926020909101359150565b600080600080600060a08688031215613f68578283fd5b855194506020860151935060408601519250606086015191506080860151613f8f81614f4a565b809150509295509295909350565b600060208284031215613fae578081fd5b813561102381614f5f565b600060208284031215613fca578081fd5b815161102381614f5f565b600060208284031215613fe6578081fd5b81356001600160401b03811115613ffb578182fd5b61157784828501613cae565b600060208284031215614018578081fd5b81516001600160401b0381111561402d578182fd5b8201601f8101841361403d578182fd5b805161404b613ccc82614c5d565b81815285602083850101111561405f578384fd5b614070826020830160208601614e3f565b95945050505050565b60008151808452614091816020860160208601614e3f565b601f01601f19169290920160200192915050565b918252602082015260400190565b600083516140c5818460208801614e3f565b8351908301906140d9818360208801614e3f565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008252835161411a816017850160208801614e3f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161414b816028840160208801614e3f565b01602801949350505050565b90815260200190565b60008482528351614178816020850160208801614e3f565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906141ef90830184614079565b9695505050505050565b6001600160a01b038316815260406020820181905260009061157790830184614079565b901515815260200190565b6000602082526110236020830184614079565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b6020808252602a908201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526023908201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260408201526227a7a360e91b606082015260800190565b6020808252600a908201526946443a6d57503a34303160b01b604082015260600190565b60208082526024908201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560408201526314d4d15160e21b606082015260800190565b6020808252603e908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d75737420686176652070617573657220726f6c6520746f2070617573650000606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252600a908201526923221d36aba81d1a181960b11b604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526008908201526723221d369d1a181960c11b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601c908201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604082015260600190565b60208082526008908201526746443a6d3a34303360c01b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601f908201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526025908201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604082015264155393915360da1b606082015260800190565b6020808252603d908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d7573742068617665206d696e74657220726f6c6520746f206d696e74000000606082015260800190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201526f1b995c881b9bdc88185c1c1c9bdd995960821b606082015260800190565b602080825260409082018190527f4552433732315072657365744d696e7465725061757365724175746f49643a20908201527f6d75737420686176652070617573657220726f6c6520746f20756e7061757365606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6040518181016001600160401b0381118282101715614c5557614c55614f34565b604052919050565b60006001600160401b03821115614c7657614c76614f34565b50601f01601f191660200190565b60008219821115614c9757614c97614f08565b500190565b600082614cab57614cab614f1e565b500490565b600060ff831680614cc357614cc3614f1e565b8060ff84160491505092915050565b80825b6001808611614ce45750614d0f565b818704821115614cf657614cf6614f08565b80861615614d0357918102915b9490941c938002614cd5565b94509492505050565b60006110236000198484600082614d3157506001611023565b81614d3e57506000611023565b8160018114614d545760028114614d5e57614d8b565b6001915050611023565b60ff841115614d6f57614d6f614f08565b6001841b915084821115614d8557614d85614f08565b50611023565b5060208310610133831016604e8410600b8410161715614dbe575081810a83811115614db957614db9614f08565b611023565b614dcb8484846001614cd2565b808604821115614ddd57614ddd614f08565b02949350505050565b6000816000190483118215151615614e0057614e00614f08565b500290565b600082821015614e1757614e17614f08565b500390565b600060ff821660ff841680821015614e3657614e36614f08565b90039392505050565b60005b83811015614e5a578181015183820152602001614e42565b838111156112215750506000910152565b600081614e7a57614e7a614f08565b506000190190565b600281046001821680614e9657607f821691505b6020821081141561376357634e487b7160e01b600052602260045260246000fd5b6000600019821415614ecb57614ecb614f08565b5060010190565b600082614ee157614ee1614f1e565b500690565b600060ff831680614ef957614ef9614f1e565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e0357600080fd5b6001600160e01b031981168114610e0357600080fdfea26469706673582212202a44482a54a4b0f2b95eb497fc55914efec46c65f1c4a752f232fb02e4fce56664736f6c63430008000033",
  "devdoc": {
    "details": "This contract should be deployed to Ethereum mainnet and is the ERC721 contract for your NFT.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address)": {
        "details": "Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."
      },
      "mintWithProof(bytes)": {
        "details": "We use Polygon to make registration and random selection inexpensive, then allow eligible minters to generate an L2 proof of bytes. The proof is used as a \"mint pass\" in this function that mints a token if the address has not yet minted. Minting is *expensive* in gas units but users may find this approach preferable to FCFS gas auctions.",
        "params": {
          "inputData": "proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "receiveMessage(bytes)": {
        "details": "We use Polygon to make registration and random selection inexpensive, then pass the list of eligible buying accounts to this contract.",
        "params": {
          "inputData": "proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      }
    },
    "title": "NFTStateTransfer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintWithProof(bytes)": {
        "notice": "Mint token with L2 proof"
      },
      "publicMint()": {
        "notice": "Public mint function for eligible minters"
      },
      "receiveMessage(bytes)": {
        "notice": "Receive list of eligible purchasers from L2"
      },
      "setPrice(uint256)": {
        "notice": "I have a regrettable FOMO ramp in my first project so I want to be able to adjust price as I please"
      }
    },
    "notice": "This is a reference implementation for a fair NFT drop.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2679,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2674_storage)"
      },
      {
        "astId": 2980,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)6940_storage)"
      },
      {
        "astId": 4109,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4111,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4115,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4119,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4123,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4129,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5078,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5082,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5085,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5089,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3360,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_paused",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 5533,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Counter)6009_storage"
      },
      {
        "astId": 5535,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 2353,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "fxRoot",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IFxStateSender)2303"
      },
      {
        "astId": 2356,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(ICheckpointManager)2321"
      },
      {
        "astId": 2358,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 2362,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "processedExits",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3246,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "_owner",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 8085,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "mintPrice",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 8089,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "remainingTokens",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 8091,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "latestData",
        "offset": 0,
        "slot": "22",
        "type": "t_bytes_storage"
      },
      {
        "astId": 8094,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "allMinters",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8098,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "approvedMinters",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8100,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "approvedMintersEndIndex",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 8104,
        "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
        "label": "exhaustedMinters",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)2321": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)2303": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)6940_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6940_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2674_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2674_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)6940_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6939,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6639_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)6009_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 6008,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)2674_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2671,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2673,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6639_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6634,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6638,
            "contract": "contracts/NFTStateTransfer/NFTStateTransfer.sol:NFTStateTransfer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}