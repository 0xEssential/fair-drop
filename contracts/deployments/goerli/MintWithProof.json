{
  "address": "0x14033138F2d0f331C8c7C1c4d156cDa0b9d95d17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "mintWithProof",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbcdf65442a835269c728af7df0c36dbb115eda984153f9840c9a493fe8f060c2",
  "receipt": {
    "to": null,
    "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
    "contractAddress": "0x14033138F2d0f331C8c7C1c4d156cDa0b9d95d17",
    "transactionIndex": 8,
    "gasUsed": "3291024",
    "logsBloom": "0x
    "blockHash": "0x0a27a743b223e0d5bdcf86c0b4d94351714c2b1072a87a36bb8c64a084b19605",
    "transactionHash": "0xbcdf65442a835269c728af7df0c36dbb115eda984153f9840c9a493fe8f060c2",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 5843116,
        "transactionHash": "0xbcdf65442a835269c728af7df0c36dbb115eda984153f9840c9a493fe8f060c2",
        "address": "0x14033138F2d0f331C8c7C1c4d156cDa0b9d95d17",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x0a27a743b223e0d5bdcf86c0b4d94351714c2b1072a87a36bb8c64a084b19605"
      }
    ],
    "blockNumber": 5843116,
    "cumulativeGasUsed": "3943018",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"
  ],
  "solcInputHash": "e8e498fd7836ba89d3f140676a8f4ba8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"mintWithProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract should be deployed to Ethereum mainnet and is the ERC721 contract for your NFT.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintWithProof(bytes)\":{\"details\":\"We use Polygon to make registration and random selection inexpensive, then allow eligible minters to generate an L2 proof of bytes. Once the Polygon CheckpointManager indexes the L2 transaction, the proof can be used as a \\\"mint pass\\\" in this function. Minting is *expensive* in gas units but users may find this approach preferable to FCFS gas auctions.\",\"params\":{\"inputData\":\"proof generated for transaction via Matic SDK - see https://docs.polygon.technology/docs/develop/l1-l2-communication/state-transfer\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"receiveMessage(bytes)\":{\"params\":{\"inputData\":\"proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"MintWithProof\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintWithProof(bytes)\":{\"notice\":\"Mint token with L2 proof\"},\"receiveMessage(bytes)\":{\"notice\":\"no-op override\"},\"setPrice(uint256)\":{\"notice\":\"I have a regrettable FOMO ramp in my first project so I want to be able to adjust price as I please\"}},\"notice\":\"This is a reference implementation for a fair NFT drop.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintWithProof/MintWithProof.sol\":\"MintWithProof\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"@maticnetwork/fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary Constants {\\n    // How long does an eligible buyer have to purchase\\n    uint256 internal constant WINDOW = 10 minutes;\\n    // How many addresses are eligible to purchase per window\\n    uint256 internal constant WINDOW_PARTICIPANTS = 5;\\n\\n    // How many NFTs in entire drop?\\n    uint256 internal constant MAX_TOKEN_COUNT = 5;\\n}\\n\",\"keccak256\":\"0x0791cab540f2e709cb5f565df193836bf1c1bcc329d1b220ef8236ee4424d1a5\",\"license\":\"AGPL-1.0\"},\"contracts/MintWithProof/MintWithProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport { Constants } from \\\"../Libraries/Constants.sol\\\";\\n\\n/**\\n * @title MintWithProof\\n * @notice This is a reference implementation for a fair NFT drop.\\n * @dev This contract should be deployed to Ethereum mainnet and is the ERC721 contract for your NFT.\\n */\\n\\ncontract MintWithProof is ERC721, FxBaseRootTunnel, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdTracker;\\n    uint256 public mintPrice = 0.1 ether;\\n    uint256 public remainingTokens = Constants.MAX_TOKEN_COUNT;\\n    mapping(address => bool) internal exhaustedMinters;\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot\\n    )\\n    FxBaseRootTunnel(_checkpointManager, _fxRoot)\\n    ERC721(\\n        \\\"0xEssential FairDrop\\\",\\n        \\\"FAIRDROP\\\"\\n    )\\n    {} // solhint-disable-line no-empty-blocks\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return \\\"ipfs://bafybeicoe6oe2yoeubcpljqqec3vul4n4l7zz7adgrjegijlw3ndx34vce/\\\";\\n    }\\n\\n    /**\\n    * @notice Mint token with L2 proof\\n    * @dev We use Polygon to make registration and random selection inexpensive, then allow eligible minters\\n    * to generate an L2 proof of bytes. Once the Polygon CheckpointManager indexes the L2 transaction, the\\n    * proof can be used as a \\\"mint pass\\\" in this function. Minting is *expensive* in gas units but users may\\n    * find this approach preferable to FCFS gas auctions.\\n    *\\n    * @param inputData proof generated for transaction via Matic SDK - see\\n    * https://docs.polygon.technology/docs/develop/l1-l2-communication/state-transfer\\n    */\\n    function mintWithProof(bytes memory inputData) public payable {\\n        require(msg.value == mintPrice, \\\"FD:mWP:402\\\");\\n        require(!exhaustedMinters[msg.sender], \\\"FD:mWP:401\\\");\\n\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        address minter = abi.decode(message, (address));\\n        require(minter == msg.sender, \\\"FD:mWP:401\\\");\\n\\n        _mint(minter, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n        remainingTokens -= 1;\\n        _sendMessageToChild(abi.encodePacked(remainingTokens));\\n\\n        exhaustedMinters[msg.sender] = true;\\n    }\\n\\n    /**\\n    * @notice I have a regrettable FOMO ramp in my first project\\n    * so I want to be able to adjust price as I please\\n    */\\n    function setPrice(uint256 price) public onlyOwner {\\n        mintPrice = price;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    /**\\n    * @notice no-op override\\n    * @param inputData proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer\\n    */\\n    function receiveMessage(bytes memory inputData) public override onlyOwner {}\\n\\n    /**\\n    * @notice no-op override\\n    * @param data bytes\\n    */\\n    function _processMessageFromChild(bytes memory data) internal override {}\\n\\n    receive() external payable {} // solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x1de1a7753d51175689a9251a00f00c65af5fa6cba0357882cc0f3ee26767a59f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405267016345785d8a0000600c556005600d553480156200002257600080fd5b5060405162003a3838038062003a3883398101604081905262000045916200022c565b604080518082018252601481527f3078457373656e7469616c204661697244726f7000000000000000000000000060208083019182528351808501909452600884526704641495244524f560c41b90840152815185938593929091620000ae9160009162000169565b508051620000c490600190602084019062000169565b5050600780546001600160a01b039485166001600160a01b0319918216179091556006805493909416921691909117909155506200010b6200010562000113565b62000117565b5050620002a0565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001779062000263565b90600052602060002090601f0160209004810192826200019b5760008555620001e6565b82601f10620001b657805160ff1916838001178555620001e6565b82800160010185558215620001e6579182015b82811115620001e6578251825591602001919060010190620001c9565b50620001f4929150620001f8565b5090565b5b80821115620001f45760008155600101620001f9565b80516001600160a01b03811681146200022757600080fd5b919050565b600080604083850312156200023f578182fd5b6200024a836200020f565b91506200025a602084016200020f565b90509250929050565b6002810460018216806200027857607f821691505b602082108114156200029a57634e487b7160e01b600052602260045260246000fd5b50919050565b61378880620002b06000396000f3fe6080604052600436106101bb5760003560e01c80638da5cb5b116100ec578063bf5839031161008a578063de9b771f11610064578063de9b771f1461048b578063e985e9c5146104a0578063f2fde38b146104c0578063f953cec7146104e0576101c2565b8063bf58390314610441578063c0857ba014610456578063c87b56dd1461046b576101c2565b8063972c4928116100c6578063972c4928146103cc578063a22cb465146103e1578063aea4e49e14610401578063b88d4fde14610421576101c2565b80638da5cb5b1461038257806391b7f5ed1461039757806395d89b41146103b7576101c2565b80633ccfd60b116101595780636352211e116101335780636352211e146103185780636817c76c1461033857806370a082311461034d578063715018a61461036d576101c2565b80633ccfd60b146102c357806342842e0e146102d8578063607f2d42146102f8576101c2565b8063095ea7b311610195578063095ea7b31461024c5780630e387de61461026e57806323b872dd1461029057806330438e01146102b0576101c2565b806301ffc9a7146101c757806306fdde03146101fd578063081812fc1461021f576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101e76101e2366004612b2d565b610500565b6040516101f49190612d38565b60405180910390f35b34801561020957600080fd5b50610212610548565b6040516101f49190612d43565b34801561022b57600080fd5b5061023f61023a366004612ac9565b6105da565b6040516101f49190612cc3565b34801561025857600080fd5b5061026c610267366004612a9e565b610626565b005b34801561027a57600080fd5b506102836106be565b6040516101f49190612c72565b34801561029c57600080fd5b5061026c6102ab3660046129c4565b6106e2565b61026c6102be366004612b65565b61071a565b3480156102cf57600080fd5b5061026c610836565b3480156102e457600080fd5b5061026c6102f33660046129c4565b6108a8565b34801561030457600080fd5b506101e7610313366004612ac9565b6108c3565b34801561032457600080fd5b5061023f610333366004612ac9565b6108d8565b34801561034457600080fd5b5061028361090d565b34801561035957600080fd5b50610283610368366004612954565b610913565b34801561037957600080fd5b5061026c610957565b34801561038e57600080fd5b5061023f6109a2565b3480156103a357600080fd5b5061026c6103b2366004612ac9565b6109b1565b3480156103c357600080fd5b506102126109f5565b3480156103d857600080fd5b5061023f610a04565b3480156103ed57600080fd5b5061026c6103fc366004612a6d565b610a13565b34801561040d57600080fd5b5061026c61041c366004612954565b610ae1565b34801561042d57600080fd5b5061026c61043c366004612a04565b610b2c565b34801561044d57600080fd5b50610283610b6b565b34801561046257600080fd5b5061023f610b71565b34801561047757600080fd5b50610212610486366004612ac9565b610b80565b34801561049757600080fd5b5061023f610c03565b3480156104ac57600080fd5b506101e76104bb36600461298c565b610c12565b3480156104cc57600080fd5b5061026c6104db366004612954565b610c40565b3480156104ec57600080fd5b5061026c6104fb366004612b65565b610cb1565b60006001600160e01b031982166380ac58cd60e01b148061053157506001600160e01b03198216635b5e139f60e01b145b80610540575061054082610cf0565b90505b919050565b6060600080546105579061361c565b80601f01602080910402602001604051908101604052809291908181526020018280546105839061361c565b80156105d05780601f106105a5576101008083540402835291602001916105d0565b820191906000526020600020905b8154815290600101906020018083116105b357829003601f168201915b5050505050905090565b60006105e582610d09565b61060a5760405162461bcd60e51b81526004016106019061312a565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610631826108d8565b9050806001600160a01b0316836001600160a01b031614156106655760405162461bcd60e51b8152600401610601906132d7565b806001600160a01b0316610677610d26565b6001600160a01b031614806106935750610693816104bb610d26565b6106af5760405162461bcd60e51b815260040161060190612fe1565b6106b98383610d2a565b505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6106f36106ed610d26565b82610d98565b61070f5760405162461bcd60e51b81526004016106019061334f565b6106b9838383610e1d565b600c54341461073b5760405162461bcd60e51b8152600401610601906130d1565b336000908152600e602052604090205460ff161561076b5760405162461bcd60e51b815260040161060190612eb2565b600061077682610f4a565b905060008180602001905181019061078e9190612970565b90506001600160a01b03811633146107b85760405162461bcd60e51b815260040161060190612eb2565b6107cb816107c6600b611148565b61114c565b6107d5600b61122b565b6001600d60008282546107e891906135b6565b9091555050600d546040516108179161080391602001612c72565b604051602081830303815290604052611234565b5050336000908152600e60205260409020805460ff1916600117905550565b61083e610d26565b6001600160a01b031661084f6109a2565b6001600160a01b0316146108755760405162461bcd60e51b815260040161060190613176565b6040514790339082156108fc029083906000818181858888f193505050501580156108a4573d6000803e3d6000fd5b5050565b6106b983838360405180602001604052806000815250610b2c565b60096020526000908152604090205460ff1681565b6000818152600260205260408120546001600160a01b0316806105405760405162461bcd60e51b815260040161060190613088565b600c5481565b60006001600160a01b03821661093b5760405162461bcd60e51b81526004016106019061303e565b506001600160a01b031660009081526003602052604090205490565b61095f610d26565b6001600160a01b03166109706109a2565b6001600160a01b0316146109965760405162461bcd60e51b815260040161060190613176565b6109a0600061129f565b565b600a546001600160a01b031690565b6109b9610d26565b6001600160a01b03166109ca6109a2565b6001600160a01b0316146109f05760405162461bcd60e51b815260040161060190613176565b600c55565b6060600180546105579061361c565b6008546001600160a01b031681565b610a1b610d26565b6001600160a01b0316826001600160a01b03161415610a4c5760405162461bcd60e51b815260040161060190612f5e565b8060056000610a59610d26565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610a9d610d26565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ad59190612d38565b60405180910390a35050565b6008546001600160a01b031615610b0a5760405162461bcd60e51b815260040161060190612d56565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b610b3d610b37610d26565b83610d98565b610b595760405162461bcd60e51b81526004016106019061334f565b610b65848484846112f1565b50505050565b600d5481565b6007546001600160a01b031681565b6060610b8b82610d09565b610ba75760405162461bcd60e51b8152600401610601906131f4565b6000610bb1611324565b90506000815111610bd15760405180602001604052806000815250610bfc565b80610bdb84611344565b604051602001610bec929190612c43565b6040516020818303038152906040525b9392505050565b6006546001600160a01b031681565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610c48610d26565b6001600160a01b0316610c596109a2565b6001600160a01b031614610c7f5760405162461bcd60e51b815260040161060190613176565b6001600160a01b038116610ca55760405162461bcd60e51b815260040161060190612df2565b610cae8161129f565b50565b610cb9610d26565b6001600160a01b0316610cca6109a2565b6001600160a01b031614610cae5760405162461bcd60e51b815260040161060190613176565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d5f826108d8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610da382610d09565b610dbf5760405162461bcd60e51b815260040161060190612f95565b6000610dca836108d8565b9050806001600160a01b0316846001600160a01b03161480610e055750836001600160a01b0316610dfa846105da565b6001600160a01b0316145b80610e155750610e158185610c12565b949350505050565b826001600160a01b0316610e30826108d8565b6001600160a01b031614610e565760405162461bcd60e51b8152600401610601906131ab565b6001600160a01b038216610e7c5760405162461bcd60e51b815260040161060190612f1a565b610e878383836106b9565b610e92600082610d2a565b6001600160a01b0383166000908152600360205260408120805460019290610ebb9084906135b6565b90915550506001600160a01b0382166000908152600360205260408120805460019290610ee9908490613435565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60606000610f578361145e565b90506000610f648261148e565b90506000610f71836114c5565b9050600081610f7f846114fc565b610f88866116f1565b604051602001610f9a93929190612c7b565b60408051601f1981840301815291815281516020928301206000818152600990935291205490915060ff1615610fe25760405162461bcd60e51b815260040161060190612ed6565b6000818152600960205260408120805460ff191660011790556110048561171b565b9050600061101182611828565b905061101c816118b7565b6008546001600160a01b039081169116146110495760405162461bcd60e51b8152600401610601906133a0565b6000611054876118ee565b905061107261106284611918565b8761106c8a61191f565b84611949565b61108e5760405162461bcd60e51b815260040161060190612e6f565b6110bc8561109b89611c47565b6110a48a611c71565b846110ae8c611c9b565b6110b78d611cc5565b611cef565b5060006110c883611df7565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366110fe6110f9836000611e3a565b611e74565b1461111b5760405162461bcd60e51b815260040161060190613318565b600061112684611eef565b8060200190518101906111399190612b97565b9b9a5050505050505050505050565b5490565b6001600160a01b0382166111725760405162461bcd60e51b8152600401610601906130f5565b61117b81610d09565b156111985760405162461bcd60e51b815260040161060190612e38565b6111a4600083836106b9565b6001600160a01b03821660009081526003602052604081208054600192906111cd908490613435565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b60065460085460405163b472047760e01b81526001600160a01b039283169263b47204779261126a929116908590600401612d14565b600060405180830381600087803b15801561128457600080fd5b505af1158015611298573d6000803e3d6000fd5b5050505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6112fc848484610e1d565b61130884848484611f19565b610b655760405162461bcd60e51b815260040161060190612da0565b606060405180608001604052806043815260200161371060439139905090565b60608161136957506040805180820190915260018152600360fc1b6020820152610543565b8160005b8115611393578061137d81613651565b915061138c9050600a8361344d565b915061136d565b6000816001600160401b038111156113bb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156113e5576020820181803683370190505b5090505b8415610e15576113fa6001836135b6565b9150611407600a8661366c565b611412906030613435565b60f81b81838151811061143557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611457600a8661344d565b94506113e9565b611466612895565b600061147961147484612031565b612056565b60408051602081019091529081529392505050565b606061054082600001516008815181106114b857634e487b7160e01b600052603260045260246000fd5b602002602001015161217b565b600061054082600001516002815181106114ef57634e487b7160e01b600052603260045260246000fd5b6020026020010151611e74565b6040805160208101909152600081528151606091901561054057600080611524600086612225565b60f81c9050600181148061153b57508060ff166003145b156115fe576001855160026115509190613597565b61155a91906135b6565b6001600160401b0381111561157f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115a9576020820181803683370190505b50925060006115b9600187612225565b905080846000815181106115dd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600192505061166f565b60028551600261160e9190613597565b61161891906135b6565b6001600160401b0381111561163d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611667576020820181803683370190505b509250600091505b60ff82165b83518110156116e75761169e61168d60ff8516836135b6565b611698906002613435565b87612225565b8482815181106116be57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806116df81613651565b915050611674565b5050509050919050565b600061054082600001516009815181106114ef57634e487b7160e01b600052603260045260246000fd5b6117236128a8565b61174b82600001516006815181106114b857634e487b7160e01b600052603260045260246000fd5b6020820181905260009061175e90612031565b9050611769816122c2565b1561177e5761177781612056565b8252611814565b60208201518051600090611794906001906135b6565b6001600160401b038111156117b957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117e3576020820181803683370190505b509050600080836021019150826020019050611801828285516122fc565b61180d61147484612031565b8652505050505b61181d836116f1565b604083015250919050565b6118306128c9565b6000611867836000015160038151811061185a57634e487b7160e01b600052603260045260246000fd5b6020026020010151612056565b83604001518151811061188a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016118ae83612056565b90529392505050565b600061054082602001516000815181106118e157634e487b7160e01b600052603260045260246000fd5b6020026020010151612375565b600061054082600001516005815181106114ef57634e487b7160e01b600052603260045260246000fd5b6020015190565b606061054082600001516007815181106114b857634e487b7160e01b600052603260045260246000fd5b60008061195584612031565b9050600061196282612056565b9050606080856000806119748b6114fc565b9050805160001415611990576000975050505050505050610e15565b60005b8651811015611c375781518311156119b657600098505050505050505050610e15565b6119e68782815181106119d957634e487b7160e01b600052603260045260246000fd5b602002602001015161238f565b955085805190602001208414611a0757600098505050505050505050610e15565b611a2a87828151811061185a57634e487b7160e01b600052603260045260246000fd5b9450845160111415611b29578151831415611a9a578c80519060200120611a6b866010815181106114b857634e487b7160e01b600052603260045260246000fd5b805190602001201415611a8957600198505050505050505050610e15565b600098505050505050505050610e15565b6000828481518110611abc57634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506010811115611ae15760009950505050505050505050610e15565b611b14868260ff1681518110611b0757634e487b7160e01b600052603260045260246000fd5b602002602001015161241d565b9450611b21600185613435565b935050611c25565b845160021415611a89576000611b63611b5c876000815181106114b857634e487b7160e01b600052603260045260246000fd5b848661244b565b8351909150611b728286613435565b1415611bd5578d80519060200120611ba4876001815181106114b857634e487b7160e01b600052603260045260246000fd5b805190602001201415611bc35760019950505050505050505050610e15565b60009950505050505050505050610e15565b80611bec5760009950505050505050505050610e15565b611bf68185613435565b9350611c1c86600181518110611b0757634e487b7160e01b600052603260045260246000fd5b9450611c259050565b80611c2f81613651565b915050611993565b5050505050505050949350505050565b600061054082600001516003815181106114ef57634e487b7160e01b600052603260045260246000fd5b600061054082600001516004815181106114ef57634e487b7160e01b600052603260045260246000fd5b600061054082600001516000815181106114ef57634e487b7160e01b600052603260045260246000fd5b606061054082600001516001815181106114b857634e487b7160e01b600052603260045260246000fd5b6007546040516320a9cea560e11b81526000918291829182916001600160a01b03909116906341539d4a90611d28908990600401612c72565b60a06040518083038186803b158015611d4057600080fd5b505afa158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d789190612ae1565b5093505092509250611dce828b611d8f91906135b6565b84878d8d8d8d604051602001611da89493929190612ca8565b6040516020818303038152906040528051906020012061257d909392919063ffffffff16565b611dea5760405162461bcd60e51b8152600401610601906132a0565b9998505050505050505050565b611dff612895565b6040518060200160405280611e32846020015160018151811061185a57634e487b7160e01b600052603260045260246000fd5b905292915050565b611e426128e9565b8251805183908110611e6457634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611e8957508151602110155b611e9257600080fd5b6000611ea18360200151612691565b90506000818460000151611eb591906135b6565b9050600080838660200151611eca9190613435565b9050805191506020831015611ee657826020036101000a820491505b50949350505050565b606061054082602001516002815181106114b857634e487b7160e01b600052603260045260246000fd5b6000611f2d846001600160a01b031661271c565b1561202957836001600160a01b031663150b7a02611f49610d26565b8786866040518563ffffffff1660e01b8152600401611f6b9493929190612cd7565b602060405180830381600087803b158015611f8557600080fd5b505af1925050508015611fb5575060408051601f3d908101601f19168201909252611fb291810190612b49565b60015b61200f573d808015611fe3576040519150601f19603f3d011682016040523d82523d6000602084013e611fe8565b606091505b5080516120075760405162461bcd60e51b815260040161060190612da0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e15565b506001610e15565b6120396128e9565b506040805180820190915281518152602082810190820152919050565b6060612061826122c2565b61206a57600080fd5b600061207583612722565b90506000816001600160401b0381111561209f57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156120d857816020015b6120c56128e9565b8152602001906001900390816120bd5790505b50905060006120ea8560200151612691565b85602001516120f99190613435565b90506000805b8481101561217057612110836127a5565b915060405180604001604052808381526020018481525084828151811061214757634e487b7160e01b600052603260045260246000fd5b602090810291909101015261215c8284613435565b92508061216881613651565b9150506120ff565b509195945050505050565b805160609061218957600080fd5b60006121988360200151612691565b905060008184600001516121ac91906135b6565b90506000816001600160401b038111156121d657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612200576020820181803683370190505b5090506000816020019050611ee684876020015161221e9190613435565b8285612849565b600061223260028461366c565b1561227a5760108261224560028661344d565b8151811061226357634e487b7160e01b600052603260045260246000fd5b0160200151612275919060f81c613680565b6122b8565b60108261228860028661344d565b815181106122a657634e487b7160e01b600052603260045260246000fd5b01602001516122b8919060f81c613461565b60f81b9392505050565b80516000906122d357506000610543565b6020820151805160001a9060c08210156122f257600092505050610543565b5060019392505050565b80612306576106b9565b6020811061233e578251825261231d602084613435565b925061232a602083613435565b91506123376020826135b6565b9050612306565b6000600161234d8360206135b6565b612359906101006134c9565b61236391906135b6565b84518451821691191617835250505050565b805160009060151461238657600080fd5b61054082611e74565b6060600082600001516001600160401b038111156123bd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123e7576020820181803683370190505b5090508051600014156123fb579050610543565b60008160200190506124168460200151828660000151612849565b5092915050565b805160009060211461242e57600080fd5b600080836020015160016124429190613435565b51949350505050565b60008080612458866114fc565b9050600081516001600160401b0381111561248357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156124ad576020820181803683370190505b509050845b82516124be9087613435565b81101561254d5760008782815181106124e757634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319169050808361250489856135b6565b8151811061252257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535050808061254590613651565b9150506124b2565b5080805190602001208280519060200120141561256d5781519250612572565b600092505b509095945050505050565b60006020825161258d919061366c565b156125aa5760405162461bcd60e51b815260040161060190613243565b6000602083516125ba919061344d565b90506125c78160026134c9565b85106125e55760405162461bcd60e51b815260040161060190613271565b60008660205b855181116126835785810151925061260460028961366c565b61263857818360405160200161261b929190612c35565b604051602081830303815290604052805190602001209150612664565b828260405160200161264b929190612c35565b6040516020818303038152906040528051906020012091505b61266f60028961344d565b975061267c602082613435565b90506125eb565b509094149695505050505050565b8051600090811a60808110156126ab576000915050610543565b60b88110806126c6575060c081108015906126c6575060f881105b156126d5576001915050610543565b60c081101561270a576126ea600160b86135cd565b6126f79060ff16826135b6565b612702906001613435565b915050610543565b6126ea600160f86135cd565b50919050565b3b151590565b805160009061273357506000610543565b6000806127438460200151612691565b84602001516127529190613435565b905060008460000151856020015161276a9190613435565b90505b8082101561279c5761277e826127a5565b6127889083613435565b91508261279481613651565b93505061276d565b50909392505050565b80516000908190811a60808110156127c05760019150612416565b60b88110156127e6576127d46080826135b6565b6127df906001613435565b9150612416565b60c08110156128135760b78103600185019450806020036101000a85510460018201810193505050612416565b60f8811015612827576127d460c0826135b6565b60019390930151602084900360f7016101000a900490920160f5190192915050565b80612853576106b9565b6020811061288b578251825261286a602084613435565b9250612877602083613435565b91506128846020826135b6565b9050612853565b8061233e576106b9565b6040518060200160405280606081525090565b60405180606001604052806060815260200160608152602001600081525090565b60405180604001604052806128dc6128e9565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b600082601f830112612913578081fd5b81356129266129218261340e565b6133e5565b81815284602083860101111561293a578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612965578081fd5b8135610bfc816136e4565b600060208284031215612981578081fd5b8151610bfc816136e4565b6000806040838503121561299e578081fd5b82356129a9816136e4565b915060208301356129b9816136e4565b809150509250929050565b6000806000606084860312156129d8578081fd5b83356129e3816136e4565b925060208401356129f3816136e4565b929592945050506040919091013590565b60008060008060808587031215612a19578081fd5b8435612a24816136e4565b93506020850135612a34816136e4565b92506040850135915060608501356001600160401b03811115612a55578182fd5b612a6187828801612903565b91505092959194509250565b60008060408385031215612a7f578182fd5b8235612a8a816136e4565b9150602083013580151581146129b9578182fd5b60008060408385031215612ab0578182fd5b8235612abb816136e4565b946020939093013593505050565b600060208284031215612ada578081fd5b5035919050565b600080600080600060a08688031215612af8578081fd5b855194506020860151935060408601519250606086015191506080860151612b1f816136e4565b809150509295509295909350565b600060208284031215612b3e578081fd5b8135610bfc816136f9565b600060208284031215612b5a578081fd5b8151610bfc816136f9565b600060208284031215612b76578081fd5b81356001600160401b03811115612b8b578182fd5b610e1584828501612903565b600060208284031215612ba8578081fd5b81516001600160401b03811115612bbd578182fd5b8201601f81018413612bcd578182fd5b8051612bdb6129218261340e565b818152856020838501011115612bef578384fd5b612c008260208301602086016135f0565b95945050505050565b60008151808452612c218160208601602086016135f0565b601f01601f19169290920160200192915050565b918252602082015260400190565b60008351612c558184602088016135f0565b835190830190612c698183602088016135f0565b01949350505050565b90815260200190565b60008482528351612c938160208501602088016135f0565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d0a90830184612c09565b9695505050505050565b6001600160a01b0383168152604060208201819052600090610e1590830184612c09565b901515815260200190565b600060208252610bfc6020830184612c09565b6020808252602a908201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526023908201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260408201526227a7a360e91b606082015260800190565b6020808252600a908201526946443a6d57503a34303160b01b604082015260600190565b60208082526024908201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560408201526314d4d15160e21b606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252600a908201526923221d36aba81d1a181960b11b604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601c908201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601f908201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526025908201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604082015264155393915360da1b606082015260800190565b6040518181016001600160401b0381118282101715613406576134066136ce565b604052919050565b60006001600160401b03821115613427576134276136ce565b50601f01601f191660200190565b60008219821115613448576134486136a2565b500190565b60008261345c5761345c6136b8565b500490565b600060ff831680613474576134746136b8565b8060ff84160491505092915050565b80825b600180861161349557506134c0565b8187048211156134a7576134a76136a2565b808616156134b457918102915b9490941c938002613486565b94509492505050565b6000610bfc60001984846000826134e257506001610bfc565b816134ef57506000610bfc565b8160018114613505576002811461350f5761353c565b6001915050610bfc565b60ff841115613520576135206136a2565b6001841b915084821115613536576135366136a2565b50610bfc565b5060208310610133831016604e8410600b841016171561356f575081810a8381111561356a5761356a6136a2565b610bfc565b61357c8484846001613483565b80860482111561358e5761358e6136a2565b02949350505050565b60008160001904831182151516156135b1576135b16136a2565b500290565b6000828210156135c8576135c86136a2565b500390565b600060ff821660ff8416808210156135e7576135e76136a2565b90039392505050565b60005b8381101561360b5781810151838201526020016135f3565b83811115610b655750506000910152565b60028104600182168061363057607f821691505b6020821081141561271657634e487b7160e01b600052602260045260246000fd5b6000600019821415613665576136656136a2565b5060010190565b60008261367b5761367b6136b8565b500690565b600060ff831680613693576136936136b8565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610cae57600080fd5b6001600160e01b031981168114610cae57600080fdfe697066733a2f2f62616679626569636f65366f6532796f65756263706c6a717165633376756c346e346c377a7a37616467726a6567696a6c77336e647833347663652fa2646970667358221220367b96bea5047c9088abb896a1334e8dbf4107963c8959f44596b11c44c7126a64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80638da5cb5b116100ec578063bf5839031161008a578063de9b771f11610064578063de9b771f1461048b578063e985e9c5146104a0578063f2fde38b146104c0578063f953cec7146104e0576101c2565b8063bf58390314610441578063c0857ba014610456578063c87b56dd1461046b576101c2565b8063972c4928116100c6578063972c4928146103cc578063a22cb465146103e1578063aea4e49e14610401578063b88d4fde14610421576101c2565b80638da5cb5b1461038257806391b7f5ed1461039757806395d89b41146103b7576101c2565b80633ccfd60b116101595780636352211e116101335780636352211e146103185780636817c76c1461033857806370a082311461034d578063715018a61461036d576101c2565b80633ccfd60b146102c357806342842e0e146102d8578063607f2d42146102f8576101c2565b8063095ea7b311610195578063095ea7b31461024c5780630e387de61461026e57806323b872dd1461029057806330438e01146102b0576101c2565b806301ffc9a7146101c757806306fdde03146101fd578063081812fc1461021f576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101e76101e2366004612b2d565b610500565b6040516101f49190612d38565b60405180910390f35b34801561020957600080fd5b50610212610548565b6040516101f49190612d43565b34801561022b57600080fd5b5061023f61023a366004612ac9565b6105da565b6040516101f49190612cc3565b34801561025857600080fd5b5061026c610267366004612a9e565b610626565b005b34801561027a57600080fd5b506102836106be565b6040516101f49190612c72565b34801561029c57600080fd5b5061026c6102ab3660046129c4565b6106e2565b61026c6102be366004612b65565b61071a565b3480156102cf57600080fd5b5061026c610836565b3480156102e457600080fd5b5061026c6102f33660046129c4565b6108a8565b34801561030457600080fd5b506101e7610313366004612ac9565b6108c3565b34801561032457600080fd5b5061023f610333366004612ac9565b6108d8565b34801561034457600080fd5b5061028361090d565b34801561035957600080fd5b50610283610368366004612954565b610913565b34801561037957600080fd5b5061026c610957565b34801561038e57600080fd5b5061023f6109a2565b3480156103a357600080fd5b5061026c6103b2366004612ac9565b6109b1565b3480156103c357600080fd5b506102126109f5565b3480156103d857600080fd5b5061023f610a04565b3480156103ed57600080fd5b5061026c6103fc366004612a6d565b610a13565b34801561040d57600080fd5b5061026c61041c366004612954565b610ae1565b34801561042d57600080fd5b5061026c61043c366004612a04565b610b2c565b34801561044d57600080fd5b50610283610b6b565b34801561046257600080fd5b5061023f610b71565b34801561047757600080fd5b50610212610486366004612ac9565b610b80565b34801561049757600080fd5b5061023f610c03565b3480156104ac57600080fd5b506101e76104bb36600461298c565b610c12565b3480156104cc57600080fd5b5061026c6104db366004612954565b610c40565b3480156104ec57600080fd5b5061026c6104fb366004612b65565b610cb1565b60006001600160e01b031982166380ac58cd60e01b148061053157506001600160e01b03198216635b5e139f60e01b145b80610540575061054082610cf0565b90505b919050565b6060600080546105579061361c565b80601f01602080910402602001604051908101604052809291908181526020018280546105839061361c565b80156105d05780601f106105a5576101008083540402835291602001916105d0565b820191906000526020600020905b8154815290600101906020018083116105b357829003601f168201915b5050505050905090565b60006105e582610d09565b61060a5760405162461bcd60e51b81526004016106019061312a565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610631826108d8565b9050806001600160a01b0316836001600160a01b031614156106655760405162461bcd60e51b8152600401610601906132d7565b806001600160a01b0316610677610d26565b6001600160a01b031614806106935750610693816104bb610d26565b6106af5760405162461bcd60e51b815260040161060190612fe1565b6106b98383610d2a565b505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6106f36106ed610d26565b82610d98565b61070f5760405162461bcd60e51b81526004016106019061334f565b6106b9838383610e1d565b600c54341461073b5760405162461bcd60e51b8152600401610601906130d1565b336000908152600e602052604090205460ff161561076b5760405162461bcd60e51b815260040161060190612eb2565b600061077682610f4a565b905060008180602001905181019061078e9190612970565b90506001600160a01b03811633146107b85760405162461bcd60e51b815260040161060190612eb2565b6107cb816107c6600b611148565b61114c565b6107d5600b61122b565b6001600d60008282546107e891906135b6565b9091555050600d546040516108179161080391602001612c72565b604051602081830303815290604052611234565b5050336000908152600e60205260409020805460ff1916600117905550565b61083e610d26565b6001600160a01b031661084f6109a2565b6001600160a01b0316146108755760405162461bcd60e51b815260040161060190613176565b6040514790339082156108fc029083906000818181858888f193505050501580156108a4573d6000803e3d6000fd5b5050565b6106b983838360405180602001604052806000815250610b2c565b60096020526000908152604090205460ff1681565b6000818152600260205260408120546001600160a01b0316806105405760405162461bcd60e51b815260040161060190613088565b600c5481565b60006001600160a01b03821661093b5760405162461bcd60e51b81526004016106019061303e565b506001600160a01b031660009081526003602052604090205490565b61095f610d26565b6001600160a01b03166109706109a2565b6001600160a01b0316146109965760405162461bcd60e51b815260040161060190613176565b6109a0600061129f565b565b600a546001600160a01b031690565b6109b9610d26565b6001600160a01b03166109ca6109a2565b6001600160a01b0316146109f05760405162461bcd60e51b815260040161060190613176565b600c55565b6060600180546105579061361c565b6008546001600160a01b031681565b610a1b610d26565b6001600160a01b0316826001600160a01b03161415610a4c5760405162461bcd60e51b815260040161060190612f5e565b8060056000610a59610d26565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610a9d610d26565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ad59190612d38565b60405180910390a35050565b6008546001600160a01b031615610b0a5760405162461bcd60e51b815260040161060190612d56565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b610b3d610b37610d26565b83610d98565b610b595760405162461bcd60e51b81526004016106019061334f565b610b65848484846112f1565b50505050565b600d5481565b6007546001600160a01b031681565b6060610b8b82610d09565b610ba75760405162461bcd60e51b8152600401610601906131f4565b6000610bb1611324565b90506000815111610bd15760405180602001604052806000815250610bfc565b80610bdb84611344565b604051602001610bec929190612c43565b6040516020818303038152906040525b9392505050565b6006546001600160a01b031681565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610c48610d26565b6001600160a01b0316610c596109a2565b6001600160a01b031614610c7f5760405162461bcd60e51b815260040161060190613176565b6001600160a01b038116610ca55760405162461bcd60e51b815260040161060190612df2565b610cae8161129f565b50565b610cb9610d26565b6001600160a01b0316610cca6109a2565b6001600160a01b031614610cae5760405162461bcd60e51b815260040161060190613176565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d5f826108d8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610da382610d09565b610dbf5760405162461bcd60e51b815260040161060190612f95565b6000610dca836108d8565b9050806001600160a01b0316846001600160a01b03161480610e055750836001600160a01b0316610dfa846105da565b6001600160a01b0316145b80610e155750610e158185610c12565b949350505050565b826001600160a01b0316610e30826108d8565b6001600160a01b031614610e565760405162461bcd60e51b8152600401610601906131ab565b6001600160a01b038216610e7c5760405162461bcd60e51b815260040161060190612f1a565b610e878383836106b9565b610e92600082610d2a565b6001600160a01b0383166000908152600360205260408120805460019290610ebb9084906135b6565b90915550506001600160a01b0382166000908152600360205260408120805460019290610ee9908490613435565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60606000610f578361145e565b90506000610f648261148e565b90506000610f71836114c5565b9050600081610f7f846114fc565b610f88866116f1565b604051602001610f9a93929190612c7b565b60408051601f1981840301815291815281516020928301206000818152600990935291205490915060ff1615610fe25760405162461bcd60e51b815260040161060190612ed6565b6000818152600960205260408120805460ff191660011790556110048561171b565b9050600061101182611828565b905061101c816118b7565b6008546001600160a01b039081169116146110495760405162461bcd60e51b8152600401610601906133a0565b6000611054876118ee565b905061107261106284611918565b8761106c8a61191f565b84611949565b61108e5760405162461bcd60e51b815260040161060190612e6f565b6110bc8561109b89611c47565b6110a48a611c71565b846110ae8c611c9b565b6110b78d611cc5565b611cef565b5060006110c883611df7565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366110fe6110f9836000611e3a565b611e74565b1461111b5760405162461bcd60e51b815260040161060190613318565b600061112684611eef565b8060200190518101906111399190612b97565b9b9a5050505050505050505050565b5490565b6001600160a01b0382166111725760405162461bcd60e51b8152600401610601906130f5565b61117b81610d09565b156111985760405162461bcd60e51b815260040161060190612e38565b6111a4600083836106b9565b6001600160a01b03821660009081526003602052604081208054600192906111cd908490613435565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b60065460085460405163b472047760e01b81526001600160a01b039283169263b47204779261126a929116908590600401612d14565b600060405180830381600087803b15801561128457600080fd5b505af1158015611298573d6000803e3d6000fd5b5050505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6112fc848484610e1d565b61130884848484611f19565b610b655760405162461bcd60e51b815260040161060190612da0565b606060405180608001604052806043815260200161371060439139905090565b60608161136957506040805180820190915260018152600360fc1b6020820152610543565b8160005b8115611393578061137d81613651565b915061138c9050600a8361344d565b915061136d565b6000816001600160401b038111156113bb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156113e5576020820181803683370190505b5090505b8415610e15576113fa6001836135b6565b9150611407600a8661366c565b611412906030613435565b60f81b81838151811061143557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611457600a8661344d565b94506113e9565b611466612895565b600061147961147484612031565b612056565b60408051602081019091529081529392505050565b606061054082600001516008815181106114b857634e487b7160e01b600052603260045260246000fd5b602002602001015161217b565b600061054082600001516002815181106114ef57634e487b7160e01b600052603260045260246000fd5b6020026020010151611e74565b6040805160208101909152600081528151606091901561054057600080611524600086612225565b60f81c9050600181148061153b57508060ff166003145b156115fe576001855160026115509190613597565b61155a91906135b6565b6001600160401b0381111561157f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115a9576020820181803683370190505b50925060006115b9600187612225565b905080846000815181106115dd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600192505061166f565b60028551600261160e9190613597565b61161891906135b6565b6001600160401b0381111561163d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611667576020820181803683370190505b509250600091505b60ff82165b83518110156116e75761169e61168d60ff8516836135b6565b611698906002613435565b87612225565b8482815181106116be57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806116df81613651565b915050611674565b5050509050919050565b600061054082600001516009815181106114ef57634e487b7160e01b600052603260045260246000fd5b6117236128a8565b61174b82600001516006815181106114b857634e487b7160e01b600052603260045260246000fd5b6020820181905260009061175e90612031565b9050611769816122c2565b1561177e5761177781612056565b8252611814565b60208201518051600090611794906001906135b6565b6001600160401b038111156117b957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117e3576020820181803683370190505b509050600080836021019150826020019050611801828285516122fc565b61180d61147484612031565b8652505050505b61181d836116f1565b604083015250919050565b6118306128c9565b6000611867836000015160038151811061185a57634e487b7160e01b600052603260045260246000fd5b6020026020010151612056565b83604001518151811061188a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016118ae83612056565b90529392505050565b600061054082602001516000815181106118e157634e487b7160e01b600052603260045260246000fd5b6020026020010151612375565b600061054082600001516005815181106114ef57634e487b7160e01b600052603260045260246000fd5b6020015190565b606061054082600001516007815181106114b857634e487b7160e01b600052603260045260246000fd5b60008061195584612031565b9050600061196282612056565b9050606080856000806119748b6114fc565b9050805160001415611990576000975050505050505050610e15565b60005b8651811015611c375781518311156119b657600098505050505050505050610e15565b6119e68782815181106119d957634e487b7160e01b600052603260045260246000fd5b602002602001015161238f565b955085805190602001208414611a0757600098505050505050505050610e15565b611a2a87828151811061185a57634e487b7160e01b600052603260045260246000fd5b9450845160111415611b29578151831415611a9a578c80519060200120611a6b866010815181106114b857634e487b7160e01b600052603260045260246000fd5b805190602001201415611a8957600198505050505050505050610e15565b600098505050505050505050610e15565b6000828481518110611abc57634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506010811115611ae15760009950505050505050505050610e15565b611b14868260ff1681518110611b0757634e487b7160e01b600052603260045260246000fd5b602002602001015161241d565b9450611b21600185613435565b935050611c25565b845160021415611a89576000611b63611b5c876000815181106114b857634e487b7160e01b600052603260045260246000fd5b848661244b565b8351909150611b728286613435565b1415611bd5578d80519060200120611ba4876001815181106114b857634e487b7160e01b600052603260045260246000fd5b805190602001201415611bc35760019950505050505050505050610e15565b60009950505050505050505050610e15565b80611bec5760009950505050505050505050610e15565b611bf68185613435565b9350611c1c86600181518110611b0757634e487b7160e01b600052603260045260246000fd5b9450611c259050565b80611c2f81613651565b915050611993565b5050505050505050949350505050565b600061054082600001516003815181106114ef57634e487b7160e01b600052603260045260246000fd5b600061054082600001516004815181106114ef57634e487b7160e01b600052603260045260246000fd5b600061054082600001516000815181106114ef57634e487b7160e01b600052603260045260246000fd5b606061054082600001516001815181106114b857634e487b7160e01b600052603260045260246000fd5b6007546040516320a9cea560e11b81526000918291829182916001600160a01b03909116906341539d4a90611d28908990600401612c72565b60a06040518083038186803b158015611d4057600080fd5b505afa158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d789190612ae1565b5093505092509250611dce828b611d8f91906135b6565b84878d8d8d8d604051602001611da89493929190612ca8565b6040516020818303038152906040528051906020012061257d909392919063ffffffff16565b611dea5760405162461bcd60e51b8152600401610601906132a0565b9998505050505050505050565b611dff612895565b6040518060200160405280611e32846020015160018151811061185a57634e487b7160e01b600052603260045260246000fd5b905292915050565b611e426128e9565b8251805183908110611e6457634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611e8957508151602110155b611e9257600080fd5b6000611ea18360200151612691565b90506000818460000151611eb591906135b6565b9050600080838660200151611eca9190613435565b9050805191506020831015611ee657826020036101000a820491505b50949350505050565b606061054082602001516002815181106114b857634e487b7160e01b600052603260045260246000fd5b6000611f2d846001600160a01b031661271c565b1561202957836001600160a01b031663150b7a02611f49610d26565b8786866040518563ffffffff1660e01b8152600401611f6b9493929190612cd7565b602060405180830381600087803b158015611f8557600080fd5b505af1925050508015611fb5575060408051601f3d908101601f19168201909252611fb291810190612b49565b60015b61200f573d808015611fe3576040519150601f19603f3d011682016040523d82523d6000602084013e611fe8565b606091505b5080516120075760405162461bcd60e51b815260040161060190612da0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e15565b506001610e15565b6120396128e9565b506040805180820190915281518152602082810190820152919050565b6060612061826122c2565b61206a57600080fd5b600061207583612722565b90506000816001600160401b0381111561209f57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156120d857816020015b6120c56128e9565b8152602001906001900390816120bd5790505b50905060006120ea8560200151612691565b85602001516120f99190613435565b90506000805b8481101561217057612110836127a5565b915060405180604001604052808381526020018481525084828151811061214757634e487b7160e01b600052603260045260246000fd5b602090810291909101015261215c8284613435565b92508061216881613651565b9150506120ff565b509195945050505050565b805160609061218957600080fd5b60006121988360200151612691565b905060008184600001516121ac91906135b6565b90506000816001600160401b038111156121d657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612200576020820181803683370190505b5090506000816020019050611ee684876020015161221e9190613435565b8285612849565b600061223260028461366c565b1561227a5760108261224560028661344d565b8151811061226357634e487b7160e01b600052603260045260246000fd5b0160200151612275919060f81c613680565b6122b8565b60108261228860028661344d565b815181106122a657634e487b7160e01b600052603260045260246000fd5b01602001516122b8919060f81c613461565b60f81b9392505050565b80516000906122d357506000610543565b6020820151805160001a9060c08210156122f257600092505050610543565b5060019392505050565b80612306576106b9565b6020811061233e578251825261231d602084613435565b925061232a602083613435565b91506123376020826135b6565b9050612306565b6000600161234d8360206135b6565b612359906101006134c9565b61236391906135b6565b84518451821691191617835250505050565b805160009060151461238657600080fd5b61054082611e74565b6060600082600001516001600160401b038111156123bd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123e7576020820181803683370190505b5090508051600014156123fb579050610543565b60008160200190506124168460200151828660000151612849565b5092915050565b805160009060211461242e57600080fd5b600080836020015160016124429190613435565b51949350505050565b60008080612458866114fc565b9050600081516001600160401b0381111561248357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156124ad576020820181803683370190505b509050845b82516124be9087613435565b81101561254d5760008782815181106124e757634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319169050808361250489856135b6565b8151811061252257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535050808061254590613651565b9150506124b2565b5080805190602001208280519060200120141561256d5781519250612572565b600092505b509095945050505050565b60006020825161258d919061366c565b156125aa5760405162461bcd60e51b815260040161060190613243565b6000602083516125ba919061344d565b90506125c78160026134c9565b85106125e55760405162461bcd60e51b815260040161060190613271565b60008660205b855181116126835785810151925061260460028961366c565b61263857818360405160200161261b929190612c35565b604051602081830303815290604052805190602001209150612664565b828260405160200161264b929190612c35565b6040516020818303038152906040528051906020012091505b61266f60028961344d565b975061267c602082613435565b90506125eb565b509094149695505050505050565b8051600090811a60808110156126ab576000915050610543565b60b88110806126c6575060c081108015906126c6575060f881105b156126d5576001915050610543565b60c081101561270a576126ea600160b86135cd565b6126f79060ff16826135b6565b612702906001613435565b915050610543565b6126ea600160f86135cd565b50919050565b3b151590565b805160009061273357506000610543565b6000806127438460200151612691565b84602001516127529190613435565b905060008460000151856020015161276a9190613435565b90505b8082101561279c5761277e826127a5565b6127889083613435565b91508261279481613651565b93505061276d565b50909392505050565b80516000908190811a60808110156127c05760019150612416565b60b88110156127e6576127d46080826135b6565b6127df906001613435565b9150612416565b60c08110156128135760b78103600185019450806020036101000a85510460018201810193505050612416565b60f8811015612827576127d460c0826135b6565b60019390930151602084900360f7016101000a900490920160f5190192915050565b80612853576106b9565b6020811061288b578251825261286a602084613435565b9250612877602083613435565b91506128846020826135b6565b9050612853565b8061233e576106b9565b6040518060200160405280606081525090565b60405180606001604052806060815260200160608152602001600081525090565b60405180604001604052806128dc6128e9565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b600082601f830112612913578081fd5b81356129266129218261340e565b6133e5565b81815284602083860101111561293a578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612965578081fd5b8135610bfc816136e4565b600060208284031215612981578081fd5b8151610bfc816136e4565b6000806040838503121561299e578081fd5b82356129a9816136e4565b915060208301356129b9816136e4565b809150509250929050565b6000806000606084860312156129d8578081fd5b83356129e3816136e4565b925060208401356129f3816136e4565b929592945050506040919091013590565b60008060008060808587031215612a19578081fd5b8435612a24816136e4565b93506020850135612a34816136e4565b92506040850135915060608501356001600160401b03811115612a55578182fd5b612a6187828801612903565b91505092959194509250565b60008060408385031215612a7f578182fd5b8235612a8a816136e4565b9150602083013580151581146129b9578182fd5b60008060408385031215612ab0578182fd5b8235612abb816136e4565b946020939093013593505050565b600060208284031215612ada578081fd5b5035919050565b600080600080600060a08688031215612af8578081fd5b855194506020860151935060408601519250606086015191506080860151612b1f816136e4565b809150509295509295909350565b600060208284031215612b3e578081fd5b8135610bfc816136f9565b600060208284031215612b5a578081fd5b8151610bfc816136f9565b600060208284031215612b76578081fd5b81356001600160401b03811115612b8b578182fd5b610e1584828501612903565b600060208284031215612ba8578081fd5b81516001600160401b03811115612bbd578182fd5b8201601f81018413612bcd578182fd5b8051612bdb6129218261340e565b818152856020838501011115612bef578384fd5b612c008260208301602086016135f0565b95945050505050565b60008151808452612c218160208601602086016135f0565b601f01601f19169290920160200192915050565b918252602082015260400190565b60008351612c558184602088016135f0565b835190830190612c698183602088016135f0565b01949350505050565b90815260200190565b60008482528351612c938160208501602088016135f0565b60209201918201929092526040019392505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d0a90830184612c09565b9695505050505050565b6001600160a01b0383168152604060208201819052600090610e1590830184612c09565b901515815260200190565b600060208252610bfc6020830184612c09565b6020808252602a908201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526023908201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260408201526227a7a360e91b606082015260800190565b6020808252600a908201526946443a6d57503a34303160b01b604082015260600190565b60208082526024908201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560408201526314d4d15160e21b606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252600a908201526923221d36aba81d1a181960b11b604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b6020808252601590820152744c65616620696e64657820697320746f6f2062696760581b604082015260600190565b6020808252601c908201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601f908201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526025908201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604082015264155393915360da1b606082015260800190565b6040518181016001600160401b0381118282101715613406576134066136ce565b604052919050565b60006001600160401b03821115613427576134276136ce565b50601f01601f191660200190565b60008219821115613448576134486136a2565b500190565b60008261345c5761345c6136b8565b500490565b600060ff831680613474576134746136b8565b8060ff84160491505092915050565b80825b600180861161349557506134c0565b8187048211156134a7576134a76136a2565b808616156134b457918102915b9490941c938002613486565b94509492505050565b6000610bfc60001984846000826134e257506001610bfc565b816134ef57506000610bfc565b8160018114613505576002811461350f5761353c565b6001915050610bfc565b60ff841115613520576135206136a2565b6001841b915084821115613536576135366136a2565b50610bfc565b5060208310610133831016604e8410600b841016171561356f575081810a8381111561356a5761356a6136a2565b610bfc565b61357c8484846001613483565b80860482111561358e5761358e6136a2565b02949350505050565b60008160001904831182151516156135b1576135b16136a2565b500290565b6000828210156135c8576135c86136a2565b500390565b600060ff821660ff8416808210156135e7576135e76136a2565b90039392505050565b60005b8381101561360b5781810151838201526020016135f3565b83811115610b655750506000910152565b60028104600182168061363057607f821691505b6020821081141561271657634e487b7160e01b600052602260045260246000fd5b6000600019821415613665576136656136a2565b5060010190565b60008261367b5761367b6136b8565b500690565b600060ff831680613693576136936136b8565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610cae57600080fd5b6001600160e01b031981168114610cae57600080fdfe697066733a2f2f62616679626569636f65366f6532796f65756263706c6a717165633376756c346e346c377a7a37616467726a6567696a6c77336e647833347663652fa2646970667358221220367b96bea5047c9088abb896a1334e8dbf4107963c8959f44596b11c44c7126a64736f6c63430008000033",
  "devdoc": {
    "details": "This contract should be deployed to Ethereum mainnet and is the ERC721 contract for your NFT.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintWithProof(bytes)": {
        "details": "We use Polygon to make registration and random selection inexpensive, then allow eligible minters to generate an L2 proof of bytes. Once the Polygon CheckpointManager indexes the L2 transaction, the proof can be used as a \"mint pass\" in this function. Minting is *expensive* in gas units but users may find this approach preferable to FCFS gas auctions.",
        "params": {
          "inputData": "proof generated for transaction via Matic SDK - see https://docs.polygon.technology/docs/develop/l1-l2-communication/state-transfer"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "receiveMessage(bytes)": {
        "params": {
          "inputData": "proof generated for transaction - see https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "MintWithProof",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintWithProof(bytes)": {
        "notice": "Mint token with L2 proof"
      },
      "receiveMessage(bytes)": {
        "notice": "no-op override"
      },
      "setPrice(uint256)": {
        "notice": "I have a regrettable FOMO ramp in my first project so I want to be able to adjust price as I please"
      }
    },
    "notice": "This is a reference implementation for a fair NFT drop.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3890,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3892,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3896,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3900,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3904,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3910,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2353,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "fxRoot",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IFxStateSender)2303"
      },
      {
        "astId": 2356,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICheckpointManager)2321"
      },
      {
        "astId": 2358,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2362,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "processedExits",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3042,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 6602,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)5166_storage"
      },
      {
        "astId": 6605,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "mintPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6609,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "remainingTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6613,
        "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
        "label": "exhaustedMinters",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)2321": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)2303": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5166_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 5165,
            "contract": "contracts/MintWithProof/MintWithProof.sol:MintWithProof",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}