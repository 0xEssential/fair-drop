{
  "address": "0xdB526eaA43e23e72a61F5a4D963d0E3464AD47c5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "adminBulkRegisterForDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentlyEligible",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kycRegisterForDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerForDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registrationStatus",
      "outputs": [
        {
          "internalType": "enum FairDropRegistration.RegistrationStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectEligibleBuyers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5c295c0dc18d7234a40d66439f81067b660e1b923f0aeea6e85d53f212bbfe1",
  "receipt": {
    "to": null,
    "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
    "contractAddress": "0xdB526eaA43e23e72a61F5a4D963d0E3464AD47c5",
    "transactionIndex": 0,
    "gasUsed": "1120675",
    "logsBloom": "0x
    "blockHash": "0x4937522c4eb32e87604b640a1291c787884b1bc60ef65b1e899c04c401a4e78e",
    "transactionHash": "0xd5c295c0dc18d7234a40d66439f81067b660e1b923f0aeea6e85d53f212bbfe1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21419548,
        "transactionHash": "0xd5c295c0dc18d7234a40d66439f81067b660e1b923f0aeea6e85d53f212bbfe1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000fecfded22780000000000000000000000000000000000000000000000000004411f0fe4b117bc00000000000000000000000000000000000000000000000001b9c15f59ad900000000000000000000000000000000000000000000000000004313211f78e9fbc00000000000000000000000000000000000000000000000001c9ae5d46d00800",
        "logIndex": 0,
        "blockHash": "0x4937522c4eb32e87604b640a1291c787884b1bc60ef65b1e899c04c401a4e78e"
      }
    ],
    "blockNumber": 21419548,
    "cumulativeGasUsed": "1120675",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
    "0xCf73231F28B7331BBe3124B907840A94851f9f11",
    "0xD03507B7eba508c0DE01A9FBdE4A0D9B5c56dDb6"
  ],
  "solcInputHash": "e8e498fd7836ba89d3f140676a8f4ba8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"adminBulkRegisterForDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentlyEligible\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycRegisterForDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerForDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrationStatus\",\"outputs\":[{\"internalType\":\"enum FairDropRegistration.RegistrationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectEligibleBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adminBulkRegisterForDrop(address[])\":{\"details\":\"Registration is once per address\"},\"kycRegisterForDrop()\":{\"details\":\"Registration is once per address\"},\"registerForDrop()\":{\"details\":\"Registration is once per address\"},\"selectEligibleBuyers()\":{\"details\":\"We use a public function so anyone may call it, but use guards to ensure it can't be called too soon. This could be replaced by Chainlink keepers once available on Polygon.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adminBulkRegisterForDrop(address[])\":{\"notice\":\"Register for drop\"},\"kycRegisterForDrop()\":{\"notice\":\"Register for drop\"},\"registerForDrop()\":{\"notice\":\"Register for drop\"},\"selectEligibleBuyers()\":{\"notice\":\"Public function for selecting next tranche of eligible minters\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FairDropRegistration/FairDropRegistration.sol\":\"FairDropRegistration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n}\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0xf5b498e3d85967e8bedcfa7f10078d6018b6168eb56926d1b18a526e68e1c467\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    address private _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ef3911dcb48e7ee88d217f4519e8d4bd3a705b941ffc6dbb006bbe557cd094d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/FairDropRegistration/FairDropRegistration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\\\";\\n\\nimport { Constants } from \\\"../Libraries/Constants.sol\\\";\\n\\ncontract FairDropRegistration is FxBaseChildTunnel, VRFConsumerBase, ERC2771Context {\\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n    bytes32 internal randomnessRequestId;\\n\\n    enum RegistrationStatus {\\n        Unregistered,\\n        Registered,\\n        Eligible,\\n        Ineligible\\n    }\\n\\n    mapping (address => RegistrationStatus) public registrationStatus;\\n    address[] internal registrants;\\n    address[5] public currentlyEligible;\\n    uint256 public remainingMints = Constants.MAX_TOKEN_COUNT;\\n\\n    // Timestamp when next eligible buyers can be selected\\n    uint256 public nextWindow;\\n\\n    modifier onlyForwarder() {\\n        require(isTrustedForwarder(msg.sender), \\\"FDR:429\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _vrfCoordinator,\\n        address _linkToken,\\n        bytes32 _keyhash,\\n        address _fxChild,\\n        address forwarder\\n    )\\n    FxBaseChildTunnel(_fxChild)\\n    VRFConsumerBase(_vrfCoordinator, _linkToken)\\n    ERC2771Context(forwarder) {\\n        keyHash = _keyhash;\\n        fee = 0.0001 * 10**18;\\n        nextWindow = block.timestamp + 2 minutes;\\n    }\\n\\n    /**\\n    * @notice Register for drop\\n    * @dev Registration is once per address\\n    */\\n    function registerForDrop() public {\\n        require(registrationStatus[_msgSender()] == RegistrationStatus.Unregistered, \\\"Already registered\\\");\\n        registrationStatus[_msgSender()] = RegistrationStatus.Registered;\\n        registrants.push(_msgSender());\\n    }\\n\\n    /**\\n    * @notice Register for drop\\n    * @dev Registration is once per address\\n    */\\n    function kycRegisterForDrop() public onlyForwarder {\\n        require(registrationStatus[_msgSender()] == RegistrationStatus.Unregistered, \\\"Already registered\\\");\\n        registrationStatus[_msgSender()] = RegistrationStatus.Registered;\\n        registrants.push(_msgSender());\\n    }\\n\\n    /**\\n    * @notice Register for drop\\n    * @dev Registration is once per address\\n    */\\n    function adminBulkRegisterForDrop(address[] memory addresses) public {\\n        require(registrationStatus[_msgSender()] == RegistrationStatus.Unregistered, \\\"Already registered\\\");\\n        registrationStatus[_msgSender()] = RegistrationStatus.Registered;\\n        registrants.push(_msgSender());\\n    }\\n\\n    /**\\n    * @notice Public function for selecting next tranche of eligible minters\\n    * @dev We use a public function so anyone may call it, but use guards to ensure it\\n    * can't be called too soon. This could be replaced by Chainlink keepers once\\n    * available on Polygon.\\n    */\\n    function selectEligibleBuyers() public {\\n        require(block.timestamp > nextWindow, \\\"Buying window still open\\\");\\n        nextWindow += Constants.WINDOW;\\n        randomnessRequestId = requestRandomness(keyHash, fee);\\n    }\\n\\n    /**\\n    * @notice Callback function used by VRF Coordinator\\n    * @dev Chainlink VRF is inexpensive enough on Polygon to use it for\\n    * trustless, fair and on-chain drops. When the contract receives a\\n    * random number from VRF, we select n WINDOW_PARTICIPANTS who are\\n    * newly eligible to mint and send those addresses to the L1 contract.\\n    * @param requestId id of request being fulfilled\\n    * @param randomness Random number received from VRF\\n    */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        require(requestId == randomnessRequestId, \\\"Bad randomness fulfillment\\\");\\n\\n        pickMinterTranche(randomness);\\n    }\\n\\n    function pickMinterTranche(uint256 randomness) internal {\\n        for (uint256 i = 0; i < currentlyEligible.length; i++) {\\n            registrationStatus[currentlyEligible[i]] = RegistrationStatus.Ineligible;\\n            currentlyEligible[i] = address(0); // Null address so we always have a full array to pass to mainnet\\n        }\\n\\n        uint256 iterations = 0;\\n        while (iterations < Constants.WINDOW_PARTICIPANTS && iterations < registrants.length) {\\n            uint256 localPseudoRandom = uint256(keccak256(abi.encode(randomness, block.timestamp)));\\n            address eligible = registrants[localPseudoRandom % registrants.length];\\n            if (registrationStatus[eligible] == RegistrationStatus.Registered) {\\n                currentlyEligible[iterations] = eligible;\\n                registrationStatus[eligible] = RegistrationStatus.Eligible;\\n            }\\n            iterations += 1;\\n        }\\n    }\\n\\n    function claim() public {\\n        require (registrationStatus[_msgSender()] == RegistrationStatus.Eligible, \\\"401\\\");\\n\\n        _sendMessageToRoot(abi.encode(_msgSender()));\\n    }\\n\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        (uint256 _remainingMints) = abi.decode(data, (uint256));\\n        remainingMints = _remainingMints;\\n    }\\n}\\n\",\"keccak256\":\"0x146b786ec2d6b1b0af4a693af3b6d534cda3018847557c97e83d8acbbcd2cb24\",\"license\":\"MIT\"},\"contracts/Libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary Constants {\\n    // How long does an eligible buyer have to purchase\\n    uint256 internal constant WINDOW = 10 minutes;\\n    // How many addresses are eligible to purchase per window\\n    uint256 internal constant WINDOW_PARTICIPANTS = 5;\\n\\n    // How many NFTs in entire drop?\\n    uint256 internal constant MAX_TOKEN_COUNT = 5;\\n}\\n\",\"keccak256\":\"0x0791cab540f2e709cb5f565df193836bf1c1bcc329d1b220ef8236ee4424d1a5\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x60c06040526005600e553480156200001657600080fd5b5060405162001252380380620012528339810160408190526200003991620000cb565b600080546001600160a01b038085166001600160a01b0319928316179092556001600160601b0319606088811b821660a05287901b1660805260038054928416929091169190911790556004839055655af3107a40006005556200009f42607862000131565b600f5550620001569350505050565b80516001600160a01b0381168114620000c657600080fd5b919050565b600080600080600060a08688031215620000e3578081fd5b620000ee86620000ae565b9450620000fe60208701620000ae565b9350604086015192506200011560608701620000ae565b91506200012560808701620000ae565b90509295509295909350565b600082198211156200015157634e487b7160e01b81526011600452602481fd5b500190565b60805160601c60a05160601c6110c962000189600039600081816104cc01526106ee015260006106bf01526110c96000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063602e03b4116100975780639a7c4b71116100665780639a7c4b71146101bb578063d87854cb146101ce578063fbc0f28c146101e3578063fffd5ec4146101f6576100f5565b8063602e03b41461016d5780637f1e9cb01461018d578063888370941461019557806394985ddd146101a8576100f5565b8063378c3874116100d3578063378c387414610135578063450d11f01461013d5780634e71d92d14610145578063572b6c051461014d576100f5565b8063204b262b146100fa57806333816e0e1461010457806336585fc11461010c575b600080fd5b6101026101fe565b005b610102610300565b61011f61011a366004610c6d565b61034f565b60405161012c9190610d78565b60405180910390f35b61010261036f565b61011f610394565b6101026103a3565b61016061015b366004610b4a565b61043b565b60405161012c9190610dbc565b61018061017b366004610b4a565b610452565b60405161012c9190610dfe565b61011f610467565b6101026101a3366004610b4a565b610476565b6101026101b6366004610c4c565b6104c1565b6101026101c9366004610c9d565b610517565b6101d6610588565b60405161012c919061100b565b6101026101f1366004610b6b565b61058e565b6101d6610688565b60006007600061020c61068e565b6001600160a01b0316815260208101919091526040016000205460ff16600381111561024857634e487b7160e01b600052602160045260246000fd5b1461026e5760405162461bcd60e51b815260040161026590610f3d565b60405180910390fd5b60016007600061027c61068e565b6001600160a01b031681526020810191909152604001600020805460ff191660018360038111156102bd57634e487b7160e01b600052602160045260246000fd5b021790555060086102cc61068e565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055565b600f5442116103215760405162461bcd60e51b815260040161026590610eb2565b610258600f60008282546103359190611014565b9250508190555061034a6004546005546106bb565b600655565b6009816005811061035f57600080fd5b01546001600160a01b0316905081565b6103783361043b565b6101fe5760405162461bcd60e51b815260040161026590610f69565b6000546001600160a01b031681565b6002600760006103b161068e565b6001600160a01b0316815260208101919091526040016000205460ff1660038111156103ed57634e487b7160e01b600052602160045260246000fd5b1461040a5760405162461bcd60e51b815260040161026590610f20565b61043961041561068e565b6040516020016104259190610d78565b6040516020818303038152906040526107fe565b565b6003546001600160a01b038281169116145b919050565b60076020526000908152604090205460ff1681565b6001546001600160a01b031681565b6001546001600160a01b03161561049f5760405162461bcd60e51b815260040161026590610fc1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105095760405162461bcd60e51b815260040161026590610f8a565b6105138282610838565b5050565b6000546001600160a01b031633146105415760405162461bcd60e51b815260040161026590610e26565b610582848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061086292505050565b50505050565b600e5481565b60006007600061059c61068e565b6001600160a01b0316815260208101919091526040016000205460ff1660038111156105d857634e487b7160e01b600052602160045260246000fd5b146105f55760405162461bcd60e51b815260040161026590610f3d565b60016007600061060361068e565b6001600160a01b031681526020810191909152604001600020805460ff1916600183600381111561064457634e487b7160e01b600052602160045260246000fd5b0217905550600861065361068e565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905550565b600f5481565b60006106993361043b565b156106ad575060131936013560601c6106b8565b6106b56108b1565b90505b90565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001610722929190610d6a565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161074f93929190610d8c565b602060405180830381600087803b15801561076957600080fd5b505af115801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a19190610c2c565b506000838152600260205260408120546107c0908590839030906108b5565b6000858152600260205260409020549091506107dd906001611014565b6000858152600260205260409020556107f684826108ef565b949350505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0368160405161082d9190610deb565b60405180910390a150565b60065482146108595760405162461bcd60e51b815260040161026590610ee9565b61051381610922565b60015482906001600160a01b038083169116146108915760405162461bcd60e51b815260040161026590610e67565b6000828060200190518101906108a79190610c85565b600e555050505050565b3390565b6000848484846040516020016108ce9493929190610dc7565b60408051601f19818403018152919052805160209091012095945050505050565b60008282604051602001610904929190610d6a565b60405160208183030381529060405280519060200120905092915050565b60005b60058110156109f1576003600760006009846005811061095557634e487b7160e01b600052603260045260246000fd5b01546001600160a01b031681526020810191909152604001600020805460ff1916600183600381111561099857634e487b7160e01b600052602160045260246000fd5b02179055506000600982600581106109c057634e487b7160e01b600052603260045260246000fd5b0180546001600160a01b0319166001600160a01b0392909216919091179055806109e98161102c565b915050610925565b5060005b600581108015610a06575060085481105b156105135760008242604051602001610a20929190610d6a565b60408051601f19818403018152919052805160209091012060088054919250600091610a4c9084611047565b81548110610a6a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905060016001600160a01b03821660009081526007602052604090205460ff166003811115610abe57634e487b7160e01b600052602160045260246000fd5b1415610b1f578060098460058110610ae657634e487b7160e01b600052603260045260246000fd5b0180546001600160a01b039283166001600160a01b031990911617905581166000908152600760205260409020805460ff191660021790555b610b2a600184611014565b925050506109f5565b80356001600160a01b038116811461044d57600080fd5b600060208284031215610b5b578081fd5b610b6482610b33565b9392505050565b60006020808385031215610b7d578182fd5b823567ffffffffffffffff80821115610b94578384fd5b818501915085601f830112610ba7578384fd5b813581811115610bb957610bb961107d565b83810260405185828201018181108582111715610bd857610bd861107d565b604052828152858101935084860182860187018a1015610bf6578788fd5b8795505b83861015610c1f57610c0b81610b33565b855260019590950194938601938601610bfa565b5098975050505050505050565b600060208284031215610c3d578081fd5b81518015158114610b64578182fd5b60008060408385031215610c5e578081fd5b50508035926020909101359150565b600060208284031215610c7e578081fd5b5035919050565b600060208284031215610c96578081fd5b5051919050565b60008060008060608587031215610cb2578182fd5b84359350610cc260208601610b33565b9250604085013567ffffffffffffffff80821115610cde578384fd5b818701915087601f830112610cf1578384fd5b813581811115610cff578485fd5b886020828501011115610d10578485fd5b95989497505060200194505050565b60008151808452815b81811015610d4457602081850181015186830182015201610d28565b81811115610d555782602083870101525b50601f01601f19169290920160200192915050565b918252602082015260400190565b6001600160a01b0391909116815260200190565b600060018060a01b038516825283602083015260606040830152610db36060830184610d1f565b95945050505050565b901515815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b600060208252610b646020830184610d1f565b6020810160048310610e2057634e487b7160e01b600052602160045260246000fd5b91905290565b60208082526021908201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e44456040820152602960f91b606082015260800190565b6020808252602b908201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560408201526a1497d19493d357d493d3d560aa1b606082015260800190565b60208082526018908201527f427579696e672077696e646f77207374696c6c206f70656e0000000000000000604082015260600190565b6020808252601a908201527f4261642072616e646f6d6e6573732066756c66696c6c6d656e74000000000000604082015260600190565b60208082526003908201526234303160e81b604082015260600190565b602080825260129082015271105b1c9958591e481c9959da5cdd195c995960721b604082015260600190565b6020808252600790820152664644523a34323960c81b604082015260600190565b6020808252601f908201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604082015260600190565b6020808252602a908201527f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b90815260200190565b6000821982111561102757611027611067565b500190565b600060001982141561104057611040611067565b5060010190565b60008261106257634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206b570d24acf7dd8761099663d54a1292d60468609edfc011719265e87d50b04264736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adminBulkRegisterForDrop(address[])": {
        "details": "Registration is once per address"
      },
      "kycRegisterForDrop()": {
        "details": "Registration is once per address"
      },
      "registerForDrop()": {
        "details": "Registration is once per address"
      },
      "selectEligibleBuyers()": {
        "details": "We use a public function so anyone may call it, but use guards to ensure it can't be called too soon. This could be replaced by Chainlink keepers once available on Polygon."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adminBulkRegisterForDrop(address[])": {
        "notice": "Register for drop"
      },
      "kycRegisterForDrop()": {
        "notice": "Register for drop"
      },
      "registerForDrop()": {
        "notice": "Register for drop"
      },
      "selectEligibleBuyers()": {
        "notice": "Public function for selecting next tranche of eligible minters"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2194,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2196,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 79,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3146,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6190,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "keyHash",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 6192,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "fee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6194,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "randomnessRequestId",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 6204,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "registrationStatus",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_enum(RegistrationStatus)6199)"
      },
      {
        "astId": 6207,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "registrants",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6211,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "currentlyEligible",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)5_storage"
      },
      {
        "astId": 6215,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "remainingMints",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6217,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "nextWindow",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)5_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RegistrationStatus)6199": {
        "encoding": "inplace",
        "label": "enum FairDropRegistration.RegistrationStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(RegistrationStatus)6199)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum FairDropRegistration.RegistrationStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(RegistrationStatus)6199"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}