{
  "address": "0xDFf2aF0570AbE5D93E97e0AED87aC9A1F6BA73B6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentlyEligible",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeperator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerForDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registrationStatus",
      "outputs": [
        {
          "internalType": "enum FairDropRegistration.RegistrationStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectEligibleBuyers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xac7ccb2db3ce16394be7a46c013c875d811149a0e70b561ebeb0f86f52e32969",
  "receipt": {
    "to": null,
    "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
    "contractAddress": "0xDFf2aF0570AbE5D93E97e0AED87aC9A1F6BA73B6",
    "transactionIndex": 0,
    "gasUsed": "1323069",
    "logsBloom": "0x
    "blockHash": "0xd5ffb07d4976d408e82edfba5add7eb7f823ad5378ad85e514e101a39c3fad7e",
    "transactionHash": "0xac7ccb2db3ce16394be7a46c013c875d811149a0e70b561ebeb0f86f52e32969",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17317756,
        "transactionHash": "0xac7ccb2db3ce16394be7a46c013c875d811149a0e70b561ebeb0f86f52e32969",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008d03ba34bffc000000000000000000000000000000000000000000000000005206ee76a577d400000000000000000000000000000000000000000000000101b9a6777943bf80fd0000000000000000000000000000000000000000000000005179eabc70b7d800000000000000000000000000000000000000000000000101ba337b33787f7cfd",
        "logIndex": 0,
        "blockHash": "0xd5ffb07d4976d408e82edfba5add7eb7f823ad5378ad85e514e101a39c3fad7e"
      }
    ],
    "blockNumber": 17317756,
    "cumulativeGasUsed": "1323069",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
    "0xCf73231F28B7331BBe3124B907840A94851f9f11"
  ],
  "solcInputHash": "b643a01d20aa662d743157b7b6e4655d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentlyEligible\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerForDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrationStatus\",\"outputs\":[{\"internalType\":\"enum FairDropRegistration.RegistrationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectEligibleBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"registerForDrop()\":{\"details\":\"Registration is once per address\"},\"selectEligibleBuyers()\":{\"details\":\"We use a public function so anyone may call it, but use guards to ensure it can't be called too soon. This could be replaced by Chainlink keepers once available on Polygon.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerForDrop()\":{\"notice\":\"Register for drop\"},\"selectEligibleBuyers()\":{\"notice\":\"Public function for selecting next tranche of eligible minters\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FairDropRegistration/FairDropRegistration.sol\":\"FairDropRegistration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/FairDropRegistration/FairDropRegistration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\n\\nimport { Constants } from \\\"../Libraries/Constants.sol\\\";\\nimport { ContextMixin } from \\\"../Libraries/matic/common/ContextMixin.sol\\\";\\nimport { FxBaseChildTunnel } from \\\"../Libraries/tunnel/FxBaseChildTunnel.sol\\\";\\nimport { NativeMetaTransaction } from \\\"../Libraries/matic/common/NativeMetaTransaction.sol\\\";\\n\\ncontract FairDropRegistration is NativeMetaTransaction, FxBaseChildTunnel, VRFConsumerBase {\\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n    bytes32 internal randomnessRequestId;\\n\\n    enum RegistrationStatus {\\n        Unregistered,\\n        Registered,\\n        Eligible,\\n        Ineligible\\n    }\\n\\n    mapping (address => RegistrationStatus) public registrationStatus;\\n    address[] internal registrants;\\n    address[] public currentlyEligible;\\n    uint256 public remainingMints = Constants.MAX_TOKEN_COUNT;\\n\\n    // Timestamp when next eligible buyers can be selected\\n    uint256 public nextWindow;\\n\\n    constructor(\\n        address _vrfCoordinator,\\n        address _linkToken,\\n        bytes32 _keyhash,\\n        address _fxChild\\n    )\\n    FxBaseChildTunnel(_fxChild)\\n    VRFConsumerBase(_vrfCoordinator, _linkToken) {\\n        _initializeEIP712(\\\"FairDropRegistration\\\");\\n        keyHash = _keyhash;\\n        fee = 0.0001 * 10**18;\\n        nextWindow = block.timestamp + 5 minutes;\\n    }\\n\\n    /**\\n    * @notice Register for drop\\n    * @dev Registration is once per address\\n    */\\n    function registerForDrop() public {\\n        require(registrationStatus[msg.sender] == RegistrationStatus.Unregistered, \\\"Already registered\\\");\\n        registrationStatus[msg.sender] = RegistrationStatus.Registered;\\n        registrants.push(msg.sender);\\n    }\\n\\n    /**\\n    * @notice Public function for selecting next tranche of eligible minters\\n    * @dev We use a public function so anyone may call it, but use guards to ensure it\\n    * can't be called too soon. This could be replaced by Chainlink keepers once\\n    * available on Polygon.\\n    */\\n    function selectEligibleBuyers() public {\\n        require(block.timestamp > nextWindow, \\\"Buying window still open\\\");\\n        nextWindow += Constants.WINDOW;\\n        randomnessRequestId = requestRandomness(keyHash, fee);\\n    }\\n\\n    /**\\n    * @notice Callback function used by VRF Coordinator\\n    * @dev Chainlink VRF is inexpensive enough on Polygon to use it for\\n    * trustless, fair and on-chain drops. When the contract receives a\\n    * random number from VRF, we select n WINDOW_PARTICIPANTS who are\\n    * newly eligible to mint and send those addresses to the L1 contract.\\n    * @param requestId id of request being fulfilled\\n    * @param randomness Random number received from VRF\\n    */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        require(requestId == randomnessRequestId, \\\"Bad randomness fulfillment\\\");\\n\\n        for (uint256 i = 0; i < currentlyEligible.length; i++) {\\n            registrationStatus[currentlyEligible[i]] = RegistrationStatus.Ineligible;\\n            delete currentlyEligible[i];\\n        }\\n\\n        // unbound, should be more careful here\\n        while (currentlyEligible.length < Constants.WINDOW_PARTICIPANTS) {\\n            uint256 localPseudoRandom = uint256(keccak256(abi.encode(randomness, block.timestamp)));\\n            address eligible = registrants[localPseudoRandom % registrants.length];\\n            if (registrationStatus[eligible] == RegistrationStatus.Registered) {\\n                currentlyEligible.push(eligible);\\n                registrationStatus[eligible] = RegistrationStatus.Eligible;\\n            }\\n        }\\n\\n        _sendMessageToRoot(abi.encodePacked(currentlyEligible));\\n    }\\n\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        (uint256 _remainingMints) = abi.decode(data, (uint256));\\n        remainingMints = _remainingMints;\\n    }\\n}\\n\",\"keccak256\":\"0x2d94abd5db042601101c8314849f20a5b7b51a8dde611868d929759e9e1df297\",\"license\":\"MIT\"},\"contracts/Libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary Constants {\\n    // How long does an eligible buyer have to purchase\\n    uint256 internal constant WINDOW = 24 hours;\\n    // How many addresses are eligible to purchase per window\\n    uint256 internal constant WINDOW_PARTICIPANTS = 5;\\n\\n    // How many NFTs in entire drop?\\n    uint256 internal constant MAX_TOKEN_COUNT = 5;\\n}\\n\",\"keccak256\":\"0x336d1833193f9355dcd0bd8a59c3e41579995b05f3028497a5331545a8a38054\",\"license\":\"AGPL-1.0\"},\"contracts/Libraries/matic/common/ContextMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nabstract contract ContextMixin {\\n    function msgSender() internal view returns (address payable sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = payable(msg.sender);\\n        }\\n        return sender;\\n    }\\n}\\n\",\"keccak256\":\"0x514c56797771d8b12d6d146fbc5075ada14d6877c996a260e32c602f73fc40d2\",\"license\":\"MIT\"},\"contracts/Libraries/matic/common/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport {Initializable} from \\\"../common/Initializable.sol\\\";\\n\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string public constant ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"));\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(string memory name) internal initializer {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdeebdfe70efe573f389b30fa73201817a78c398720e9d2be12d7956d102dcb2c\",\"license\":\"MIT\"},\"contracts/Libraries/matic/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ncontract Initializable {\\n    bool inited = false;\\n\\n    modifier initializer() {\\n        require(!inited, \\\"already inited\\\");\\n        _;\\n        inited = true;\\n    }\\n}\\n\",\"keccak256\":\"0xe85f1fc15b4a4257f2e56288d78830813c3c8de331fce8bb431c6974cba67194\",\"license\":\"MIT\"},\"contracts/Libraries/matic/common/NativeMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {EIP712Base} from \\\"../common/EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    using SafeMath for uint256;\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\n        keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature))\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return signer == ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n    }\\n}\\n\",\"keccak256\":\"0x1ee223723e208bb3d15cecfad4ace3dbd00684a21dcbdefb5cb9a5d89d00e712\",\"license\":\"MIT\"},\"contracts/Libraries/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) public {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes memory data\\n    ) public override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x8965a61839460352ceb1b341770cdc5c35870df449c169c70e952a29fd7d1dda\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526000805460ff191690556005600c553480156200002057600080fd5b5060405162001729380380620017298339810160408190526200004391620001f1565b600380546001600160a01b0383166001600160a01b03199091161790556001600160601b0319606085811b821660a05284901b1660805260408051808201909152601481527f4661697244726f70526567697374726174696f6e0000000000000000000000006020820152620000b990620000e4565b6006829055655af3107a4000600755620000d64261012c62000298565b600d5550620002bd92505050565b60005460ff1615620001135760405162461bcd60e51b81526004016200010a9062000270565b60405180910390fd5b6200011e816200012e565b506000805460ff19166001179055565b6040518060800160405280604f8152602001620016da604f913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6306200019c620001d0565b604051620001b295949392919060200162000244565b60408051601f19818403018152919052805160209091012060015550565b4690565b80516001600160a01b0381168114620001ec57600080fd5b919050565b6000806000806080858703121562000207578384fd5b6200021285620001d4565b93506200022260208601620001d4565b9250604085015191506200023960608601620001d4565b905092959194509250565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b6020808252600e908201526d185b1c9958591e481a5b9a5d195960921b604082015260600190565b60008219821115620002b857634e487b7160e01b81526011600452602481fd5b500190565b60805160601c60a05160601c6113ea620002f06000396000818161064201526107bf0152600061079001526113ea6000f3fe6080604052600436106100f35760003560e01c8063450d11f01161008a57806394985ddd1161005957806394985ddd1461025d5780639a7c4b711461027d578063d87854cb1461029d578063fffd5ec4146102b2576100f3565b8063450d11f0146101e6578063602e03b4146101fb5780637f1e9cb014610228578063888370941461023d576100f3565b80632d0335ab116100c65780632d0335ab1461016f57806333816e0e1461018f5780633408e470146101a457806336585fc1146101b9576100f3565b80630c53c51c146100f85780630f7e59701461012157806320379ee514610136578063204b262b14610158575b600080fd5b61010b610106366004610d3e565b6102c7565b6040516101189190611023565b60405180910390f35b34801561012d57600080fd5b5061010b610450565b34801561014257600080fd5b5061014b61046d565b6040516101189190610fd8565b34801561016457600080fd5b5061016d610473565b005b34801561017b57600080fd5b5061014b61018a366004610d24565b610520565b34801561019b57600080fd5b5061016d61053b565b3480156101b057600080fd5b5061014b61058b565b3480156101c557600080fd5b506101d96101d4366004610df8565b61058f565b6040516101189190610f68565b3480156101f257600080fd5b506101d96105b9565b34801561020757600080fd5b5061021b610216366004610d24565b6105c8565b6040516101189190611036565b34801561023457600080fd5b506101d96105dd565b34801561024957600080fd5b5061016d610258366004610d24565b6105ec565b34801561026957600080fd5b5061016d610278366004610dd7565b610637565b34801561028957600080fd5b5061016d610298366004610e28565b61068d565b3480156102a957600080fd5b5061014b6106c7565b3480156102be57600080fd5b5061014b6106cd565b60408051606081810183526001600160a01b0388166000818152600260209081529085902054845283015291810186905261030587828787876106d3565b61032a5760405162461bcd60e51b815260040161032190611200565b60405180910390fd5b6001600160a01b03871660009081526002602052604090205461034e906001610779565b6001600160a01b0388166000908152600260205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b9061039e90899033908a90610f7c565b60405180910390a1600080306001600160a01b0316888a6040516020016103c6929190610f16565b60408051601f19818403018152908290526103e091610efa565b6000604051808303816000865af19150503d806000811461041d576040519150601f19603f3d011682016040523d82523d6000602084013e610422565b606091505b5091509150816104445760405162461bcd60e51b815260040161032190611121565b98975050505050505050565b604051806040016040528060018152602001603160f81b81525081565b60015490565b3360009081526009602052604081205460ff1660038111156104a557634e487b7160e01b600052602160045260246000fd5b146104c25760405162461bcd60e51b81526004016103219061118f565b336000818152600960205260408120805460ff19166001908117909155600a805491820181559091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319169091179055565b6001600160a01b031660009081526002602052604090205490565b600d54421161055c5760405162461bcd60e51b8152600401610321906110ea565b62015180600d600082825461057191906112c2565b9250508190555061058660065460075461078c565b600855565b4690565b600b818154811061059f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b031681565b60096020526000908152604090205460ff1681565b6004546001600160a01b031681565b6004546001600160a01b0316156106155760405162461bcd60e51b815260040161032190611278565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461067f5760405162461bcd60e51b815260040161032190611241565b61068982826108cf565b5050565b6003546001600160a01b031633146106b75760405162461bcd60e51b81526004016103219061105e565b6106c2838383610b1b565b505050565b600c5481565b600d5481565b60006001600160a01b0386166106fb5760405162461bcd60e51b8152600401610321906111bb565b600161070e61070987610b6a565b610bc9565b8386866040516000815260200160405260405161072e9493929190611005565b6020604051602081039080840390855afa158015610750573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b600061078582846112c2565b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016107f3929190610eec565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161082093929190610fb1565b602060405180830381600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190610db7565b5060008381526005602052604081205461089190859083903090610be5565b6000858152600560205260409020549091506108ae9060016112c2565b6000858152600560205260409020556108c78482610c1f565b949350505050565b60085482146108f05760405162461bcd60e51b815260040161032190611158565b60005b600b548110156109c157600360096000600b848154811061092457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020805460ff1916600183600381111561097057634e487b7160e01b600052602160045260246000fd5b0217905550600b818154811061099657634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319169055806109b98161130a565b9150506108f3565b505b600b5460051115610af257600081426040516020016109e3929190610eec565b60408051601f198184030181529190528051602090910120600a8054919250600091610a0f9084611325565b81548110610a2d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905060016001600160a01b03821660009081526009602052604090205460ff166003811115610a8157634e487b7160e01b600052602160045260246000fd5b1415610aeb57600b8054600181019091557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0383166001600160a01b031990911681179091556000908152600960205260409020805460ff191660021790555b50506109c3565b610689600b604051602001610b079190610ea9565b604051602081830303815290604052610c52565b60045482906001600160a01b03808316911614610b4a5760405162461bcd60e51b81526004016103219061109f565b600082806020019051810190610b609190610e10565b600c555050505050565b60006040518060800160405280604381526020016113726043913980516020918201208351848301516040808701518051908601209051610bab9501610fe1565b6040516020818303038152906040528051906020012090505b919050565b6000610bd361046d565b82604051602001610bab929190610f4d565b600084848484604051602001610bfe9493929190610fe1565b60408051601f19818403018152919052805160209091012095945050505050565b60008282604051602001610c34929190610eec565b60405160208183030381529060405280519060200120905092915050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681604051610c819190611023565b60405180910390a150565b80356001600160a01b0381168114610bc457600080fd5b600082601f830112610cb3578081fd5b813567ffffffffffffffff80821115610cce57610cce61135b565b604051601f8301601f191681016020018281118282101715610cf257610cf261135b565b604052828152848301602001861015610d09578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215610d35578081fd5b61078582610c8c565b600080600080600060a08688031215610d55578081fd5b610d5e86610c8c565b9450602086013567ffffffffffffffff811115610d79578182fd5b610d8588828901610ca3565b9450506040860135925060608601359150608086013560ff81168114610da9578182fd5b809150509295509295909350565b600060208284031215610dc8578081fd5b81518015158114610785578182fd5b60008060408385031215610de9578182fd5b50508035926020909101359150565b600060208284031215610e09578081fd5b5035919050565b600060208284031215610e21578081fd5b5051919050565b600080600060608486031215610e3c578283fd5b83359250610e4c60208501610c8c565b9150604084013567ffffffffffffffff811115610e67578182fd5b610e7386828701610ca3565b9150509250925092565b60008151808452610e958160208601602086016112da565b601f01601f19169290920160200192915050565b60008183548391508483526020808420845b83811015610ee05781546001600160a01b031685529382019360019182019101610ebb565b50929695505050505050565b918252602082015260400190565b60008251610f0c8184602087016112da565b9190910192915050565b60008351610f288184602088016112da565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03848116825283166020820152606060408201819052600090610fa890830184610e7d565b95945050505050565b600060018060a01b038516825283602083015260606040830152610fa86060830184610e7d565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526107856020830184610e7d565b602081016004831061105857634e487b7160e01b600052602160045260246000fd5b91905290565b60208082526021908201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e44456040820152602960f91b606082015260800190565b6020808252602b908201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560408201526a1497d19493d357d493d3d560aa1b606082015260800190565b60208082526018908201527f427579696e672077696e646f77207374696c6c206f70656e0000000000000000604082015260600190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b6020808252601a908201527f4261642072616e646f6d6e6573732066756c66696c6c6d656e74000000000000604082015260600190565b602080825260129082015271105b1c9958591e481c9959da5cdd195c995960721b604082015260600190565b60208082526025908201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360408201526424a3a722a960d91b606082015260800190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b6020808252601f908201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604082015260600190565b6020808252602a908201527f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b600082198211156112d5576112d5611345565b500190565b60005b838110156112f55781810151838201526020016112dd565b83811115611304576000848401525b50505050565b600060001982141561131e5761131e611345565b5060010190565b60008261134057634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a26469706673582212204488e46906b648bb14483a447b7e1857091549ab2043ba2b96316a6a4e27ae2864736f6c63430008000033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "registerForDrop()": {
        "details": "Registration is once per address"
      },
      "selectEligibleBuyers()": {
        "details": "We use a public function so anyone may call it, but use guards to ensure it can't be called too soon. This could be replaced by Chainlink keepers once available on Polygon."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerForDrop()": {
        "notice": "Register for drop"
      },
      "selectEligibleBuyers()": {
        "notice": "Public function for selecting next tranche of eligible minters"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5131,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "inited",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5038,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "domainSeperator",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 5177,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5366,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "fxChild",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5368,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 79,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4702,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "keyHash",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 4704,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "fee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4706,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "randomnessRequestId",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 4716,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "registrationStatus",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_enum(RegistrationStatus)4711)"
      },
      {
        "astId": 4719,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "registrants",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4722,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "currentlyEligible",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4726,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "remainingMints",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4728,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "nextWindow",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RegistrationStatus)4711": {
        "encoding": "inplace",
        "label": "enum FairDropRegistration.RegistrationStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(RegistrationStatus)4711)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum FairDropRegistration.RegistrationStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(RegistrationStatus)4711"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}