{
  "address": "0x957e3EcB1D9F6967250c5c682863d6d3f0defE70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestedRandom",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "adminBulkRegisterForDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entrant",
          "type": "address"
        }
      ],
      "name": "eligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kycRegisterForDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerForDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registrationIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectEligibleBuyers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f62a7a01e6ed7e1722983e3049cee0794ce562e9dad0cf6cfc6f310b3020c4a",
  "receipt": {
    "to": null,
    "from": "0x0090720FeD7Fed66eD658118b7B3BB0189D3A495",
    "contractAddress": "0x957e3EcB1D9F6967250c5c682863d6d3f0defE70",
    "transactionIndex": 2,
    "gasUsed": "1262856",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000800000000000000000000000000000000000000000000000008000000001000000000000000000000000000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000002c00000000000000000000000000000000000000000000010000000000000000000200000000000000020000000000000000001000000000000000000000000004000000000000000000001000000000000000000000000000000100000000020000000000000002000000000000000000000000000000000000000000000100000",
    "blockHash": "0x240fb7a2164a9bb861cca363dad4631784b03c41fd972ccb87552947d19493c8",
    "transactionHash": "0x2f62a7a01e6ed7e1722983e3049cee0794ce562e9dad0cf6cfc6f310b3020c4a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 21509599,
        "transactionHash": "0x2f62a7a01e6ed7e1722983e3049cee0794ce562e9dad0cf6cfc6f310b3020c4a",
        "address": "0x957e3EcB1D9F6967250c5c682863d6d3f0defE70",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x240fb7a2164a9bb861cca363dad4631784b03c41fd972ccb87552947d19493c8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 21509599,
        "transactionHash": "0x2f62a7a01e6ed7e1722983e3049cee0794ce562e9dad0cf6cfc6f310b3020c4a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000090720fed7fed66ed658118b7b3bb0189d3a495",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000166ecde06990000000000000000000000000000000000000000000000000000418872f4988dbbc00000000000000000000000000000000000000000000020ee64b6e95e439a9c300000000000000000000000000000000000000000000000004021861691f4bbc00000000000000000000000000000000000000000000020ee661dd63c4a339c3",
        "logIndex": 17,
        "blockHash": "0x240fb7a2164a9bb861cca363dad4631784b03c41fd972ccb87552947d19493c8"
      }
    ],
    "blockNumber": 21509599,
    "cumulativeGasUsed": "1740275",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
    "0xCf73231F28B7331BBe3124B907840A94851f9f11",
    "0xD03507B7eba508c0DE01A9FBdE4A0D9B5c56dDb6"
  ],
  "solcInputHash": "739340220d05dc3cf21efd71bb08114a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestedRandom\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"adminBulkRegisterForDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entrant\",\"type\":\"address\"}],\"name\":\"eligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycRegisterForDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerForDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrationIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectEligibleBuyers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adminBulkRegisterForDrop(address[])\":{\"details\":\"Registration is once per address. This function is only callable by the contract owner, and can be used to bulk add addresses collected off-chain\"},\"claim()\":{\"details\":\"using the registrationStatus mapping, your frontend can display a button to perform this transaction for eligible minters. Once performed, the transaction will be checkpointed on L1 in ~15 minutes. Once checkpointed, use the Matic JS SDK to generate a proof to submit to the L1 contract.\"},\"eligible(address)\":{\"details\":\"We treat an NFT drop as TOKEN_SUPPLY raffles, where we divide the total registrants by remaining tokens to create raffle groups. Using Chainlinkn VRF, we find an index offset for a raffle group, and use that same index across all groups. If 100 addresses register for 5 tokens, we might generate an index offset of 8. Addresses at indices 8, 28, 48, 68 and 88 would then be eligible to mint.\"},\"kycRegisterForDrop()\":{\"details\":\"Registration is once per address. Registration with a metatransaction allows the proejct to cover gas fees for registrants, while also allowing the project to perform KYC or anti-bot checks, such as requiring an email registration.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerForDrop()\":{\"details\":\"Registration is once per address. This function is the most decentralized approach, but there is no Sybil resistance and may be flooded by bots.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"selectEligibleBuyers()\":{\"details\":\"We use a public function so anyone may call it, but use guards to ensure it can't be called too soon. This could be replaced by Chainlink keepers once available on Polygon.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adminBulkRegisterForDrop(address[])\":{\"notice\":\"Register bulk addresses for drop.\"},\"claim()\":{\"notice\":\"Claim mint pass by asking Polygon to checkpoint this tx to L1\"},\"eligible(address)\":{\"notice\":\"Get mint eligibility for the calling address\"},\"kycRegisterForDrop()\":{\"notice\":\"Register for drop via signed message\"},\"registerForDrop()\":{\"notice\":\"Register for drop\"},\"selectEligibleBuyers()\":{\"notice\":\"Public function for selecting next tranche of eligible minters\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FairDropRegistration/FairDropRegistration.sol\":\"FairDropRegistration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n}\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0xf5b498e3d85967e8bedcfa7f10078d6018b6168eb56926d1b18a526e68e1c467\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    address private _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ef3911dcb48e7ee88d217f4519e8d4bd3a705b941ffc6dbb006bbe557cd094d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"contracts/FairDropRegistration/FairDropRegistration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\\\";\\n\\nimport { Constants } from \\\"../Libraries/Constants.sol\\\";\\n\\ncontract FairDropRegistration is Ownable, FxBaseChildTunnel, VRFConsumerBase, ERC2771Context {\\n    event RequestedRandom(bytes32 requestId);\\n\\n    using Counters for Counters.Counter;\\n\\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n    bytes32 internal randomnessRequestId;\\n\\n    struct MintWindow {\\n        uint256 registrationsCount;\\n        uint256 remainingMints;\\n        uint256 seed;\\n    }\\n\\n    mapping (address => uint256) public registrationIndex;\\n    mapping (uint256 => MintWindow) internal mintWindows;\\n    mapping (uint256 => bytes32) windowRequestIds;\\n\\n    Counters.Counter private _registrationIndex;\\n\\n    uint256 public remainingMints = Constants.MAX_TOKEN_COUNT;\\n\\n    // Timestamp when next eligible buyers can be selected\\n    uint256 public nextWindow;\\n\\n    modifier onlyForwarder() {\\n        require(isTrustedForwarder(msg.sender), \\\"FDR:429\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _vrfCoordinator,\\n        address _linkToken,\\n        bytes32 _keyhash,\\n        address _fxChild,\\n        address forwarder\\n    )\\n    FxBaseChildTunnel(_fxChild)\\n    VRFConsumerBase(_vrfCoordinator, _linkToken)\\n    ERC2771Context(forwarder) {\\n        keyHash = _keyhash;\\n        fee = 0.0001 * 10**18;\\n        nextWindow = block.timestamp + Constants.WINDOW;\\n        _registrationIndex.increment(); // use a 1-based counter so that a 0 value for an address represents \\\"unregistered\\\"\\n    }\\n\\n    /**\\n    * @notice Register for drop\\n    * @dev Registration is once per address. This function is the most decentralized\\n    * approach, but there is no Sybil resistance and may be flooded by bots.\\n    */\\n    function registerForDrop() public {\\n        require(registrationIndex[_msgSender()] == 0, \\\"Already registered\\\");\\n        registrationIndex[_msgSender()] = _registrationIndex.current();\\n        _registrationIndex.increment();\\n    }\\n\\n    /**\\n    * @notice Register for drop via signed message\\n    * @dev Registration is once per address. Registration with a metatransaction\\n    * allows the proejct to cover gas fees for registrants, while also allowing the\\n    * project to perform KYC or anti-bot checks, such as requiring an email registration.\\n    */\\n    function kycRegisterForDrop() public onlyForwarder {\\n        require(registrationIndex[_msgSender()] == 0, \\\"Already registered\\\");\\n        registrationIndex[_msgSender()] = _registrationIndex.current();\\n        _registrationIndex.increment();\\n    }\\n\\n    /**\\n    * @notice Register bulk addresses for drop.\\n    * @dev Registration is once per address. This function is only callable by\\n    * the contract owner, and can be used to bulk add addresses collected off-chain\\n    */\\n    function adminBulkRegisterForDrop(address[] memory addresses) public onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            if (registrationIndex[addresses[i]] == 0) {\\n                registrationIndex[addresses[i]] = _registrationIndex.current();\\n\\n                _registrationIndex.increment();\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @notice Public function for selecting next tranche of eligible minters\\n    * @dev We use a public function so anyone may call it, but use guards to ensure it\\n    * can't be called too soon. This could be replaced by Chainlink keepers once\\n    * available on Polygon.\\n    */\\n    function selectEligibleBuyers() public returns (bytes32) {\\n        require(block.timestamp > nextWindow, \\\"Buying window still open\\\");\\n        require(windowRequestIds[nextWindow] == bytes32(0), \\\"Randomness requested for window\\\");\\n\\n        mintWindows[nextWindow] = MintWindow({\\n            registrationsCount: _registrationIndex.current() - 1,\\n            remainingMints: remainingMints,\\n            seed: 0\\n        });\\n        randomnessRequestId = requestRandomness(keyHash, fee);\\n        windowRequestIds[nextWindow] = randomnessRequestId;\\n\\n        emit RequestedRandom(randomnessRequestId);\\n    }\\n\\n    /**\\n    * @notice Callback function used by VRF Coordinator\\n    * @dev Chainlink VRF is inexpensive enough on Polygon to use it for\\n    * trustless, fair and on-chain drops. When the contract receives a\\n    * random number from VRF, we select n WINDOW_PARTICIPANTS who are\\n    * newly eligible to mint.\\n    * @param requestId id of request being fulfilled\\n    * @param randomness Random number received from VRF\\n    */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        require(requestId == randomnessRequestId, \\\"Bad randomness fulfillment\\\");\\n        mintWindows[nextWindow].seed = randomness;\\n        nextWindow = nextWindow + Constants.WINDOW;\\n    }\\n\\n\\n    /**\\n    * @notice Get mint eligibility for the calling address\\n    * @dev We treat an NFT drop as TOKEN_SUPPLY raffles,\\n    * where we divide the total registrants by remaining tokens\\n    * to create raffle groups. Using Chainlinkn VRF, we find an\\n    * index offset for a raffle group, and use that same index\\n    * across all groups. If 100 addresses register for 5 tokens,\\n    * we might generate an index offset of 8. Addresses at indices\\n    * 8, 28, 48, 68 and 88 would then be eligible to mint.\\n    */\\n    function eligible(address entrant) public view returns (bool) {\\n        if (_undersubscribed()) return true;\\n\\n        MintWindow storage window = mintWindows[nextWindow - Constants.WINDOW];\\n\\n        uint256 addressIndex = registrationIndex[entrant];\\n        uint256 registrationsCount = window.registrationsCount;\\n\\n        if (addressIndex == 0 || addressIndex > registrationsCount) return false;\\n        uint256 sliceSize = registrationsCount / window.remainingMints;\\n\\n        uint256 startIndex = window.seed % sliceSize;\\n\\n        if (addressIndex - 1 < startIndex) {\\n            return false;\\n        }\\n\\n        return (addressIndex - 1 - startIndex) % sliceSize == 0;\\n    }\\n\\n    /**\\n    * @notice Claim mint pass by asking Polygon to checkpoint this tx to L1\\n    * @dev using the registrationStatus mapping, your frontend can display\\n    * a button to perform this transaction for eligible minters. Once performed,\\n    * the transaction will be checkpointed on L1 in ~15 minutes. Once checkpointed,\\n    * use the Matic JS SDK to generate a proof to submit to the L1 contract.\\n    */\\n    function claim() public {\\n        require (eligible(msg.sender), \\\"FDR:c:401\\\");\\n\\n        _sendMessageToRoot(abi.encode(_msgSender(), nextWindow));\\n    }\\n\\n    /**\\n    * @notice Receives message from L1 contract, updating minter's eligibility and remaining mints.\\n    */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        (uint256 _remainingMints, address minter) = abi.decode(data, (uint256, address));\\n        remainingMints = _remainingMints;\\n        registrationIndex[minter] = 2**256 - 1;\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Context) returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Context) returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function _undersubscribed() internal view returns (bool) {\\n        return remainingMints >  _registrationIndex.current();\\n    }\\n}\\n\",\"keccak256\":\"0xaa9ac0ad63b24812a3982fc386be77a5c26bb4f96c5f8465613e6a6d2e53dffa\",\"license\":\"MIT\"},\"contracts/Libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary Constants {\\n    // How long does an eligible buyer have to purchase\\n    uint256 internal constant WINDOW = 24 hours;\\n    // How many addresses are eligible to purchase per window\\n    uint256 internal constant WINDOW_PARTICIPANTS = 5;\\n\\n    // How many NFTs in entire drop?\\n    uint256 internal constant MAX_TOKEN_COUNT = 5;\\n}\\n\",\"keccak256\":\"0x336d1833193f9355dcd0bd8a59c3e41579995b05f3028497a5331545a8a38054\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80637f1e9cb0116100a25780639a7c4b71116100715780639a7c4b71146101ec578063d87854cb146101ff578063f2fde38b14610207578063fbc0f28c1461021a578063fffd5ec41461022d57610116565b80637f1e9cb0146101b657806388837094146101be5780638da5cb5b146101d157806394985ddd146101d957610116565b8063450d11f0116100e9578063450d11f01461016b5780634e71d92d14610180578063572b6c05146101885780635e35ff9d1461019b578063715018a6146101ae57610116565b80630713b1391461011b578063204b262b1461014457806333816e0e1461014e578063378c387414610163575b600080fd5b61012e610129366004610bfa565b610235565b60405161013b9190610e88565b60405180910390f35b61014c610325565b005b6101566103ad565b60405161013b9190610e93565b61014c6104bc565b6101736104e1565b60405161013b9190610e2b565b61014c6104f0565b61012e610196366004610bfa565b610548565b6101566101a9366004610bfa565b61055c565b61014c61056e565b6101736105b7565b61014c6101cc366004610bfa565b6105c6565b610173610611565b61014c6101e7366004610cfe565b610621565b61014c6101fa366004610d4e565b610677565b6101566106e8565b61014c610215366004610bfa565b6106ee565b61014c610228366004610c1d565b61075f565b610156610875565b600061023f6108b6565b1561024c57506001610320565b60006009600062015180600d54610263919061119c565b8152602080820192909252604090810160009081206001600160a01b03871682526008909352205481549192509081158061029d57508082115b156102ae5760009350505050610320565b60008360010154826102c09190611188565b905060008185600201546102d491906111ce565b9050806102e260018661119c565b10156102f657600095505050505050610320565b818161030360018761119c565b61030d919061119c565b61031791906111ce565b15955050505050505b919050565b600860006103316108cb565b6001600160a01b03168152602081019190915260400160002054156103715760405162461bcd60e51b815260040161036890611013565b60405180910390fd5b61037b600b6108f2565b600860006103876108cb565b6001600160a01b031681526020810191909152604001600020556103ab600b61087b565b565b6000600d5442116103d05760405162461bcd60e51b815260040161036890610f5f565b600d546000908152600a6020526040902054156103ff5760405162461bcd60e51b8152600401610368906110cc565b60405180606001604052806001610416600b6108f2565b610420919061119c565b8152600c5460208083019190915260006040928301819052600d548152600982528290208351815590830151600182015591015160029091015560055460065461046a91906108f6565b6007819055600d546000908152600a602052604090819020829055517fc71577e8f0ec680aa109fb19838da0873901404355cd91164e2f79f5642bf13b916104b191610e93565b60405180910390a190565b6104c533610548565b6103255760405162461bcd60e51b81526004016103689061103f565b6001546001600160a01b031681565b6104f933610235565b6105155760405162461bcd60e51b815260040161036890611103565b6103ab6105206108cb565b600d54604051602001610534929190610e3f565b604051602081830303815290604052610a39565b6004546001600160a01b0390811691161490565b60086020526000908152604090205481565b6105766108cb565b6001600160a01b0316610587610611565b6001600160a01b0316146105ad5760405162461bcd60e51b815260040161036890611060565b6103ab6000610a73565b6002546001600160a01b031681565b6002546001600160a01b0316156105ef5760405162461bcd60e51b815260040161036890611126565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03165b90565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106695760405162461bcd60e51b815260040161036890611095565b6106738282610ac3565b5050565b6001546001600160a01b031633146106a15760405162461bcd60e51b815260040161036890610ed3565b6106e2848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b1292505050565b50505050565b600c5481565b6106f66108cb565b6001600160a01b0316610707610611565b6001600160a01b03161461072d5760405162461bcd60e51b815260040161036890611060565b6001600160a01b0381166107535760405162461bcd60e51b815260040161036890610f96565b61075c81610a73565b50565b6107676108cb565b6001600160a01b0316610778610611565b6001600160a01b03161461079e5760405162461bcd60e51b815260040161036890611060565b60005b815181101561067357600860008383815181106107ce57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546000141561086357610809600b6108f2565b6008600084848151811061082d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550610863600b61087b565b8061086d816111b3565b9150506107a1565b600d5481565b80546001019055565b600061088f33610548565b156108a3575060131936013560601c61061e565b6108ab6108b2565b905061061e565b3390565b60006108c2600b6108f2565b600c5411905090565b60006108d633610548565b156108ea575060131936013560601c61061e565b6108ab610884565b5490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161095d929190610e1d565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161098a93929190610e58565b602060405180830381600087803b1580156109a457600080fd5b505af11580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190610cde565b506000838152600360205260408120546109fb90859083903090610b82565b600085815260036020526040902054909150610a18906001611170565b600085815260036020526040902055610a318482610bbc565b949350505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681604051610a689190610ec0565b60405180910390a150565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6007548214610ae45760405162461bcd60e51b815260040161036890610fdc565b600d8054600090815260096020526040902060020182905554610b0b906201518090611170565b600d555050565b60025482906001600160a01b03808316911614610b415760405162461bcd60e51b815260040161036890610f14565b60008083806020019051810190610b589190610d1f565b600c919091556001600160a01b031660009081526008602052604090206000199055505050505050565b600084848484604051602001610b9b9493929190610e9c565b60408051601f19818403018152919052805160209091012095945050505050565b60008282604051602001610bd1929190610e1d565b60405160208183030381529060405280519060200120905092915050565b803561032081611224565b600060208284031215610c0b578081fd5b8135610c1681611224565b9392505050565b60006020808385031215610c2f578182fd5b823567ffffffffffffffff80821115610c46578384fd5b818501915085601f830112610c59578384fd5b813581811115610c6b57610c6b61120e565b83810260405185828201018181108582111715610c8a57610c8a61120e565b604052828152858101935084860182860187018a1015610ca8578788fd5b8795505b83861015610cd157610cbd81610bef565b855260019590950194938601938601610cac565b5098975050505050505050565b600060208284031215610cef578081fd5b81518015158114610c16578182fd5b60008060408385031215610d10578081fd5b50508035926020909101359150565b60008060408385031215610d31578182fd5b825191506020830151610d4381611224565b809150509250929050565b60008060008060608587031215610d63578182fd5b843593506020850135610d7581611224565b9250604085013567ffffffffffffffff80821115610d91578384fd5b818701915087601f830112610da4578384fd5b813581811115610db2578485fd5b886020828501011115610dc3578485fd5b95989497505060200194505050565b60008151808452815b81811015610df757602081850181015186830182015201610ddb565b81811115610e085782602083870101525b50601f01601f19169290920160200192915050565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038516825283602083015260606040830152610e7f6060830184610dd2565b95945050505050565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b600060208252610c166020830184610dd2565b60208082526021908201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e44456040820152602960f91b606082015260800190565b6020808252602b908201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560408201526a1497d19493d357d493d3d560aa1b606082015260800190565b60208082526018908201527f427579696e672077696e646f77207374696c6c206f70656e0000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601a908201527f4261642072616e646f6d6e6573732066756c66696c6c6d656e74000000000000604082015260600190565b602080825260129082015271105b1c9958591e481c9959da5cdd195c995960721b604082015260600190565b6020808252600790820152664644523a34323960c81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604082015260600190565b6020808252601f908201527f52616e646f6d6e6573732072657175657374656420666f722077696e646f7700604082015260600190565b6020808252600990820152684644523a633a34303160b81b604082015260600190565b6020808252602a908201527f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160408201526913149150511657d4d15560b21b606082015260800190565b60008219821115611183576111836111e2565b500190565b600082611197576111976111f8565b500490565b6000828210156111ae576111ae6111e2565b500390565b60006000198214156111c7576111c76111e2565b5060010190565b6000826111dd576111dd6111f8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461075c57600080fdfea2646970667358221220f912e16c71e74bbdcb62f3b6ff5acf3037047f9179eb587ac7ca5b1b1f99af6364736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adminBulkRegisterForDrop(address[])": {
        "details": "Registration is once per address. This function is only callable by the contract owner, and can be used to bulk add addresses collected off-chain"
      },
      "claim()": {
        "details": "using the registrationStatus mapping, your frontend can display a button to perform this transaction for eligible minters. Once performed, the transaction will be checkpointed on L1 in ~15 minutes. Once checkpointed, use the Matic JS SDK to generate a proof to submit to the L1 contract."
      },
      "eligible(address)": {
        "details": "We treat an NFT drop as TOKEN_SUPPLY raffles, where we divide the total registrants by remaining tokens to create raffle groups. Using Chainlinkn VRF, we find an index offset for a raffle group, and use that same index across all groups. If 100 addresses register for 5 tokens, we might generate an index offset of 8. Addresses at indices 8, 28, 48, 68 and 88 would then be eligible to mint."
      },
      "kycRegisterForDrop()": {
        "details": "Registration is once per address. Registration with a metatransaction allows the proejct to cover gas fees for registrants, while also allowing the project to perform KYC or anti-bot checks, such as requiring an email registration."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerForDrop()": {
        "details": "Registration is once per address. This function is the most decentralized approach, but there is no Sybil resistance and may be flooded by bots."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "selectEligibleBuyers()": {
        "details": "We use a public function so anyone may call it, but use guards to ensure it can't be called too soon. This could be replaced by Chainlink keepers once available on Polygon."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adminBulkRegisterForDrop(address[])": {
        "notice": "Register bulk addresses for drop."
      },
      "claim()": {
        "notice": "Claim mint pass by asking Polygon to checkpoint this tx to L1"
      },
      "eligible(address)": {
        "notice": "Get mint eligibility for the calling address"
      },
      "kycRegisterForDrop()": {
        "notice": "Register for drop via signed message"
      },
      "registerForDrop()": {
        "notice": "Register for drop"
      },
      "selectEligibleBuyers()": {
        "notice": "Public function for selecting next tranche of eligible minters"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3042,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2194,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "fxChild",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2196,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 79,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3146,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6201,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "keyHash",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 6203,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "fee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6205,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "randomnessRequestId",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 6216,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "registrationIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6221,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "mintWindows",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(MintWindow)6212_storage)"
      },
      {
        "astId": 6225,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "windowRequestIds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 6228,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "_registrationIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)5166_storage"
      },
      {
        "astId": 6232,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "remainingMints",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6234,
        "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
        "label": "nextWindow",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(MintWindow)6212_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FairDropRegistration.MintWindow)",
        "numberOfBytes": "32",
        "value": "t_struct(MintWindow)6212_storage"
      },
      "t_struct(Counter)5166_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 5165,
            "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MintWindow)6212_storage": {
        "encoding": "inplace",
        "label": "struct FairDropRegistration.MintWindow",
        "members": [
          {
            "astId": 6207,
            "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
            "label": "registrationsCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6209,
            "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
            "label": "remainingMints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6211,
            "contract": "contracts/FairDropRegistration/FairDropRegistration.sol:FairDropRegistration",
            "label": "seed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}